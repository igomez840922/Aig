@page "/"
@*@layout MainLayout*@
@using System.Linq
@using Aig.Farmacoterapia.Application.Dashboard.Event
@using Aig.Farmacoterapia.Application.Dashboard.Model
@using System.Globalization
@using Aig.Farmacoterapia.Application.Medicament.Model
@using Aig.Farmacoterapia.Domain.Common
@using Aig.Farmacoterapia.Domain.Entities
@using Aig.Farmacoterapia.Domain.Interfaces
@using Aig.Farmacoterapia.Infrastructure.Application
@using Aig.Farmacoterapia.Infrastructure.Configuration
@using Aig.Farmacoterapia.Public.Converter
@using Aig.Farmacoterapia.Public.Extensions
@using BlazorComponentBus
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Options
@inject ISystemLogger _systemLogger;
@inject IMedicamentRepository _repository;
@inject IOptions<AppConfiguration> _config;
@inject NavigationManager _navigation;
@inject AppState _appState;
@implements IDisposable;

<MudOverlay Visible="loading" LightBackground="true" Absolute="true">
    <MudProgressCircular Size="Size.Large" Color="Color.Default" Indeterminate="true" />
</MudOverlay>

<div class="col-xl-3 col-lg-3">
    <div class="category-sidebar cat-side mb-30">

        <div class="panel panel-default funkyradio divshadow">
            <div>
                <div class="panel-body" id="menuleft">

                    <span style="margin-left: 3px;text-align:center;font-size:12pt;font-weight:bold;color:#9b9b9b;">Filtros</span>
                    <button type="button" title="Borrar filtros" @onclick="() => OnClean()" class="action-btn f-right" href="#"><i class="fa fa-trash"></i></button>
                    <button type="button" title="Aplicar filtros" @onclick="() => OnSearch()" class="action-btn f-right" href="#"><i class="fa fa-filter"></i></button>

                    <div>
                        <MudSwitch style="margin-top: 5px;" @bind-Checked="@search.Or" Color="Color.Info" UnCheckedColor="Color.Error" Converter="@(new CustomStringToBoolConverter())">@(@search.Or)</MudSwitch>
                    </div>

                    <hr style=" margin: 0px 0 10px 0!important;border-bottom: 1px solid #adcdec;" />

                    <div style="display:flex">
                        <div>
                            <MudCheckBox Class="my-mud-icon-button" TriState="true" @bind-Checked="@search.MedicalPrescription" Color="Color.Error" UnCheckedColor="Color.Info">  Prescripción Médica </MudCheckBox>
                        </div>

                    </div>

                    <div style="display:flex">
                        <div>
                            <MudCheckBox Class="my-mud-icon-button" TriState="true" @bind-Checked="@search.HospitalUse" Color="Color.Error" UnCheckedColor="Color.Info">Uso Hospitalario </MudCheckBox>
                        </div>

                    </div>

                    <div style="display:flex">
                        <div>
                            <MudCheckBox Class="my-mud-icon-button" TriState="true" @bind-Checked="@search.PopularSale" Color="Color.Error" UnCheckedColor="Color.Info">Venta Popular</MudCheckBox>
                        </div>


                    </div>

                    <div style="margin-top:2px;border-top:1px solid #adcdec;margin-bottom:10px"></div>

                    <div style="display:flex">
                        <div>
                            <MudCheckBox Class="my-mud-icon-button" TriState="true" @bind-Checked="@search.ChemicalSynthesis" Color="Color.Error" UnCheckedColor="Color.Info">Síntesis Química </MudCheckBox>
                        </div>


                    </div>

                    <div style="display:flex">
                        <div>
                            <MudCheckBox Class="my-mud-icon-button" TriState="true" @bind-Checked="@search.Orphans" Color="Color.Error" UnCheckedColor="Color.Info">Huérfanos</MudCheckBox>
                        </div>



                    </div>

                    <div style="display:flex">
                        <div>
                            <MudCheckBox Class="my-mud-icon-button" TriState="true" @bind-Checked="@search.Homeopathic" Color="Color.Error" UnCheckedColor="Color.Info">Homeopáticos</MudCheckBox>
                        </div>


                    </div>

                    <div style="display:flex">
                        <div>
                            <MudCheckBox Class="my-mud-icon-button" TriState="true" @bind-Checked="@search.Phytopharmaceuticals" Color="Color.Error" UnCheckedColor="Color.Info">Fitofármacos</MudCheckBox>
                        </div>

                    </div>

                    <div style="display:flex">
                        <div>
                            <MudCheckBox Class="my-mud-icon-button" TriState="true" @bind-Checked="@search.Biotechnological" Color="Color.Error" UnCheckedColor="Color.Info">Biotecnológicos</MudCheckBox>
                        </div>

                    </div>

                    <div style="display:flex">
                        <div>
                            <MudCheckBox Class="my-mud-icon-button" TriState="true" @bind-Checked="@search.Biological" Color="Color.Error" UnCheckedColor="Color.Info">Biológicos</MudCheckBox>
                        </div>



                    </div>
                    <div style="margin-top:2px;border-top:1px solid #adcdec;margin-bottom:10px"></div>



                    <div style="display:flex">
                        <div>
                            <MudCheckBox Class="my-mud-icon-button" TriState="true" @bind-Checked="@search.Reference" Color="Color.Error" UnCheckedColor="Color.Info">Medicamento de Referencia</MudCheckBox>
                        </div>


                    </div>

                    <div style="display:flex">
                        <div>
                            <MudCheckBox Class="my-mud-icon-button" TriState="true" @bind-Checked="@search.Interchangeable" Color="Color.Error" UnCheckedColor="Color.Info">Medicamento Intercambiable</MudCheckBox>
                        </div>

                    </div>

                    <div style="display:flex">
                        <div>
                            <MudCheckBox Class="my-mud-icon-button" TriState="true" @bind-Checked="@search.Generic" Color="Color.Error" UnCheckedColor="Color.Info">Medicamento Genérico</MudCheckBox>
                        </div>

                    </div>

                    <div style="display:flex">
                        <div>
                            <MudCheckBox Class="my-mud-icon-button" TriState="true" @bind-Checked="@search.Mark" Color="Color.Error" UnCheckedColor="Color.Info">Medicamento de Marca</MudCheckBox>
                        </div>

                    </div>


                </div>

            </div>

        </div>

    </div>
</div>

<div class="col-xl-9 col-lg-9">
    <div class="pro-ful-tab">
        <div class="row">
            <div class="col-xl-4 col-lg-3 col-md-3">
                <div class="product-02-tab" style="margin: 0 10px 10px 10px !important;">
                    <ul class="nav justify-content-start product-nav" id="myTab" role="tablist">
                        <li class="nav-item">
                            <a class="nav-link active" id="home-tab" data-toggle="tab" href="#home" role="tab"
                               aria-controls="home" aria-selected="true">
                                <i class="fas fa-th-large"></i>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" id="profile-tab" data-toggle="tab" href="#profile" role="tab"
                               aria-controls="profile" aria-selected="false">
                                <i class="fas fa-bars"></i>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>

        </div>
        <div class="product-tab-content" style="padding: 10px !important; margin: 10px !important; border: 1px solid #e4e4e4 !important;">
            <div class="tab-content" id="myTabContent">

                @if (!loading && (paginatedResult == null || paginatedResult.Data.Count == 0))
                {
                    <div class="row">
                        <div class="col-xl-6 col-lg-6 offset-lg-3 offset-xl-3">
                            <div class="section-title text-center" style="padding: 50px !important;">
                                <h2>No se encontraron resultados</h2>
                                <p>Intente cambiar los parámetros de búsqueda </p>
                            </div>
                        </div>
                    </div>
                }

                @if (paginatedResult != null && paginatedResult.Data.Count > 0)
                {
                    <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab">
                        <div class="row">
                            @foreach (var context in paginatedResult.Data)
                            {

                                <div class="col-xl-3 cl-lg-3 col-md-6">
                                    <div style="box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;" class="product-03-wrapper pos-rel text-center mb-30">
                                        <div class="product-02-img pos-rel">

                                            @if (!string.IsNullOrEmpty(@context.PictureData))
                                            {
                                                <a target="_blank" href="/details/@context.Id">
                                                    <img src="@context.PictureData" Width="150" Height="150" />
                                                </a>
                                            }
                                            else
                                            {
                                                <a target="_blank" href="/details/@context.Id">
                                                    <img src="assets/img/products/no-image.png" Width="150" Height="140">
                                                </a>
                                            }

                                        </div>
                                        <div class="product-text">

                                            <h4>
                                                <a target="_blank" href="/details/@context.Id">@context.Nombre</a>
                                            </h4>

                                            <span>
                                                @context.Principio
                                            </span>

                                            <h5>
                                                @(!string.IsNullOrEmpty(@context.FormaFarmaceutica?.Nombre) ? @context.FormaFarmaceutica?.Nombre : "-")
                                            </h5>

                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>


                    <div class="tab-pane fade" id="profile" role="tabpanel" aria-labelledby="profile-tab">
                        @foreach (var context in paginatedResult.Data)
                        {
                            <div class="row">
                                <div class="col-3">
                                    <div class="product" style="box-shadow: rgb(149 157 165 / 20%) 0px 8px 24px; margin: 5px 5px 15px 5px;">
                                        <div class="product-img">

                                            @if (!string.IsNullOrEmpty(@context.PictureData))
                                            {
                                                <a target="_blank" href="/details/@context.Id">
                                                    <img src="@context.PictureData" Width="250" Height="200" Elevation="25" Class="rounded-lg" />
                                                </a>
                                            }
                                            else
                                            {
                                                <a target="_blank" href="/details/@context.Id">
                                                    <img src="assets/img/products/no-image.png" Width="250" Height="230" alt="">
                                                </a>
                                            }

                                        </div>
                                    </div>
                                </div>
                                <div class="col-9">
                                    <div class="product-list-content">
                                        <div class="product-text">
                                            <h4>
                                                <a target="_blank" href="/details/@context.Id">
                                                    @context.Nombre
                                                </a>
                                            </h4>
                                            <h5>@context.Principio</h5>
                                            <span>
                                                @(!string.IsNullOrEmpty(@context.FormaFarmaceutica?.Nombre) ? @context.FormaFarmaceutica?.Nombre : "-") /
                                                @(!string.IsNullOrEmpty(@context.ViaAdministracion?.Nombre) ? @context.ViaAdministracion?.Nombre : "-")
                                            </span>


                                        </div>

                                        <p>
                                            @context.Envase
                                        </p>

                                    </div>
                                </div>
                            </div>
                            <hr style="margin: 0 0 1rem 0 !important;" />
                        }

                    </div>

                }

            </div>
        </div>

        @if (paginatedResult != null && paginatedResult.Data.Count > 0)
        {

            <div class="d-flex flex-column align-center" style="margin-bottom: 10px;">
                <MudPagination Size="Size.Large" Selected="@paginatedResult.CurrentPage" SelectedChanged="PageChanged" Color="Color.Info" Count="@paginatedResult.TotalPages" />
            </div>

            <div class="row">
                <div class="col-12" style="text-align: center;">
                    <span style="text-align:center; color: #6c757d !important;font-size: 16px;"> @($"{paginatedResult.StartIndex+1} al {paginatedResult.EndIndex+1} de {paginatedResult.TotalCount }")</span>
                </div>
            </div>
        }
    </div>
</div>

@code {


    private HomeFilter search { get; set; }=new HomeFilter();
    protected bool loading { get; set; } = true;
    private MudPagination _mudPagination;
    private PaginatedResult<AigMedicamento> paginatedResult;
    public string customstr { get; set; } = "OR";
    protected async override Task OnInitializedAsync()
    { 
        _appState.OnChange-= SerachTextHasChanged;
        _appState.OnChange+= SerachTextHasChanged;
        paginatedResult = new PaginatedResult<AigMedicamento>(){PageSize=20};
        await DoFetchData();
        base.OnInitialized();
    }

    public void Dispose()
    {
        _appState.OnChange -= SerachTextHasChanged;
    }

    public void SerachTextHasChanged()
    {   
        Task.Run(async () => await  DoFetchData());
    }

    private async Task RefresView()
    {
        await this.InvokeAsync(StateHasChanged);
    }

    private async Task DoFetchData()
    {
        loading = true;
        await RefresView();
        var sorting =new List<SortingOption>(){ new SortingOption { Field = "name", Direction = SortingDirection.ASC } };
        var filters = new List<FilteringOption>();
        if (!string.IsNullOrEmpty(_appState.SerachText))
            filters.Add(new FilteringOption { Field = "term", Operator = FilteringOperator.Contains, Value = _appState.SerachText });
        if (search != null)
        {
            if (search.MedicalPrescription!=null)
                filters.Add(new FilteringOption { Field = "MedicalPrescription", Operator = FilteringOperator.Equal, Value =search.MedicalPrescription.Value?"CP":"SP" });
            if (search.HospitalUse!=null)
                filters.Add(new FilteringOption { Field = "HospitalUse", Operator = search.HospitalUse.Value? FilteringOperator.Equal:FilteringOperator.NotEqual, Value ="UH" });
            if (search.PopularSale!=null)
                filters.Add(new FilteringOption { Field = "PopularSale", Operator = search.PopularSale.Value? FilteringOperator.Equal:FilteringOperator.NotEqual, Value ="VP" });

            if (search.ChemicalSynthesis!=null)
                filters.Add(new FilteringOption { Field = "ChemicalSynthesis", Operator = search.ChemicalSynthesis.Value? FilteringOperator.Equal:FilteringOperator.NotEqual, Value ="SI" });
            if (search.Radiopharmaceuticals!=null)
                filters.Add(new FilteringOption { Field = "Radiopharmaceuticals", Operator = search.Radiopharmaceuticals.Value? FilteringOperator.Equal:FilteringOperator.NotEqual, Value ="RA" });
            if (search.Orphans!=null)
                filters.Add(new FilteringOption { Field = "Orphans", Operator = search.Orphans.Value? FilteringOperator.Equal:FilteringOperator.NotEqual, Value ="HU" });
            if (search.Homeopathic!=null)
                filters.Add(new FilteringOption { Field = "Homeopathic", Operator = search.Homeopathic.Value? FilteringOperator.Equal:FilteringOperator.NotEqual, Value ="HO" });
            if (search.Phytopharmaceuticals!=null)
                filters.Add(new FilteringOption { Field = "Phytopharmaceuticals", Operator = search.Phytopharmaceuticals.Value? FilteringOperator.Equal:FilteringOperator.NotEqual, Value ="FF" });
            if (search.Biotechnological!=null)
                filters.Add(new FilteringOption { Field = "Biotechnological", Operator = search.Biotechnological.Value? FilteringOperator.Equal:FilteringOperator.NotEqual, Value ="BT" });
            if (search.Biological!=null)
                filters.Add(new FilteringOption { Field = "Biological", Operator = search.Biological.Value? FilteringOperator.Equal:FilteringOperator.NotEqual, Value ="BI" });

            if (search.Interchangeable!=null)
                filters.Add(new FilteringOption { Field = "Interchangeable", Operator = search.Interchangeable.Value? FilteringOperator.Equal:FilteringOperator.NotEqual, Value ="I" });
            if (search.Reference!=null)
                filters.Add(new FilteringOption { Field = "Referencia", Operator = search.Reference.Value? FilteringOperator.Equal:FilteringOperator.NotEqual, Value ="R" });
            if (search.Generic!=null)
                filters.Add(new FilteringOption { Field = "Generic", Operator = search.Generic.Value? FilteringOperator.Equal:FilteringOperator.NotEqual, Value ="G" });
            if (search.Mark!=null)
                filters.Add(new FilteringOption { Field = "Mark", Operator = search.Mark.Value? FilteringOperator.Equal:FilteringOperator.NotEqual, Value ="M" });
        }
        var args = new PageSearchArgs() {
                PageIndex = paginatedResult.CurrentPage,
                PageSize = paginatedResult.PageSize,
                SortingOptions = sorting,
                FilteringOptions = filters,
                LogicalOperator = search?.Or == "Algunos" ? LogicalOperator.Or : LogicalOperator.And
    };
        paginatedResult = await _repository.ListAsync(args);
        loading = false;
        await RefresView();
    }
    private  async Task PageChanged(int i){
        paginatedResult.CurrentPage = i;
        await DoFetchData();
    }
     private async Task OnClean()
    {    
         search = new HomeFilter();
         await DoFetchData();
    }
     private async Task OnSearch()
    {  
         await DoFetchData();
    }
   
}
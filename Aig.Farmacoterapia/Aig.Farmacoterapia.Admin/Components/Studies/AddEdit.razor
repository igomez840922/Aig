@inject IJSRuntime JsRuntime
@using Aig.Farmacoterapia.Domain.Common
@using Aig.Farmacoterapia.Domain.Entities
@using Aig.Farmacoterapia.Domain.Entities.Enums
@using Aig.Farmacoterapia.Domain.Interfaces
@using Blazored.FluentValidation
@using System.Globalization
@inject IUnitOfWork _unitOfWork;
@inject IUploadService _uploadService;
@inject ISystemLogger _systemLogger;

<div class="modal show fade" style="display:block;overflow-y:auto!important;" tabindex="-1" data-backdrop="static" role="dialog" aria-labelledby="staticBackdrop" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">@(ModelData.Id > 0? "Editar" :"Nuevo")</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="@Cancel">
                </button>
            </div>
            <div class="modal-body">

                <div class="kt-portlet" style="margin-bottom:0px !important;">

                    <EditForm Model="@ModelData" OnValidSubmit="SaveData" class="kt-form kt-form--label-right">
                         <FluentValidationValidator />
     
                        <div class="kt-portlet__body">
                           
                            <div class="row">

                                <div class="col-lg-12">

                                     <div class="row">
                                       
                                        <div class="col-lg-12">
                                            <div>
                                                <label>Título del Estudio</label>
                                                <InputText type="text" class="form-control" @bind-Value="ModelData.Nombre" />
                                                <div class="error invalid-feedback">
                                                    <ValidationMessage For="@(() => ModelData.Nombre)" />
                                                </div>
                                            </div>
                                        </div>


                                    </div>

                                    <div class="row" style="margin-top: 15px;">
                                       
                                        <div class="col-lg-4">
                                            <div>
                                                <label>Código</label>
                                                <InputText type="text" class="form-control" @bind-Value="ModelData.Codigo" />
                                                <div class="error invalid-feedback">
                                                    <ValidationMessage For="@(() => ModelData.Codigo)" />
                                                </div>
                                            </div>
                                        </div>
                                        
                                         <div class="col-lg-4">
                                            <div>
                                                <label>No Registro DIGESA</label>
                                                <InputText type="text" class="form-control" @bind-Value="ModelData.RegistroProtocolo" />
                                                <div class="error invalid-feedback">
                                                    <ValidationMessage For="@(() => ModelData.RegistroProtocolo)" />
                                                </div>
                                            </div>
                                        
                                        </div>

                                         <div class="col-lg-4">
                                            <div>
                                                <MudDatePicker Culture="@CultureInfo.GetCultureInfo("es-Es")" DateFormat="dd/MM/yyyy" Style="border: 1px solid #e2e5ec;padding: 3px 8px 3px 8px;" Label="Fecha de Evaluación" @bind-Date="ModelData.FechaEvaluacion" />
                                                <p class="invalid"><ValidationMessage For=@(() => ModelData.FechaEvaluacion) /></p>
                                            </div>
                                        </div>

                                    </div>

                                    <div class="row" >


                                        <div class="col-lg-6">
                                            <div>
                                                <label>Notas de Evaluación</label>
                                                <textarea rows="4" class="form-control" @bind="ModelData.NotaEvaluacion" @bind:event="oninput" />
                                                <p class="invalid"><ValidationMessage For=@(() => ModelData.NotaEvaluacion) /></p>
                                            </div>
                                        </div>

                                         <div class="col-lg-6">
                                            <div>
                                                <label>Aspectos Sobresalientes</label>
                                                <textarea rows="4" class="form-control" @bind="ModelData.AspectosSobresalientes" @bind:event="oninput" />
                                                <p class="invalid"><ValidationMessage For=@(() => ModelData.AspectosSobresalientes) /></p>
                                            </div>
                                        </div>

                                    </div>

                                      <div class="row" style="margin-top: 15px;">
                                       
                                        <div class="col-lg-6">
                                            <div>
                                                <label>Centro de Investigación</label>
                                                <InputText type="text" class="form-control" @bind-Value="ModelData.CentroInvestigacion" />
                                                <div class="error invalid-feedback">
                                                    <ValidationMessage For="@(() => ModelData.CentroInvestigacion)" />
                                                </div>
                                            </div>
                                        </div>
                                        
                                         <div class="col-lg-6">
                                            <div>
                                                <label>Investigador Principal</label>
                                                <InputText type="text" class="form-control" @bind-Value="ModelData.InvestigadorPrincipal" />
                                                <div class="error invalid-feedback">
                                                    <ValidationMessage For="@(() => ModelData.InvestigadorPrincipal)" />
                                                </div>
                                            </div>
                                        
                                        </div>

                                        
                                    </div>

                                    <div class="row" style="margin-top: 15px;">
                                       
                                        <div class="col-lg-6">
                                            <div>
                                                <label>Comité de Bioética</label>
                                                <InputText type="text" class="form-control" @bind-Value="ModelData.ComiteBioetica" />
                                                <div class="error invalid-feedback">
                                                    <ValidationMessage For="@(() => ModelData.ComiteBioetica)" />
                                                </div>
                                            </div>
                                        </div>
                                        
                                         <div class="col-lg-3">
                                            <div>
                                                <label>Pacientes</label>
                                                <InputNumber  data-val-number="The field Number of children must be a number."  class="form-control" @bind-Value="ModelData.Pacientes" />
                                                <div class="error invalid-feedback">
                                                    <ValidationMessage For="@(() => ModelData.Pacientes)" />
                                                </div>
                                            </div>
                                        
                                        </div>

                                       <div class="col-lg-3">
                                            <div>
                                                <label>Duración del Estudio</label>
                                                <InputText type="text" class="form-control" @bind-Value="ModelData.Duracion" />
                                                <div class="error invalid-feedback">
                                                    <ValidationMessage For="@(() => ModelData.Duracion)" />
                                                </div>
                                            </div>
                                        
                                        </div>
                                        
                                    </div>

                                    <hr />

                                    <div class="row">

                                        <div class="col-lg-12">

                                            <table cellspacing="0" cellpadding="0">

                                                <tr>
                                                    <td style="border-right: 1px solid #e2e5ec; padding-right: 5px;">

                                                        <table class="divInputFile" cellspacing="0" cellpadding="0">

                                                            <tr>
                                                                <td>
                                                                    <div>
                                                                        <InputFile id="fileInput" hidden OnChange="UploadFiles" SuppressOnChangeWhenInvalid="SuppressOnChangeWhenInvalid" />
                                                                        <MudButton HtmlTag="label"
                                                                                   Variant="Variant.Text"
                                                                                   Color="Color.Primary"
                                                                                   Size="Size.Small"
                                                                                   StartIcon="@Icons.Filled.AttachFile"
                                                                                   for="fileInput">
                                                                            Formulario de solicitud
                                                                        </MudButton>

                                                                    </div>

                                                                </td>
                                                                <td>
                                                                    <div>

                                                                        @if (!showFileInputAlert && !string.IsNullOrEmpty(ModelData.FormDataURL))
                                                                        {
                                                                            <MudButton Variant="Variant.Text"
                                                                                       Color="Color.Info"
                                                                                       StartIcon="@Icons.Filled.RemoveRedEye"
                                                                                       Size="Size.Small"
                                                                                       Link="@(ModelData.FormDataURL)" Target="_blank">
                                                                                Ver
                                                                            </MudButton>
                                                                            <MudButton Variant="Variant.Text"
                                                                                       Color="Color.Error"
                                                                                       StartIcon="@Icons.Filled.Delete"
                                                                                       Size="Size.Small"
                                                                                       OnClick="DeleteFileAsync">
                                                                                Eliminar
                                                                            </MudButton>
                                                                        }
                                                                    </div>
                                                                </td>
                                                                @if (fileLoading)
                                                                {
                                                                    <td>
                                                                        <div>
                                                                            <MudProgressCircular style="margin-left: 10px !important" Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
                                                                        </div>
                                                                    </td>
                                                                }
                                                            </tr>

                                                        </table>

                                                    </td>

                                                   
                                                </tr>

                                            </table>

                                            @if (showFileInputAlert)
                                            {
                                                <MudAlert Severity="Severity.Error" Dense="true" Class="my-2">El tamaño máximo de fichero para la monografía es de 50 MB </MudAlert>
                                            }
                                          
                                        </div>

                                    </div>

                                </div>

                            </div>

                        </div>

                        <div class="kt-portlet__foot" style="padding:10px!important">
                            <div class="kt-form__actions text-right">

                                <button type="button" class="btn btn-secondary" @onclick="@Cancel">Cancelar</button>
                                <button type="submit" class="btn btn-primary btn-square">Guardar</button>

                            </div>
                        </div>
                    </EditForm>

                </div>

            </div>
        </div>
    </div>
</div>

<div class="modal-backdrop fade show"></div>


@code {

    [Parameter] public EventCallback<long> OnClose { get; set; }
    [Parameter] public AigEstudios ModelData { get; set; }
    private IBrowserFile _file;
    protected bool fileLoading { get; set; } = false;
    private bool showFileInputAlert = false;
    protected async override Task OnInitializedAsync()
    {   
        base.OnInitialized();
    }
     private async Task RefresView()
    {
        await this.InvokeAsync(StateHasChanged);
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        _file = e.File;
        if (_file != null)
        {
            try
            {
                fileLoading = true;
                showFileInputAlert = false;
                await RefresView();
                long maxFileSize = 1048576 * 50;//20MB
                var extension = Path.GetExtension(_file.Name);
                if (_file.Size <= maxFileSize)
                {
                    var stream = _file.OpenReadStream(maxAllowedSize: maxFileSize);
                    var request = new UploadObject
                        {
                            FileName = $"{Guid.NewGuid()}{extension}",
                            Data = stream,
                            Size = _file.Size,
                            UploadType = UploadType.Studies,
                            Extension = extension
                        };
                    ModelData.FormDataURL = await _uploadService.UploadAsync(request);
                }
                else { showFileInputAlert = true; }

            }
            catch (Exception ex)
            {
                _systemLogger.Error(ex);
            }
            finally { fileLoading = false;  await RefresView();}
        }
    }

    private async Task DeleteFileAsync()
    {
        if (await _uploadService.DeleteAsync(ModelData.FormDataURL))
        {
            _file = null;
            ModelData.FormDataURL = null;
        }

    }


    private Task Cancel()
    {
        return OnClose.InvokeAsync(0);
    }
   
    protected async Task SaveData()
    {
       
        AigEstudios result;
        if(ModelData.Id > 0)
            result=await _unitOfWork.Repository<AigEstudios>().UpdateAsync(ModelData);
        else
            result=await _unitOfWork.Repository<AigEstudios>().AddAsync(ModelData);
        if( _unitOfWork.Commit()){
            ModelData = result;
            await JsRuntime.InvokeVoidAsync("ShowMessage", "El elemento ha sido creado correctamente"); 
            await OnClose.InvokeAsync(result.Id);
        }
        else
          await JsRuntime.InvokeVoidAsync("ShowError", "Error durante la operación");
    }
}

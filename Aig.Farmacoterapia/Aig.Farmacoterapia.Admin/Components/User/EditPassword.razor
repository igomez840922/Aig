@inject IJSRuntime JsRuntime
@using Aig.Farmacoterapia.Domain.Entities
@using Aig.Farmacoterapia.Domain.Entities.Enums
@using Aig.Farmacoterapia.Domain.Interfaces
@using Aig.Farmacoterapia.Infrastructure.Identity
@using Aig.Farmacoterapia.Infrastructure.Interfaces
@inject IUserService _userService;
@inject ISystemLogger _systemLogger;

<style>
      .invalid-feedback {
         background-color: var(--mud-palette-error-hover) !important;
         color: #f44336 !important; 
         display: inline !important;
     }
    .kt-avatar .kt-avatar__cancel {display: flex !important;}
</style>
<div class="modal show fade" style="display:block;overflow-y:auto!important;" tabindex="-1" data-backdrop="static" role="dialog" aria-labelledby="staticBackdrop" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Cambiar contraseña</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="@Cancel">
                </button>
            </div>
            <div class="modal-body">

                <div class="kt-portlet" style="margin-bottom:0px !important;">

                    <EditForm Model="@ModelData" OnValidSubmit="SaveData" class="kt-form kt-form--label-right">
                        <DataAnnotationsValidator />
     
                        <div class="kt-portlet__body">
                            <div class="row">
                                <div class="col-lg-12">
                                    <div>
                                        <label>Contraseña</label>
                                        <InputText type="password" class="form-control" @bind-Value="ModelData.Password" name="Password" />
                                        <p class="invalid"><ValidationMessage For=@(() => ModelData.Password) /></p>
                                    </div>
                                </div>
                                <div class="col-lg-12">
                                    <div>
                                        <label>Confirmar Contraseña</label>
                                        <InputText type="password" class="form-control" @bind-Value="ModelData.PasswordConfirm" name="PasswordConfirm" />
                                        <p class="invalid"><ValidationMessage For=@(() => ModelData.PasswordConfirm) /></p>
                                    </div>
                                </div>

                            </div>
                        </div>

                        <div class="kt-portlet__foot" style="padding:10px!important">
                            <div class="kt-form__actions text-right">

                                <button type="button" class="btn btn-secondary" @onclick="@Cancel">Cancel</button>
                                <button type="submit" class="btn btn-primary btn-square">Save</button>

                            </div>
                        </div>
                    </EditForm>

                </div>

            </div>
        </div>
    </div>
</div>

<div class="modal-backdrop fade show"></div>


@code {

    [Parameter] public EventCallback<string> OnClose { get; set; }
    [Parameter] public ApplicationUser ModelData { get; set; }

    private async Task<byte[]> GetDataAsync(Stream stream)
    {
        byte[] data;
        await using (var memoryStream = new MemoryStream())
        {
            await using var responseStream = stream;
            await responseStream.CopyToAsync(memoryStream);
            data = memoryStream.ToArray();
        }
        return data;
    }

    protected async override Task OnInitializedAsync()
    {   
        base.OnInitialized();
    }

    private Task Cancel()
    {
        return OnClose.InvokeAsync(string.Empty);
    }

    protected async Task SaveData()
    {
        var result = await _userService.ChangePasswordAsync(ModelData);
        if (!result.Succeeded)
           await JsRuntime.InvokeVoidAsync("ShowError",result.Messages.First());
        else {
           await OnClose.InvokeAsync(ModelData.Id);
           await JsRuntime.InvokeVoidAsync("ShowMessage",result.Messages.First());
        }
    }
}

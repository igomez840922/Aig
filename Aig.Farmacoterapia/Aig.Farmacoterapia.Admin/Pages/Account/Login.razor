@page "/login"
@using Aig.Farmacoterapia.Infrastructure.Identity
@using Blazored.FluentValidation
@using Microsoft.AspNetCore.Identity
@using Aig.Farmacoterapia.Application.Common.Middleware
@using Aig.Farmacoterapia.Application.Login.Model
@using Aig.Farmacoterapia.Domain.Interfaces
@layout AccountLayout
@attribute [AllowAnonymous]
@inject NavigationManager navigationManager
@inject UserManager<ApplicationUser> userManager
@inject SignInManager<ApplicationUser> signInManager
@inject IJSRuntime JS

<style>
    .invalid-feedback {
        color: #f44336 !important;
        display: inline !important;
    }

    .validation-message {
        background-color: rgb(254 244 243) !important;
        padding-left: 5px;
        margin-top: 5px;
    }
</style>

<div class="kt-login__form">
    <div class="kt-login__title">
        <h3>Entrar en su cuenta</h3>
    </div>
    <EditForm class="kt-form" Model="@LoginRequest" OnValidSubmit="@SubmitValidForm">
        <FluentValidationValidator />
        <div class="input-group">
            <label class="text-danger">@Error</label>
        </div>
        <div class="form-group is-invalid">
            <InputText class="form-control" type="text" autocomplete="off" placeholder="Usuario"
                        name="UserName" @bind-Value="LoginRequest.UserName"/>
            <div class="error invalid-feedback">
                <ValidationMessage For="@(() => LoginRequest.UserName)"/>
            </div>
        </div>
        <div class="form-group validate is-invalid">
            <InputText class="form-control" type="password" autocomplete="off" placeholder="Contraseña"
                        name="Password" @bind-Value="LoginRequest.Password"/>
            <div class="error invalid-feedback">
                <ValidationMessage For="@(() => LoginRequest.Password)"/>
            </div>
        </div>
         <div class="kt-login__actions">
             <label class="kt-checkbox">
                 <InputCheckbox type="checkbox" name="remember" @bind-Value="LoginRequest.RememberMe"/>
                    Recuerdame
                   <span></span>
                </label> 
                
             @if (loading)
             {
               <MudProgressCircular style="margin-left: 150px;color: #5d78ff !important;" Size="Size.Small" Indeterminate="true" />
             }

            <button class="btn btn-brand kt-login__btn-primary" type="submit">
               <span> Entrar </span>
             </button>
        </div>
       
    </EditForm>

</div>

@* 
<div class="kt-login__signin">
    <div class="kt-login__head">
        <h3 class="kt-login__title">Entrar en su cuenta</h3>
    </div>


  <div class="kt-login__form">
        
        <EditForm Model="@LoginRequest" OnValidSubmit="@SubmitValidForm">
            <FluentValidationValidator />
            <div class="input-group">
                <label class="text-danger">@Error</label>
            </div>
            <div class="form-group is-invalid">
                <InputText class="form-control" type="text" autocomplete="off" placeholder="Usuario"
                           name="UserName" @bind-Value="LoginRequest.UserName"/>
                <div class="error invalid-feedback">
                    <ValidationMessage For="@(() => LoginRequest.UserName)"/>
                </div>
            </div>
            <div class="form-group validate is-invalid">
                <InputText class="form-control" type="password" autocomplete="off" placeholder="Contraseña"
                           name="Password" @bind-Value="LoginRequest.Password"/>
                <div class="error invalid-feedback">
                    <ValidationMessage For="@(() => LoginRequest.Password)"/>
                </div>
            </div>
            <div class="row kt-login__extra">
                <div class="col">
                    <label class="kt-checkbox">
                        <InputCheckbox type="checkbox" name="remember" @bind-Value="LoginRequest.RememberMe"/>
                        Recuerdame
                        <span></span>
                    </label>
                    
                </div>
                 
            </div>
           <div class="kt-login__actions">
                <button id="kt_login_signin_submit" class="btn btn-brand kt-login__btn-primary"
                        type="submit">Entrar</button>
            </div>
        </EditForm>

    </div>
</div>
*@

@code{

    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; }
    protected bool loading { get; set; } = false;
    LoginModel LoginRequest { get; set; } = new LoginModel();
    string Error { get; set; } = string.Empty;
    string InvalidUser { get; set; } =  "Usuario o contraseña no válidos";
    string LockedUser{ get; set; } =  "Su cuenta ha sido bloqueada";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var user = (await AuthStat).User;
        if (user.Identity is {IsAuthenticated: true })
            navigationManager.NavigateTo("./");
         else loading = false;
    }
    private async Task SubmitValidForm()
    {
        try
        {
            loading = true;
            var usr = await userManager.FindByNameAsync(LoginRequest.UserName);
            if (usr == null){
                Error = this.InvalidUser;
                return;
            }
            if (await signInManager.CanSignInAsync(usr))
            {
                var result = await signInManager.CheckPasswordSignInAsync(usr, LoginRequest.Password, true);
                if (result.Succeeded)
                {
                    var key = BlazorCookieLoginMiddleware<ApplicationUser>.AnnounceLogin(LoginRequest);
                    navigationManager.NavigateTo($"./login?key={key}", true);
                }
                else
                    Error = this.InvalidUser;
            }
            else
                Error = this.LockedUser;

        }
        catch (Exception ex){
            Error = ex.Message;
        }
        //finally {loading = false;}
    }
   
}

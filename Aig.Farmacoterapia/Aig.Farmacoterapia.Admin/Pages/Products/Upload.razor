@page "/products/upload"
@attribute [Authorize]
@inject HttpClient _httpClient
@using System.Net.Http.Headers
@using System.IO
@using Aig.Farmacoterapia.Admin.Extensions
@using System.Diagnostics


<h1>Upload File (Chunks of 512 KB)</h1>

<InputFile OnChange="LoadLocalFile" />


@if (isUploading)
{
    <p>Uploading @upload.UniqueFileName (<b>@upload.FileSizeInMB.ToString("F2")</b> MB), please wait ...</p>

    var progress = (100.0 * totalBytesRead / upload.FileSizeInBytes).ToString("0");

    <p>Progress (Chunk Size = @upload.ChunkSizeInKB KB)</p>
    <p style="font-size:15px;"> @($"{progress}%")</p>
    <div class="progress">

        <div class="progress-bar" role="progressbar" style="@($"width: {progress}%")" aria-valuenow="@progress" aria-valuemin="0" aria-valuemax="100">  </div>
    </div>

    
}

<MudButton Style="width:100px" Disabled="@(!canCancel)" Variant="Variant.Text"
           Color="Color.Info"
           StartIcon="@Icons.Filled.Cancel"
           Size="Size.Small"
           OnClick="CancelUpload">
    Cancelar
</MudButton>


@code {

    CancellationTokenSource cancellation;
    MemoryStream memoryStream;
    UploadChunk upload = new();

    int fileSelection = 0;
    bool fileSizeSelected = false;
    bool chunkSizeSelected = false;
    bool isCreatingfile = false;
    bool isUploading = false;
    bool canCancel = false;
    bool hasBeenCancelled = false;
    int totalBytesRead = 0;
    string result = string.Empty;

    async Task LoadLocalFile(InputFileChangeEventArgs e)
    {
        upload.ChunkSizeInKB = 512; // default
        upload.FileSizeInBytes = (int)e.File.Size;
        upload.FileName = e.File.Name;

        await using Stream stream = e.File.OpenReadStream(upload.FileSizeInBytes);
        memoryStream = new MemoryStream((int)upload.FileSizeInBytes);
        await stream.CopyToAsync(memoryStream);
        memoryStream.Position = 0;

        await UploadFile();
    }

    async Task UploadFile()
    {
        if (upload.ChunkSizeInKB == 0 || hasBeenCancelled)
            return;

        cancellation?.Dispose();
        cancellation = new CancellationTokenSource();
        canCancel = true;
        chunkSizeSelected = false; // Disable upload button
        hasBeenCancelled = false;

        isUploading = true;
        totalBytesRead = 0;
        int bufferSize = 1024 * upload.ChunkSizeInKB; // bytes
        byte[] buffer = new byte[bufferSize];
        int bytesRead = 0;
        int counter = 0;

        var extension = Path.GetExtension(upload.FileName);
        upload.UniqueFileName = $"{Guid.NewGuid()}{extension}";

        //if (string.IsNullOrEmpty(upload.FileName))
        //    upload.UniqueFileName = Path.GetRandomFileName() + ".bin";
        //else
        //    upload.UniqueFileName = Path.GetRandomFileName() + "-" + upload.FileName;

        Stopwatch sw = new();
        sw.Start();
        try
        {
            while ((bytesRead = await memoryStream.ReadAsync(buffer, cancellation.Token)) != 0)
            {
                counter++;
                totalBytesRead += bytesRead;
                using MemoryStream tmpMemoryStream = new MemoryStream(buffer, 0, bytesRead);
                using MultipartFormDataContent content = new();
                content.Add(
                    content: new StreamContent(tmpMemoryStream, Convert.ToInt32(tmpMemoryStream.Length)),
                    name: "\"uploadFile\"",
                    fileName: upload.UniqueFileName
                    );
                var response = await _httpClient.PostAsync("api/media/chunk", content);
                response.EnsureSuccessStatusCode();

                //var fileLocation = response.Headers.Location.ToString();
                StateHasChanged();
            };
        }
        catch (OperationCanceledException)
        {
            hasBeenCancelled = true;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(1);
        }
        finally
        {
            canCancel = false;
        }
        sw.Stop();
        TimeSpan ts = sw.Elapsed;

        if (!hasBeenCancelled)
        {
            upload.Duration = String.Format("{0:00}:{1:00}.{2:00}", ts.Minutes, ts.Seconds, ts.Milliseconds / 10);
            upload.MegaBytesPerSeconds = upload.CalculateMegabytesPerSeconds(ts.TotalSeconds);

            result = "<h4>Result:</h4>";
            result += $"<p><b>{upload.FileSizeInMB.ToString("F2")}</b> MB upload in {((counter == 1) ? "a chunk" : "chunks")} of <b>{upload.ChunkSizeInKB}</b> KB completed in <b>{upload.Duration}</b> (mm:ss.ms)</p>";
            result += $"<p>Throughput: <b>{upload.MegaBytesPerSeconds.ToString("F2")}</b> MB/s</p>";
        }

        ResetValues();
    }

    public void ResetValues()
    {
        chunkSizeSelected = false;
        fileSelection = 0;
        fileSizeSelected = false;
        isCreatingfile = false;
        isUploading = false;
        upload.ChunkSizeInKB = 0;
        upload.Duration = string.Empty;
        upload.FileSizeInBytes = 0;
    }

     public async Task CancelUpload()
    {
        hasBeenCancelled = true;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(1);
        cancellation.Cancel();
        // TODO: Delete uploaded file
    }

}

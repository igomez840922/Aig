@page "/products/list"
@*@layout null*@
@using Aig.Farmacoterapia.Admin.Components
@using Aig.Farmacoterapia.Admin.Components.Product
@using Aig.Farmacoterapia.Admin.Models
@using Aig.Farmacoterapia.Application.Medicament.Model
@using Aig.Farmacoterapia.Domain.Common
@using Aig.Farmacoterapia.Domain.Entities.Enums
@using System.Linq
@using Aig.Farmacoterapia.Domain.Entities
@using Aig.Farmacoterapia.Domain.Interfaces
@using System.Globalization
@using Aig.Farmacoterapia.Domain.Specifications.Maker
@using Aig.Farmacoterapia.Infrastructure.Extensions
@attribute [Authorize]
@inject IUnitOfWork _unitOfWork;
@inject ISystemLogger _systemLogger;
@inject IMedicamentRepository _repository;

@inject IJSRuntime JS

<div class="kt-portlet__head kt-portlet__head--lg">
    <div class="kt-portlet__head-label">
        <span class="kt-portlet__head-icon">
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 24 24" version="1.1" class="kt-svg-icon">
                <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                    <rect x="0" y="0" width="24" height="24"></rect>
                    <rect fill="#000000" x="4" y="4" width="7" height="7" rx="1.5"></rect>
                    <path d="M5.5,13 L9.5,13 C10.3284271,13 11,13.6715729 11,14.5 L11,18.5 C11,19.3284271 10.3284271,20 9.5,20 L5.5,20 C4.67157288,20 4,19.3284271 4,18.5 L4,14.5 C4,13.6715729 4.67157288,13 5.5,13 Z M14.5,4 L18.5,4 C19.3284271,4 20,4.67157288 20,5.5 L20,9.5 C20,10.3284271 19.3284271,11 18.5,11 L14.5,11 C13.6715729,11 13,10.3284271 13,9.5 L13,5.5 C13,4.67157288 13.6715729,4 14.5,4 Z M14.5,13 L18.5,13 C19.3284271,13 20,13.6715729 20,14.5 L20,18.5 C20,19.3284271 19.3284271,20 18.5,20 L14.5,20 C13.6715729,20 13,19.3284271 13,18.5 L13,14.5 C13,13.6715729 13.6715729,13 14.5,13 Z" fill="#000000" opacity="0.3"></path>
                </g>
            </svg>
        </span>
        <h3 class="kt-portlet__head-title">
            Medicamentos
        </h3>
    </div>
    <div class="kt-portlet__head-toolbar">
        <div class="kt-portlet__head-wrapper">
            <div class="kt-portlet__head-actions">
               @* <div class="dropdown dropdown-inline">
                    <button type="button"
                            class="btn btn-default btn-icon-sm dropdown-toggle"
                            data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <i class="la la-download"></i> Exportar
                    </button>
                    <div class="dropdown-menu dropdown-menu-right">
                        <ul class="kt-nav">
                            <li class="kt-nav__section kt-nav__section--first">
                                <span class="kt-nav__section-text">Seleccionar</span>
                            </li>
                            <li class="kt-nav__item">
                                <a href="#" class="kt-nav__link">
                                    <i class="kt-nav__link-icon la la-print"></i>
                                    <span class="kt-nav__link-text">Imprimir</span>
                                </a>
                            </li>
                            <li class="kt-nav__item">
                                <a href="#" class="kt-nav__link">
                                    <i class="kt-nav__link-icon la la-file-excel-o"></i>
                                    <span class="kt-nav__link-text">Excel</span>
                                </a>
                            </li>
                            <li class="kt-nav__item">
                                <a href="#" class="kt-nav__link">
                                    <i class="kt-nav__link-icon la la-file-text-o"></i>
                                    <span class="kt-nav__link-text">CSV</span>
                                </a>
                            </li>
                            <li class="kt-nav__item">
                                <a href="#" class="kt-nav__link">
                                    <i class="kt-nav__link-icon la la-file-pdf-o"></i>
                                    <span class="kt-nav__link-text">PDF</span>
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
                &nbsp;*@
                <a href="#" class="btn btn-outline-brand btn-square" @onclick="() => OnEdit(0)" data-toggle="modal" data-target="#modal_createedit">
                    <i class="la la-plus"></i>
                    Nuevo
                </a>
            </div>
        </div>
    </div>
</div>

<div class="kt-portlet__body">

    <EditForm Model="@modelFilter" OnValidSubmit="OnSearch" class="kt-form kt-form--fit kt-margin-b-20">

        <div class="row kt-margin-b-20">
            <div class="col-lg-2 kt-margin-b-10-tablet-and-mobile">
                <label style="color: var(--mud-palette-text-secondary);">Medicamento:</label>
                <input type="text" @bind-value="modelFilter.Term" class="form-control kt-input" placeholder="Reg / Nombre / Principio Activo" data-col-index="0">
            </div>
           
            <div class="col-lg-2 kt-margin-b-10-tablet-and-mobile">
                <MudDateRangePicker Culture="@CultureInfo.GetCultureInfo("es-Es")" DateFormat="dd/MM/yyyy" Label="Fecha de Emisión:" Style="border: 1px solid #e2e5ec;padding: 3px 8px 3px 8px;" @bind-DateRange="dateRange" />
            </div>
            <div class="col-lg-2 kt-margin-b-10-tablet-and-mobile">
                <MudDateRangePicker Culture="@CultureInfo.GetCultureInfo("es-Es")" DateFormat="dd/MM/yyyy" Label="Fecha de Expiración:" Style="border: 1px solid #e2e5ec;padding: 3px 8px 3px 8px;" @bind-DateRange="expirationRange" />
            </div>
            <div class="col-lg-2 kt-margin-b-10-tablet-and-mobile">
                 <label style="margin-bottom: 0px !important;color: var(--mud-palette-text-secondary);">Medicamento:</label>
                <MudAutocomplete MaxItems="null" T="AigFabricante" Dense="true" Variant="Variant.Outlined" @bind-Value="modelFilter.Fabricante" ToStringFunc="@(e=> e==null?null : e.Nombre)" SearchFunc="@LoadMarker" ShowProgressIndicator="true" ProgressIndicatorColor="Color.Primary">

                    <ItemTemplate Context="e">
                        <MudText>
                            @e.Nombre
                        </MudText>
                    </ItemTemplate>
                    <ItemSelectedTemplate Context="e">
                        <MudText>
                            @($"{e.Nombre} / ({e.Pais?.Nombre})")
                        </MudText>
                    </ItemSelectedTemplate>
                </MudAutocomplete>
            </div>
          
            <div class="col-lg-4 kt-margin-b-10-tablet-and-mobile">
                <div class="row" style="margin-top: 23px;">
                    <div class="col-lg-12" style="margin-top: 2px;">
                        <button type="submit" class="btn btn-outline-brand btn-square" style="padding: 5px 10px 5px 10px;">
                            <span>
                                <i class="la la-search"></i>
                                <span>Buscar</span>
                            </span>
                        </button>
                        &nbsp;&nbsp;
                        <button type="button" @onclick="() => OnReset()" class="btn btn-outline-brand btn-square" style="padding: 5px 10px 5px 10px;">
                            <span>
                                <i class="la la-close"></i>
                                <span>Eliminar</span>
                            </span>
                        </button>
                    </div>
                </div>
            </div>
        </div>

         <div class="row kt-margin-b-20">
           
           
        </div>
    </EditForm>

    <div class="table-responsive">
        <MudTable @ref="table" Striped="true" SortLabel="name" LoadingProgressColor="Color.Primary" Dense="true" Hover="true" ServerData="@(new Func<TableState, Task<TableData<AigMedicamento>>>(DoFetchData))" Breakpoint="Breakpoint.Sm">

            <HeaderContent>
                <MudTh style="width:5px;"></MudTh>
                <MudTh style="width:60px;"><MudTableSortLabel SortLabel="numReg" T="AigMedicamento">Registro</MudTableSortLabel></MudTh>
                <MudTh style="width:100px;"><MudTableSortLabel SortLabel="dateOfIssue" T="AigMedicamento">Expedido</MudTableSortLabel></MudTh>
                <MudTh style="width:100px;"><MudTableSortLabel SortLabel="expirationDate" T="AigMedicamento">Vence</MudTableSortLabel></MudTh>
                <MudTh style="width:350px;"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortLabel="name" T="AigMedicamento">Medicamento</MudTableSortLabel></MudTh>
                <MudTh style="width:350px;">Principio Activo</MudTh>
                <MudTh>Fabricante</MudTh>
                 <MudTh style="width:20px;"><MudTableSortLabel T="AigMedicamento" SortLabel="created">Creado</MudTableSortLabel></MudTh>
                <MudTh style="width:5px;"></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudIconButton Icon="@(!context.ShowDetails?Icons.Filled.ArrowRight:@Icons.Filled.ArrowDropDown)" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="@(() => ShowBtnPress(context.Id))" />
                </MudTd>
                <MudTd DataLabel="No. Registro">@context.NumReg</MudTd>
                <MudTd DataLabel="Fech. Emisión">@(string.Format("{0:dd/MM/yyyy}",context.FechaEmision))</MudTd>
                <MudTd DataLabel="Fech. Expiración">@(string.Format("{0:dd/MM/yyyy}",context.FechaExpiracion))</MudTd>
                <MudTd DataLabel="Medicamento">@context.Nombre</MudTd>
                <MudTd DataLabel="Principio Activo">@context.Principio</MudTd>
                <MudTd DataLabel="Fabricante">@context.Fabricante?.Nombre</MudTd>
                <MudTd DataLabel="Creado">@(string.Format("{0:dd/MM/yyyy}",context.Created))</MudTd>
                <MudTd>
                    <span class="dropdown">
                        <a href="#" class="btn btn-sm btn-clean btn-icon btn-icon-md" data-toggle="dropdown" aria-expanded="true">
                            <i class="flaticon-more-1 kt-font-brand"></i>
                        </a>
                        <span class="dropdown-menu dropdown-menu-right">
                            <a class="dropdown-item" href="#" @onclick="() => OnEdit(context.Id)" data-toggle="modal" data-target="#modal_createedit" >
                                <i class="la la-edit"></i> Editar
                            </a> 
                            <a class="dropdown-item" href="#" @onclick="() => OnDelete(context)" data-toggle="modal">
                                <i class="la la-trash"></i> 
                                Eliminar
                            </a> 
                            <div class="dropdown-divider ng-star-inserted"></div>
                        </span>
                    </span>
                </MudTd>
            </RowTemplate>
            <ChildRowContent>
                @if (context.ShowDetails)
                {
                    <MudTr>
                        <td colspan="9">

                            <div style="background-color: #f2eefc;" _ngcontent-lil-c210="" class="py-4 d-flex ng-star-inserted">

                                <div _ngcontent-lil-c210="" class="mx-4">
                                    <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                        <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="margin-right: 5px;">
                                            Creado:
                                        </span>
                                        <span _ngcontent-lil-c210="" class="text-dark-50">
                                            @context.Created
                                        </span>
                                    </div>
                                    <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                        <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="margin-right: 5px;">
                                            Creado por:
                                        </span>
                                        <span _ngcontent-lil-c210="" class="text-dark-50">
                                            @(!string.IsNullOrEmpty(@context.CreatedBy) ? @context.CreatedBy : "<Ninguno>")
                                        </span>
                                    </div>
                                    <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                        <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="margin-right: 5px;">
                                            Modificado:
                                        </span>
                                        <span _ngcontent-lil-c210="" class="text-dark-50">
                                            @(@context.LastModified!=null ? @context.LastModified : "<Ninguna>")
                                        </span>
                                    </div>
                                </div>

                                <div _ngcontent-lil-c210="" class="mx-4">
                                    <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                        <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="margin-right: 5px;">
                                            Fabricante:
                                        </span>
                                        <span _ngcontent-lil-c210="" class="text-dark-50">
                                            @(!string.IsNullOrEmpty(@context.Fabricante?.Nombre) ? @context.Fabricante?.Nombre : "<Ninguno>")
                                        </span>
                                    </div>
                                    <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                        <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="margin-right: 5px;">
                                            Dirección:
                                        </span>
                                        <span _ngcontent-lil-c210="" class="text-dark-50">
                                            @(!string.IsNullOrEmpty(@context.Fabricante?.Direccion) ? @context.Fabricante?.Direccion : "<Ninguno>")
                                        </span>
                                    </div>
                                    <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                        <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="margin-right: 5px;">
                                            País:
                                        </span>
                                        <span _ngcontent-lil-c210="" class="text-dark-50">
                                            @(!string.IsNullOrEmpty(@context.Fabricante?.Pais?.Nombre) ? @context.Fabricante?.Pais?.Nombre : "<Ninguno>")
                                        </span>
                                    </div>
                                </div>

                                <div _ngcontent-lil-c210="" class="mx-4">
                                    <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                        <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="margin-right: 5px;">
                                            Concentración:
                                        </span>
                                        <span _ngcontent-lil-c210="" class="text-dark-50">
                                            @(!string.IsNullOrEmpty(context.Concentracion) ? context.Concentracion : "<Ninguna")
                                        </span>
                                    </div>
                                    <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                        <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="margin-right: 5px;">
                                            Vía de Administración:
                                        </span>
                                        <span _ngcontent-lil-c210="" class="text-dark-50">
                                           @(context.ViaAdministracion!=null ? context.ViaAdministracion?.Nombre : "<Ninguna>")
                                        </span>
                                    </div>
                                    <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                        <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="margin-right: 5px;">
                                            Excipientes:
                                        </span>
                                        <span _ngcontent-lil-c210="" class="text-dark-50">
                                            @(!string.IsNullOrEmpty(@context.Excipientes) ? @context.Excipientes : "<Ninguno>")
                                        </span>
                                    </div>
                                </div>

                            </div>

                        </td>
                    </MudTr>
                }
            </ChildRowContent>
            <NoRecordsContent>
                <MudText>No se encontraron elementos</MudText>
            </NoRecordsContent>
             <LoadingContent>
            <MudText>Cargando...</MudText>
        </LoadingContent>
            <PagerContent>
                <MudTablePager Class="primary" InfoFormat="{first_item}-{last_item} de {all_items}" PageSizeOptions="new int[] {10, 25, 50, 100, 250 }" RowsPerPageString="Filas" />
            </PagerContent>
        </MudTable>
    </div>

</div>

@if (addEditDialogIsOpen)
{
    <AddEdit ModelData="@modelData" OnClose="@OnEventAddEditClose"></AddEdit>
}
@if(deleteDialogIsOpen)
{
   <DeleteConfirmDialog Caption="Eliminar"
                   Message="¿Confirma que desea de eliminar el artículo?"
                   OnClose="@OnDeleteDialogClose">
    </DeleteConfirmDialog>
}
@code {

    private MudTable<AigMedicamento> table;
    private DateRange dateRange;
    private DateRange expirationRange;
    private static IEnumerable<AigMedicamento> List { get; set; }
    private string searchString = null;
    protected MedicamentFilter modelFilter;
    protected AigMedicamento modelData;
    protected bool addEditDialogIsOpen = false;
    protected bool deleteDialogIsOpen = false;
    private void ShowBtnPress(long nr)
    {
        AigMedicamento tmpPerson = List.First(f => f.Id == nr);
        tmpPerson.ShowDetails = !tmpPerson.ShowDetails;
    }
    protected async override Task OnInitializedAsync()
    {
        try
        {  

            modelFilter = new MedicamentFilter();
            dateRange = new DateRange();
            expirationRange= new DateRange();

        }
        catch (Exception ex)
        {
            _systemLogger.Error(ex.Message);
        }

        base.OnInitialized();
    }

    private async Task<TableData<AigMedicamento>> DoFetchData(TableState state)
    {
        
        StateHasChanged();
        var sorting = new List<SortingOption>();
        var filters = new List<FilteringOption>();
        if (state.SortDirection != SortDirection.None){
            var sortDirection = state.SortDirection == SortDirection.Descending ? SortingDirection.DESC : SortingDirection.ASC;
            sorting = new() { new SortingOption { Field = state.SortLabel, Direction = sortDirection } };
        }
        if (!string.IsNullOrEmpty(modelFilter.Term))
            filters.Add(new FilteringOption { Field = "term", Operator = FilteringOperator.Contains, Value = modelFilter.Term });
        if (modelFilter.StartDate != null && modelFilter.EndDate != null){
            filters.Add(new FilteringOption { Field = "startDateOfIssue", Operator = FilteringOperator.GreaterThanEqual, Value = modelFilter.StartDate.Value });
            filters.Add(new FilteringOption { Field = "endDateOfIssue", Operator = FilteringOperator.LessThanEqual, Value = modelFilter.EndDate.Value });
        }
        if (modelFilter.StartExpirationDate != null && modelFilter.EndExpirationDate != null){
            filters.Add(new FilteringOption { Field = "startExpirationDate", Operator = FilteringOperator.GreaterThanEqual, Value = modelFilter.StartExpirationDate.Value });
            filters.Add(new FilteringOption { Field = "endDateExpirationDate", Operator = FilteringOperator.LessThanEqual, Value = modelFilter.EndExpirationDate.Value });
        }
        if (modelFilter.Fabricante != null){
            filters.Add(new FilteringOption { Field = "maker", Operator = FilteringOperator.Equal, Value = modelFilter.Fabricante.Nombre });
        }
        var args = new PageSearchArgs(){
            PageIndex = state.Page + 1,
            PageSize = state.PageSize,
            SortingOptions = sorting,
            FilteringOptions = filters
        };
        var paginatedResult = await _repository.ListAsync(args);
        List = paginatedResult.Data;
        return new TableData<AigMedicamento>() { TotalItems = paginatedResult.TotalCount, Items = paginatedResult.Data };
    }

    private async Task<IEnumerable<AigFabricante>> LoadMarker(string value)
    {
        var result = new List<AigFabricante>();
        var query = _unitOfWork.Repository<AigFabricante>().GetAll();
        if (!string.IsNullOrEmpty(value))
            result = await query.WhereByAsync(p => p.Nombre, new MakerSpecification(value));
        else
            result = await query.WhereByAsync(p => p.Nombre);
        return result;
    }

    private async Task OnSearch()
    {
        modelFilter.StartDate = dateRange.Start;
        modelFilter.EndDate = dateRange.End;
        modelFilter.StartExpirationDate = dateRange.Start;
        modelFilter.EndExpirationDate = dateRange.End;
        await table.ReloadServerData();
    }
    private async Task OnReset()
    {
        modelFilter = new MedicamentFilter();
        dateRange = new DateRange();
        await table.ReloadServerData();
    }

    private async Task OnEdit(long id)
    {
        var result = await _unitOfWork.Repository<AigMedicamento>().GetByIdAsync(id);
        if (result == null)
            result = new AigMedicamento();

        modelData = result;
        addEditDialogIsOpen = true;
        StateHasChanged();
    }

    private async Task OnEventAddEditClose(long id)
    {
        addEditDialogIsOpen = false;
         if (id>0)
            table.ReloadServerData();
    }
    private async Task OnDelete(AigMedicamento data)
    {
        modelData = data;
        deleteDialogIsOpen = true;
    }
    private async Task OnDeleteDialogClose(bool isOk)
    {        
        if (isOk)
        {
            await _unitOfWork.Repository<AigMedicamento>().DeleteAsync(modelData);
            if (_unitOfWork.Commit()){
                await JS.InvokeVoidAsync("ShowMessage", "Elemento eliminado correctamente");
                await JS.InvokeVoidAsync("OpenCloseModal", "#btnCloseDeleteModal");
                table.ReloadServerData();
            }
            else
               await JS.InvokeVoidAsync("ShowError", "DataDeleteError");
        }
        deleteDialogIsOpen = false;
    }

}
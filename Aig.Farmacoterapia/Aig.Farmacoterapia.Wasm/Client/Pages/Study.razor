@page "/studies"
@attribute [Authorize]
@using Aig.Farmacoterapia.Domain.Entities.Enums
@using Aig.Farmacoterapia.Domain.Entities.Studies
@using Aig.Farmacoterapia.Domain.Entities.Studies.Enums
@using Aig.Farmacoterapia.Domain.Extensions
@using Aig.Farmacoterapia.Domain.Models
@using Aig.Farmacoterapia.Wasm.Client.Components.Studies
@using Aig.Farmacoterapia.Wasm.Client.Extensions
@using Aig.Farmacoterapia.Wasm.Client.Infrastructure.Managers.Studies
@using Aig.Farmacoterapia.Wasm.Client.Model
@using Aig.Farmacoterapia.Domain.Common
@using Aig.Farmacoterapia.Domain.Entities
@using System.Globalization
@using System.Security.Claims
@inject IStudyManager _manager;
@inject IJSRuntime _js;
<PageTitle>Medicaments</PageTitle>

<style>
    .table th, .table td {
        vertical-align: middle !important;
    }

    .table-sm th {
        padding: 0.8rem 0.3rem 0.8rem 1rem !important;
    }

    .table-sm td {
        padding: 0.3rem 0.3rem 0.3rem 1rem !important;
    }

    .dropdown-item {
        display: flow-root !important;
    }

    .mud-table-container {
        min-height: 200px !important;
        width: 100% !important;
    }

    .mud-table-empty-row {
        padding-top: 60px !important;
    }

    .mud-table-head {
        background-color: #f0f0f0 !important;
        border-color: #f0f0f0 !important;
        color: #594ae2 !important;
    }

    .mud-table-root .mud-table-head .mud-table-cell {
        color: #594ae2 !important;
    }

    .mud-table-sort-label:hover {
        color: #594ae2 !important;
    }

    .row-width {
        width: 2000px !important;
    }

    td.table-row {
        color: red;
    }
</style>



<MudCard Elevation="25">
    <MudCardContent>
      
         <MudToolBar Style="height:25px !important;">
                <MudText Color="Color.Primary">
                    <MudIcon Icon="@Icons.Material.Outlined.Archive" Color="Color.Default" Style="margin-bottom: 5px;"></MudIcon>
                    Solicitudes de autorización de permisos de importación con fines de investigación
                </MudText>
                <MudSpacer />
               @* <MudTooltip Text="Nuevo" Arrow="true" Placement="Placement.Left" Color="Color.Default">
                    <MudIconButton ButtonType="ButtonType.Button" Disabled="@(_loading || !IsAddAndEvaluators())" Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Default" Size="Size.Small" @onclick="@(() => AddEdit(0))" />
                </MudTooltip>*@
            <MudTooltip Text="Actualizar" Arrow="true" Placement="Placement.Left" Color="Color.Default">
                <MudIconButton ButtonType="ButtonType.Button" Disabled="@(_loading)" Icon="@Icons.Material.Filled.Refresh" Variant="Variant.Outlined" Color="Color.Default" Size="Size.Small" @onclick="@(async () =>await Refresh())" />
            </MudTooltip>
            </MudToolBar>
     

    </MudCardContent>

</MudCard>

<MudCard Elevation="25" style="margin-top:10px !important;">
    <MudCardContent Style="padding: 0px !important;">
        <MudExpansionPanel  @bind-IsExpanded="filterOpen" HideIcon="true">
            <TitleContent>
                <div class="d-flex">
                    <MudText  Color="Color.Primary">Filtros</MudText>
                    <MudIcon Icon="@(filterOpen ? Icons.Material.Filled.FilterList : Icons.Material.Filled.FilterListOff)" class="ml-auto"></MudIcon>
                </div>
            </TitleContent>
             <ChildContent>
        <EditForm Elevation="25" Model="this" OnValidSubmit="OnSearch">
            <MudCard Elevation="25">
                <MudCardContent>

                    <MudGrid>

                        <MudItem md="3" Style="margin-top:12px !important">
                                    <MudTextField OnClearButtonClick="OnSearch" Clearable="true" HelperText="Código / Título / Centro / No.Trámite" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="_modelFilter.Term" Label="Buscar" />
                        </MudItem>

                        <MudItem md="7">
                            <MudGrid>
                                <MudItem md="4">
                                    <MudDateRangePicker Clearable="true" Culture="@CultureInfo.GetCultureInfo("es-Es")" DateFormat="dd/MM/yyyy" Label="Fecha de Ingreso:" @bind-DateRange="dateRange" />
                                </MudItem>
                                <MudItem md="4">
                                    <MudDateRangePicker Clearable="true" Culture="@CultureInfo.GetCultureInfo("es-Es")" DateFormat="dd/MM/yyyy" Label="Fecha de Asignación:" @bind-DateRange="assignmentRange" />
                                </MudItem>
                                <MudItem md="4">
                                    <MudDateRangePicker Clearable="true" Culture="@CultureInfo.GetCultureInfo("es-Es")" DateFormat="dd/MM/yyyy" Label="Fecha de Evaluación:" @bind-DateRange="expirationRange" />
                                </MudItem>
                            </MudGrid>
                        </MudItem>

                        <MudItem md="2" Style="margin-top:12px !important">
                            <MudGrid>
                                <MudItem md="6" Style="margin-top: 10px !important;">
                                    <MudTooltip Text="Buscar" Arrow="true" Placement="Placement.Top" Color="Color.Default">
                                        <MudIconButton Disabled="@(_loading)" Style="margin-right: 8px;" ButtonType="ButtonType.Submit" Icon="@Icons.Material.Filled.Search" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" />
                                    </MudTooltip>
                                    <MudTooltip Text="Eliminar" Arrow="true" Placement="Placement.Top" Color="Color.Default" Style="margin-top: 10px !important;">
                                        <MudIconButton Disabled="@(_loading)" ButtonType="ButtonType.Button" Icon="@Icons.Material.Filled.Clear" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="()=>OnReset()" />
                                    </MudTooltip>
                                </MudItem>
                                <MudItem md="6">
                                    @if (!_loading)
                                    {
                                        <MudText Style="margin-top: 10px !important;" Color="Color.Primary" Typo="Typo.h6">Total:@(_paginatedResult?.TotalCount)</MudText>
                                    }
                                </MudItem>
                            </MudGrid>

                        </MudItem>


                    </MudGrid>

                    <MudGrid>
                        <MudItem md="3" Style="margin-top:8px !important">
                            <MudTextField OnClearButtonClick="OnSearch" Clearable="true" HelperText="Nombre de medicamento" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="_modelFilter.Product" Label="Producto" />
                        </MudItem>

                        <MudItem md="3" Style="margin-top:8px !important">
                            <MudTextField OnClearButtonClick="OnSearch" Clearable="true" HelperText="Investigador principal" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="_modelFilter.Researcher" Label="Investigador" />
                        </MudItem>

                        <MudItem md="3" Style="margin-top:10px !important">

                            <MudSelect OnClearButtonClick="OnSearch" T="string" Label="Evaluador" Clearable="true" Margin="Margin.Dense" Dense="true" Variant="Variant.Outlined" @bind-Value="_modelFilter.Evaluator">
                                @foreach (UserModelOutput dt in Evaluators)
                                {
                                    <MudSelectItem Value="@(dt.Id)">@(dt.FullName)</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>

                        <MudItem md="3" Style="margin-top:10px !important">

                            <MudSelect T="EstadoEstudio" OnClearButtonClick="OnSearch" Clearable="true" Label="Estado" Margin="Margin.Dense" Dense="true" Variant="Variant.Outlined" @bind-Value="_modelFilter.Status">

                                @foreach (EstadoEstudio dt in Enum.GetValues(typeof(EstadoEstudio)))
                                {

                                    <MudSelectItem Value="@(dt)">@(dt.ToDescriptionString())</MudSelectItem>

                                }
                            </MudSelect>
                        </MudItem>


                    </MudGrid>

                </MudCardContent>

            </MudCard>
        </EditForm>
    </ChildContent>
        </MudExpansionPanel>
   
    </MudCardContent>

</MudCard>


<MudTable  HorizontalScrollbar="true" FixedHeader="false" FixedFooter="false" Elevation="25" @ref="_table" Striped="true" SortLabel="name" LoadingProgressColor="Color.Primary" Dense="true" Hover="true" ServerData="@(new Func<TableState, Task<TableData<AigEstudio>>>(DoFetchData))">
      
    <HeaderContent>
        <MudTh style="width:3px;"></MudTh>
        <MudTh style="width:3px;"></MudTh>
        <MudTh> <MudTableSortLabel Style="width:150px !important" SortLabel="status" T="AigEstudio">Estado</MudTableSortLabel></MudTh>
        <MudTh> <MudTableSortLabel Style="width:100px !important" SortLabel="admissionDate" T="AigEstudio">Fecha de Ingreso</MudTableSortLabel></MudTh>
        <MudTh><MudInputLabel Style="width:120px !important">Código del protocolo de investigación</MudInputLabel></MudTh>
        <MudTh><MudInputLabel Style="width:380px !important">Título del protocolo de investigación</MudInputLabel></MudTh>

        <MudTh><MudTableSortLabel Style="width:100px" SortLabel="assignmentDate" T="AigEstudio">Fecha de Asignación</MudTableSortLabel></MudTh>
       @* <MudTh><MudTableSortLabel Style="width:100px" SortLabel="evaluationDate" T="AigEstudio">Fecha de Evaluación</MudTableSortLabel></MudTh>*@
        <MudTh><MudInputLabel Style="width:80px">Días transcurridos</MudInputLabel></MudTh>
        <MudTh><MudInputLabel Style="width:100px !important">Evaluadores</MudInputLabel></MudTh>
       @* <MudTh> <MudInputLabel Style="width:150px !important">Nota de Evaluación</MudInputLabel> </MudTh>
        <MudTh><MudInputLabel Style="width:400px">Observaciones por el evaluador</MudInputLabel></MudTh>
        <MudTh><MudInputLabel Style="width:200px">Investigador principal</MudInputLabel></MudTh>
        <MudTh><MudInputLabel Style="width:200px">Patrocinador del estudio</MudInputLabel></MudTh>
        <MudTh><MudInputLabel Style="width:200px">Duración del estudio</MudInputLabel></MudTh>
        <MudTh><MudInputLabel Style="width:100px">Número de participantes en panamá</MudInputLabel></MudTh>
        <MudTh><MudInputLabel Style="width:200px">Centro de investigación</MudInputLabel></MudTh>*@
       @* <MudTh><MudTableSortLabel Style="width:80px" SortLabel="created" T="AigEstudio">Creado</MudTableSortLabel></MudTh>*@
        
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudIconButton Icon="@(!context.ShowDetails?Icons.Filled.ArrowCircleRight:@Icons.Filled.ArrowCircleDown)" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(() => context.ShowDetails=!context.ShowDetails)" />
        </MudTd>
        <MudTd>

            <MudMenu Icon="@Icons.Material.Filled.Settings" Color="Color.Default">
                <MudMenuItem Disabled=(!IsEdit(context.Evaluators)) Icon="@Icons.Material.Filled.Edit" OnClick="@(() => AddEdit(@context.Id))" OnTouch="@(() => AddEdit(@context.Id))">Editar</MudMenuItem>
                <MudMenuItem Disabled="!IsAddAndEvaluators()" Style="border-bottom:1px solid #E4E6EF !important;" Icon="@Icons.Material.Filled.HowToReg" OnClick="@(() => SetEvaluators(@context.Id))" OnTouch="@(() => SetEvaluators(@context.Id))">Evaluadores</MudMenuItem>

                @if (context.Estado != EstadoEstudio.Pendiente && context.Nota?.Lines?.Count > 0)
                {
                   @* <MudMenuItem Target="_blank" Disabled=(!IsEdit(context.Evaluators)) Style="border-bottom:1px solid #E4E6EF !important;" IconColor="Color.Primary" Icon="@Icons.Filled.PictureAsPdf"
                                 Link="@($"{_appConfiguration.ApiUrl}{AppConstants.ReportEndpoints.NoteReportURL(context.Id)}")">
                        Exportar Evaluación
                    </MudMenuItem>*@
                    <MudMenuItem Disabled=(!IsEdit(context.Evaluators)) Style="border-bottom:1px solid #E4E6EF !important;" IconColor="Color.Primary" Icon="@Icons.Material.Filled.PictureAsPdf" OnClick="@(() => ShowNote(@context))" OnTouch="@(() => ShowNote(@context))">
                        Nota de Evaluación
                    </MudMenuItem>
                    
                }


                @if (IsDelete())
                {
                    <MudMenuItem Style="border-bottom:1px solid #E4E6EF !important;" IconColor="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="@(() => Delete(@context.Id))" OnTouch="@(() => Delete(@context.Id))">Eliminar</MudMenuItem>
                }
            </MudMenu>

        </MudTd>
        <MudTd DataLabel="Estado">

            @switch (context.Estado)
            {
                case EstadoEstudio.Authorized:
                    {
                        <MudBadge Icon="@Icons.Material.Filled.Check" Color="Color.Tertiary" Overlap="true" Bordered="true">
                            <MudButton Color="Color.Tertiary" Variant="Variant.Filled" DisableElevation="true">
                                @context.Estado.ToDescriptionString()
                            </MudButton>
                        </MudBadge>
                    }
                    break;
                case EstadoEstudio.NotAuthorized:
                    {

                        <MudBadge Icon="@Icons.Material.Filled.Close" Color="Color.Error" Overlap="true" Bordered="true">
                            <MudButton Color="Color.Error" Variant="Variant.Filled" DisableElevation="true">
                                @context.Estado.ToDescriptionString()
                            </MudButton>
                        </MudBadge>
                    }
                    break;
                default:
                    {
                        <MudBadge Icon="@Icons.Material.Filled.Warning" Color="Color.Warning" Overlap="true" Bordered="true">
                            <MudButton Color="Color.Warning" Variant="Variant.Filled" DisableElevation="true">
                                @context.Estado.ToDescriptionString()
                            </MudButton>
                        </MudBadge>

                    }
                    break;
            }

        </MudTd>


        <MudTd DataLabel="Fecha de ingreso">@(string.Format("{0:dd/MM/yyyy}", context.FechaIngreso!))</MudTd>
        <MudTd DataLabel="Código del protocolo de investigación">

            @if (context.Match)
            {
                <MudTooltip Text="El código del estudio de la solicitud coincide con un estudio clínico" Arrow="true" Placement="Placement.Top" Color="Color.Default">
                    <MudBadge Content="context.Codigo" Color="Color.Default" Overlap="true">
                        <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Tertiary" />
                    </MudBadge>
                </MudTooltip>

            }
            else
            {
                <MudTooltip Text="No se encontró un estudio clínico con ese código" Arrow="true" Placement="Placement.Top" Color="Color.Default">
                    <MudBadge Content="context.MatchInfo" Color="Color.Default" Overlap="true">
                        <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.Warning" Color="Color.Error" />
                    </MudBadge>
                </MudTooltip>

            }
        </MudTd>
        <MudTd DataLabel="Título del protocolo de investigación">@context.Titulo</MudTd>


        <MudTd DataLabel="Fecha de Asignación">
             @if (context.FechaAsignacion != null)
            { 
                <MudBadge Content="@(string.Format("{0:dd/MM/yyyy}", @context.FechaAsignacion))" Color="Color.Info" Overlap="true" Class="mx-2 my-2">
                </MudBadge>
               
            }
            else
            {
               <MudBadge Content="@("---")" Color="Color.Default" Overlap="true" Class="mx-2 my-2">
                </MudBadge>
            }
           
        </MudTd>

      @*  <MudTd DataLabel="Fecha de Evaluación">
            @if (context.Estado != EstadoEstudio.Pendiente)
            {
                <MudBadge Content="@(string.Format("{0:dd/MM/yyyy}", @context.Nota?.FechaEvaluacion))" Color="Color.Tertiary" Overlap="true" Class="mx-2 my-2">
                </MudBadge>
            }
            else
            {
                <MudBadge Content="@("---")" Color="Color.Default" Overlap="true" Class="mx-2 my-2">
                </MudBadge>
            }
        </MudTd>*@

        <MudTd DataLabel="Días transcurridos">

            @if (context.Estado != EstadoEstudio.Pendiente)
            {

                @switch (context.ElapsedDays)
                {
                    case 0:
                        {

                            <MudBadge Color="Color.Default" Content="@("-")" Overlap="true">
                                <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.Event" Color="Color.Info" />
                            </MudBadge>
                        }
                        break;
                    case > 0:
                        {

                            <MudBadge Color="Color.Default" Content="@(context.ElapsedDays > 1 ? $"{context.ElapsedDays} Días" : $"{context.ElapsedDays} Día")" Overlap="true">
                                <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.EventAvailable" Color="Color.Tertiary" />
                            </MudBadge>
                        }
                        break;
                    default:
                        {
                            <MudBadge Color="Color.Default" Content="@(context.ElapsedDays > 1 ? $"{context.ElapsedDays} Días" : $"{context.ElapsedDays} Día")" Overlap="true">
                                <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.EventBusy" Color="Color.Error" />
                            </MudBadge>

                        }
                        break;
                }

            }
            else
            {
                <MudBadge Content="@("---")" Color="Color.Default" Overlap="true" Class="mx-2 my-2">
                </MudBadge>
            }

        </MudTd>

        <MudTd DataLabel="Evaluadores">
            @if (!string.IsNullOrEmpty(context.EvaluatorToShow))
            {
                <MudTooltip Text="@context.EvaluatorToShow" Arrow="true" Placement="Placement.Top" Color="Color.Default">
                    <MudIconButton Disabled="!IsAddAndEvaluators()" OnClick="@(() => SetEvaluators(@context.Id))" Size="Size.Large" Icon="@Icons.Material.Filled.HowToReg" Color="Color.Tertiary" />
                </MudTooltip>

            }
            else
            {
                <MudBadge Content="@("Ninguno")" Color="Color.Default" Overlap="true" Style="top:8px !important;">
                    <MudIconButton Disabled="!IsAddAndEvaluators()" OnClick="@(() => SetEvaluators(@context.Id))" Style="padding:3px !important;" Size="Size.Large" Icon="@Icons.Material.Filled.Warning" Color="Color.Error" />
                </MudBadge>
            }
        </MudTd>

      @*  <MudTd DataLabel="Nota de Evaluación">
            @if (context.Estado != EstadoEstudio.Pendiente && !string.IsNullOrEmpty(@context.Nota?.Observaciones))
            {
                <MudBadge Content="@context.Nota?.GetNoteCode(@context.Id)" Color="Color.Tertiary" Overlap="true" Class="mx-2 my-2">
                </MudBadge>
            }
            else
            {
                <MudBadge Content="@("---")" Color="Color.Default" Overlap="true" Class="mx-2 my-2">
                </MudBadge>
            }
        </MudTd>

        <MudTd DataLabel="Observaciones por el evaluador">
            @if (context.Estado != EstadoEstudio.Pendiente && !string.IsNullOrEmpty(@context.Nota?.Observaciones))
            {
                @context.Nota?.Observaciones
            }
            else
            {
                <MudBadge Content="@("---")" Color="Color.Default" Overlap="true" Class="mx-2 my-2">
                </MudBadge>
            }
        </MudTd>

        <MudTd DataLabel="Investigador principal">@context.InvestigadorPrincipal</MudTd>
        <MudTd DataLabel="Patrocinador del estudio">@context.Patrocinador</MudTd>
        <MudTd DataLabel="Duración del estudio">@context.Duracion</MudTd>
        <MudTd DataLabel="Número de participantes en panamá">@context.Participantes</MudTd>

        <MudTd DataLabel="Centro de investigación">@context.CentroInvestigacion</MudTd>*@

       @* <MudTd DataLabel="Creado">@(string.Format("{0:dd/MM/yyyy}", context.Created))</MudTd>*@

     
    </RowTemplate>
    <ChildRowContent>
        @if (context.ShowDetails)
        {
            <MudTr>
                <td colspan="9">

                    <div style="background-color: #f2eefc;" _ngcontent-lil-c210="" class="py-4 d-flex ng-star-inserted">

                        <div _ngcontent-lil-c210="" class="mx-4">
                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold; margin-right: 5px;">
                                    Número de Trámite:&nbsp;
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @if (!string.IsNullOrEmpty(@context.NumTramite))
                                    {
                                        <MudBadge  Content="context.NumTramite" Color="Color.Info" Overlap="true" Class="mx-2 my-2">
                                        </MudBadge>
                                    }
                                    else
                                    {
                                        @("---")
                                    }
                                </span>
                            </div>


                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold; margin-right: 5px;">
                                    Fecha de Creación:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                   @(string.Format("{0:dd/MM/yyyy}", context.Created))
                                </span>
                            </div>

                            <hr>

                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold; margin-right: 5px;">
                                    Fecha de Evaluación:&nbsp;
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @if (context.Estado != EstadoEstudio.Pendiente)
                                    {
                                        <MudBadge Content="@(string.Format("{0:dd/MM/yyyy}", @context.Nota?.FechaEvaluacion))" Color="Color.Tertiary" Overlap="true" Class="mx-2 my-2">
                                        </MudBadge>
                                    }
                                    else
                                    {
                                        @("---")
                                    }
                                </span>
                            </div>
                           
                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold; margin-right: 5px;">
                                    Nota de Evaluación:&nbsp;
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @if (context.Estado != EstadoEstudio.Pendiente && !string.IsNullOrEmpty(@context.Nota?.Observaciones))
                                    {
                                        <MudBadge Content="@context.Nota?.GetNoteCode(@context.Id)" Color="Color.Tertiary" Overlap="true" Class="mx-2 my-2">
                                        </MudBadge>
                                    }
                                    else
                                    {
                                        @("---")
                                    }
                                </span>
                            </div>

                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold; margin-right: 5px;">
                                    Observaciones por el evaluador:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @if (!string.IsNullOrEmpty(@context.Nota?.Observaciones))
                                    {
                                        @context.Nota?.Observaciones
                                    }
                                    else
                                    {
                                        @("---")
                                    }
                                </span>
                            </div>

                            <hr>

                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold; margin-right: 5px;">
                                    Centro de investigación:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @if (!string.IsNullOrEmpty(@context.CentroInvestigacion))
                                    {
                                        @context.CentroInvestigacion
                                    }
                                    else
                                    {
                                        @("---")
                                    }
                                </span>
                            </div>

                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold; margin-right: 5px;">
                                    Investigador principal:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @if (!string.IsNullOrEmpty(@context.InvestigadorPrincipal))
                                    {
                                        @context.InvestigadorPrincipal
                                    }
                                    else
                                    {
                                        @("---")
                                    }
                                </span>
                            </div>

                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold; margin-right: 5px;">
                                    Patrocinador del estudio:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @if (!string.IsNullOrEmpty(@context.Patrocinador))
                                    {
                                        @context.Patrocinador
                                    }
                                    else
                                    {
                                        @("---")
                                    }
                                </span>
                            </div>

                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold; margin-right: 5px;">
                                    Duración del estudio:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @if (!string.IsNullOrEmpty(@context.Duracion))
                                    {
                                        @context.Duracion
                                    }
                                    else
                                    {
                                        @("---")
                                    }
                                </span>
                            </div>

                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold; margin-right: 5px;">
                                   Número de participantes en panamá:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                   
                                   @context.Participantes
                                   
                                </span>
                            </div>
                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold; margin-right: 5px;">
                                    Población a Estudiar:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">

                                    @context.Poblacion

                                </span>
                            </div>

                        </div>

                    </div>

                </td>
            </MudTr>
        }
    </ChildRowContent>
    <NoRecordsContent>
        <MudText>No se encontraron elementos</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Cargando...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager  HorizontalAlignment="HorizontalAlignment.Center" Class="primary" InfoFormat="{first_item}-{last_item} de {all_items}" PageSizeOptions="new int[] {3, 5, 6, 8, 10, 25, 50, 100, 250 }" RowsPerPageString="Filas" />
    </PagerContent>

</MudTable>


@code {
    private bool filterOpen=false;
    private PaginatedResult<AigEstudio> _paginatedResult;
    private static IEnumerable<AigEstudio> List { get; set; }
    private static List<UserModelOutput> Evaluators { get; set; } = new List<UserModelOutput>(); 
    private MudTable<AigEstudio> _table;
    private DateRange dateRange;
    private DateRange expirationRange;
    private DateRange assignmentRange;
    protected StudiesFilter _modelFilter;
    protected bool _loading = false;
    private ClaimsPrincipal _user;
    protected async override Task OnInitializedAsync()
    {
        _modelFilter = new StudiesFilter();
        dateRange = new DateRange();
        expirationRange = new DateRange();
        assignmentRange = new DateRange();
        
        base.OnInitialized();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {   _user = await _authenticationManager.CurrentUser();
            _table?.SetRowsPerPage(10);
            var result= await _manager.GetEvaluators(0);
            Evaluators=result.Data;
        }
    }

    protected bool IsDelete()
    {
        var disabled=true;
        if (_user == null) return disabled;
        var username= _user.GetUserName();
        return (username== "sys@sys.com");
    }

    protected bool IsAddAndEvaluators()
    {
        var disabled=true;
        if (_user == null) return disabled;
        var role= _user.GetRole();
        var userRole = role.ParseEnum<RoleType>();
        return (userRole== RoleType.Admin || userRole== RoleType.Boss);
    }

    protected bool IsEdit(List<string> evaluators)
    {
        var disabled=true;
        if (_user == null) return disabled;
        var userId= _user.GetUserId();
        var role= _user.GetRole();
        var userRole = role.ParseEnum<RoleType>();
        return (evaluators.Any(p => p == userId)) || (userRole== RoleType.Admin || userRole== RoleType.Boss);
    }
     protected bool IsCopy()
    {
        var disabled=true;
        if (_user == null) return disabled;
        var userId= _user.GetUserId();
        var role= _user.GetRole();
        var userRole = role.ParseEnum<RoleType>();
        return (userRole== RoleType.Admin || userRole== RoleType.Boss);
    }
    private async Task RefresView(bool state)
    {
        _loading = state;
        await this.InvokeAsync(StateHasChanged);
    }

    public int GetWorkingDays(DateTime from, DateTime to,List<DateTime> holidays)
    {
        if((to - from).TotalDays<0) return -1;
        var totalDays = 0;
        for (var date = from.AddDays(1); date <= to; date = date.AddDays(1)) {
            if (date.DayOfWeek != DayOfWeek.Saturday
                && date.DayOfWeek != DayOfWeek.Sunday
                && !holidays.Contains(date))
                totalDays++;
        }
        return totalDays;
    }

    public int GetElapsedDays(AigEstudio item)
    {
        var result =0;
        try {
            if (item == null || item.FechaAsignacion == null || item.Nota?.FechaEvaluacion == null) return result;
            //TimeSpan? timeSpan = (item.Nota?.FechaEvaluacion.Value - item.FechaAsignacion.Value);
            //return   Convert.ToInt32(timeSpan!.Value.TotalDays);
            return GetWorkingDays(item.FechaAsignacion.Value,item.Nota.FechaEvaluacion.Value,new List<DateTime>());
        }
        catch (Exception exc){;}
        return result;
    }
    private async Task<TableData<AigEstudio>> DoFetchData(TableState state)
    {
        var result = new TableData<AigEstudio>();

        await RefresView(true);
        var sorting = new List<SortingOption>();
        var filters = new List<FilteringOption>();
        if (state.SortDirection != SortDirection.None)
        {
            var sortDirection = state.SortDirection == SortDirection.Descending ? SortingDirection.DESC : SortingDirection.ASC;
            sorting = new() { new SortingOption { Field = state.SortLabel, Direction = sortDirection } };
        }
        if (!string.IsNullOrEmpty(_modelFilter.Term))
            filters.Add(new FilteringOption { Field = "term", Operator = FilteringOperator.Contains, Value = _modelFilter.Term.Trim() });

        if (_modelFilter.StartDate != null && _modelFilter.EndDate != null)
        {
            filters.Add(new FilteringOption { Field = "startAdmissionDate", Operator = FilteringOperator.GreaterThanEqual, Value = _modelFilter.StartDate.Value.ToString("dd/MM/yyyy") });
            filters.Add(new FilteringOption { Field = "endAdmissionDate", Operator = FilteringOperator.LessThanEqual, Value = _modelFilter.EndDate.Value.ToString("dd/MM/yyyy") });
        }
        if (_modelFilter.StartExpirationDate != null && _modelFilter.EndExpirationDate != null)
        {
            filters.Add(new FilteringOption { Field = "startEvaluationDate", Operator = FilteringOperator.GreaterThanEqual, Value = _modelFilter.StartExpirationDate.Value.ToString("dd/MM/yyyy") });
            filters.Add(new FilteringOption { Field = "endEvaluationDate", Operator = FilteringOperator.LessThanEqual, Value = _modelFilter.EndExpirationDate.Value.ToString("dd/MM/yyyy") });
        }
        if (_modelFilter.StartAssignmentDate != null && _modelFilter.EndAssignmentDate != null)
        {
            filters.Add(new FilteringOption { Field = "startAssignmentDate", Operator = FilteringOperator.GreaterThanEqual, Value = _modelFilter.StartAssignmentDate.Value.ToString("dd/MM/yyyy") });
            filters.Add(new FilteringOption { Field = "endAssignmentDate", Operator = FilteringOperator.LessThanEqual, Value = _modelFilter.EndAssignmentDate.Value.ToString("dd/MM/yyyy") });
        }
        filters.Add(new FilteringOption { Field = "status", Operator = FilteringOperator.Equal, Value = _modelFilter.Status.ToString() });
        if (!string.IsNullOrEmpty(_modelFilter.Product))
            filters.Add(new FilteringOption { Field = "product", Operator = FilteringOperator.Contains, Value = _modelFilter.Product.Trim() });

        if (!string.IsNullOrEmpty(_modelFilter.Researcher))
            filters.Add(new FilteringOption { Field = "researcher", Operator = FilteringOperator.Contains, Value = _modelFilter.Researcher.Trim() });

        if (!string.IsNullOrEmpty(_modelFilter.Evaluator))
            filters.Add(new FilteringOption { Field = "evaluator", Operator = FilteringOperator.Equal, Value = _modelFilter.Evaluator });

        var args = new PageSearchArgs()
            {
                PageIndex = state.Page + 1,
                PageSize =state.PageSize,
                SortingOptions = sorting,
                FilteringOptions = filters
            };
        _paginatedResult = await _manager.SearchAsync(args);
        List = _paginatedResult.Data.Select(w => { w.ElapsedDays = GetElapsedDays(w); return w; }).ToList();
        result = new TableData<AigEstudio>() { TotalItems = _paginatedResult.TotalCount, Items = _paginatedResult.Data };

        await RefresView(false);
        return result;
    }

    private void ShowBtnPress(long nr)
    {
        var item=List.First(f => f.Id == nr);
        item.ShowDetails = !item.ShowDetails;
    }

    private async void OnSearch()
    {
        _modelFilter.StartDate = dateRange.Start;
        _modelFilter.EndDate = dateRange.End;
        _modelFilter.StartExpirationDate = expirationRange.Start;
        _modelFilter.EndExpirationDate = expirationRange.End;
        _modelFilter.StartAssignmentDate = assignmentRange.Start;
        _modelFilter.EndAssignmentDate = assignmentRange.End;
        await _table.ReloadServerData();
    }
    private async Task OnReset()
    {
        _modelFilter = new StudiesFilter();
        dateRange = new DateRange();
        expirationRange = new DateRange();
        assignmentRange = new DateRange();
        await _table.ReloadServerData();
    }

    private async Task AddEdit(long id = 0)
    {
        var parameters = new DialogParameters { ["_id"]=id };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<AddEdit>(id == 0 ? "Nuevo" :"Editar ", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled){   
            await _table.ReloadServerData();
            await _bus.Publish(true);
        }
               
      }

  @*  private void ShowNote(long id, string num)
    {
        _navigationManager.NavigateTo($"note/{id}/{num}");
    }*@
    private void ShowNote(AigEstudio item)
    {
        var code = item.Nota?.GetNoteCode(item.Id);
        _navigationManager.NavigateTo($"note/{item.Id}/{item.NumTramite}/{code}");
    }
      private async Task SetEvaluators(long id)
        {
            var parameters = new DialogParameters { ["_id"]=id };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true };
            var dialog = _dialogService.Show<AddEditEvaluators>("Asignación de Evaluadores", parameters, options);
            var result = await dialog.Result;
            if (!result.Cancelled)
                await _table.ReloadServerData();
      }
    
    private async Task Delete(long id)
    {
        var parameters = new DialogParameters{
             { nameof(Shared.Dialogs.DeleteConfirmation.ContentText), string.Format("¿Estás seguro de querer eliminar el registro?", id) }
         };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<Shared.Dialogs.DeleteConfirmation>("Eliminar", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var response = await _manager.DeleteAsync(id);
            if (response.Succeeded)
                 await _table.ReloadServerData();
            foreach (var message in response.Messages)
            {
                _snackBar.Add(message, response.Succeeded ? Severity.Success : Severity.Error);
            }
        }
    }

    private async Task Clone(long id)
    {
        var parameters = new DialogParameters{
             { nameof(Shared.Dialogs.DeleteConfirmation.ContentText), string.Format("¿Estás seguro de querer clonar esta solicitud ?", id) }
         };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<Shared.Dialogs.DeleteConfirmation>("Eliminar", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var response = await _manager.CloneAsync(id);
            if (response.Succeeded)
                 await _table.ReloadServerData();
            foreach (var message in response.Messages)
            {
                _snackBar.Add(message, response.Succeeded ? Severity.Success : Severity.Error);
            }
        }
    }

    private async Task Refresh()
    {
        await _table.ReloadServerData();
        await this.InvokeAsync(StateHasChanged);
    }
}

@page "/note/{Id:long}/{Num}"
@attribute [Authorize]
@using Aig.Farmacoterapia.Domain.Entities.Enums
@using Aig.Farmacoterapia.Domain.Entities.Products;
@using Aig.Farmacoterapia.Domain.Extensions
@using Aig.Farmacoterapia.Domain.Interfaces.Integration;
@using Aig.Farmacoterapia.Domain.Models;
@using Aig.Farmacoterapia.Wasm.Client.Components.Medicament
@using Aig.Farmacoterapia.Wasm.Client.Components.Record;
@using Aig.Farmacoterapia.Wasm.Client.Extensions
@using Aig.Farmacoterapia.Wasm.Client.Infrastructure.Managers.Note;
@using Aig.Farmacoterapia.Wasm.Client.Model
@using Aig.Farmacoterapia.Domain.Common
@using Aig.Farmacoterapia.Domain.Entities
@using System.Globalization
@using System.Security.Claims
@inject INoteManager _manager;
<PageTitle>Nota</PageTitle>


 @if (_loading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
}
<MudCard Elevation="25">
    <MudCardContent>

        <MudGrid>
            <MudItem xs="12" md="12">
                <MudToolBar Style="height:25px !important;">
                    <MudText Color="Color.Primary">
                        <MudIcon Icon="@Icons.Material.Filled.MedicationLiquid" Color="Color.Default" Style="margin-bottom: 5px;"></MudIcon>
                        Medicamentos
                    </MudText>
                    <MudSpacer />
                    <MudTooltip Text="Solicitudes de autorización" Arrow="true" Placement="Placement.Left" Color="Color.Default">
                        <MudIconButton ButtonType="ButtonType.Button" Icon="@Icons.Material.Outlined.Close" Variant="Variant.Outlined" Color="Color.Default" Size="Size.Small" @onclick="@(() => Close())" />
                    </MudTooltip>
                </MudToolBar>
            </MudItem>
        </MudGrid>

    </MudCardContent>

</MudCard>

<MudCard Elevation="25" style="margin-top:10px !important;">
    <MudCardContent>

         <MudGrid>
                  <MudItem Style="padding:40px !important" xs="12" md="8">
                    <div style="text-align:left;margin-bottom:10px" class="ml-auto">
                        <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Medium"
                               Href="@($"{_appConfiguration.ApiUrl}{AppConstants.ReportEndpoints.NoteReportURL(Id)}")"
                               Target="_blank"
                               StartIcon="@Icons.Material.Filled.Download">
                            Descargar
                          </MudButton>
                    
                    <MudButton style="margin-left:10px !important" Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Medium"
                               OnClick="@(async () =>await Send($"{_appConfiguration.ApiUrl}{AppConstants.ReportEndpoints.NoteReportURL(Id)}"))"
                               Target="_blank"
                               StartIcon="@Icons.Material.Filled.Send">
                        21 Tramites
                    </MudButton>
                    </div>
               
                <object data="@($"{_appConfiguration.ApiUrl}{AppConstants.ReportEndpoints.NoteReportURL(Id)}")" type="application/pdf" width="100%" height="1200">
                    <p> No se pudo visualizar correctamente el contenido</p>
                  </object>
                </MudItem>
      </MudGrid>

    </MudCardContent>

</MudCard>


@code {
    [Parameter]
    public long Id { get; set; }
    [Parameter]
    public string Num { get; set; }
    protected bool _loading = false;
    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

        }
    }
    private async Task RefresView(bool state)
    {
        _loading = state;
        await this.InvokeAsync(StateHasChanged);
    }

    private async Task Close()
    {
        _navigationManager.NavigateTo("/studies");
    }

    private async Task Send(string url)
    {
        var parameters = new DialogParameters{
             { nameof(Shared.Dialogs.DeleteConfirmation.ContentText), string.Format("¿Estás seguro que desea enviar la nota a 21 tramites?") }};
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<Shared.Dialogs.DlgConfirmation>("Enviar", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled) {
            await RefresView(true);
            var file = new UploadFileDTO(){
                    FileName = "Nota",
                    Extension = ".pdf",
                    ContentType = "application/pdf",
                    UploadType = 12,
                    Url = $"{_appConfiguration.ApiUrl}{AppConstants.ReportEndpoints.NoteReportURL(Id)}"
                };
            await _manager.SendAsync(Num,file);
            await RefresView(false);
            _navigationManager.NavigateTo("/studies");
        }
       
    }
}

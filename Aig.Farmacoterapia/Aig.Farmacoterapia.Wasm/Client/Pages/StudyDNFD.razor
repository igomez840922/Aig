@page "/studiesdnfd"
@attribute [Authorize]
@using Aig.Farmacoterapia.Domain.Entities.Enums
@using Aig.Farmacoterapia.Domain.Entities.Studies
@using Aig.Farmacoterapia.Domain.Entities.Studies.Enums
@using Aig.Farmacoterapia.Domain.Extensions
@using Aig.Farmacoterapia.Wasm.Client.Components.StudiesDNFD
@using Aig.Farmacoterapia.Wasm.Client.Extensions
@using Aig.Farmacoterapia.Wasm.Client.Infrastructure.Managers.Studies
@using Aig.Farmacoterapia.Wasm.Client.Model
@using Aig.Farmacoterapia.Domain.Common
@using Aig.Farmacoterapia.Domain.Entities
@using System.Globalization
@using System.Security.Claims
@inject NavigationManager _navigation;
@inject IStudyDNFDManager _manager;

<PageTitle>Medicaments</PageTitle>

<style>
    .table th, .table td {
        vertical-align: middle !important;
    }

    .table-sm th {
        padding: 0.8rem 0.3rem 0.8rem 1rem !important;
    }

    .table-sm td {
        padding: 0.3rem 0.3rem 0.3rem 1rem !important;
    }

    .dropdown-item {
        display: flow-root !important;
    }

    .mud-table-container {
        min-height: 200px !important;
        width: 100% !important;
    }

    .mud-table-empty-row {
        padding-top: 60px !important;
    }

    .mud-table-head {
        background-color: #f0f0f0 !important;
        border-color: #f0f0f0 !important;
        color: #594ae2 !important;
    }

    .mud-table-root .mud-table-head .mud-table-cell {
        color: #594ae2 !important;
    }

    .mud-table-sort-label:hover {
        color: #594ae2 !important;
    }

    .row-width {
        width: 2000px !important;
    }

    td.table-row {
        color: red;
    }
</style>


<MudCard Elevation="25">
    <MudCardContent>

                <MudToolBar Style="height:25px !important;">
                    <MudText Color="Color.Primary">
                        <MudIcon Icon="@Icons.Material.Outlined.Assignment" Color="Color.Default" Style="margin-bottom: 5px;"></MudIcon>
                        Estudio clínicos por DNFD
                    </MudText>
                    <MudSpacer />
                    <MudTooltip Text="Nuevo" Arrow="true" Placement="Placement.Left" Color="Color.Default">
                        <MudIconButton ButtonType="ButtonType.Button" Disabled="@(_loading)" Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Default" Size="Size.Small" @onclick="@(() => AddEdit(0))" />
                    </MudTooltip>
                </MudToolBar>
        

    </MudCardContent>

</MudCard>

<MudCard Elevation="25" style="margin-top:10px !important;">
    <MudCardContent Style="padding: 0px !important;">
        <MudExpansionPanel @bind-IsExpanded="filterOpen" HideIcon="true">
            <TitleContent>
                <div class="d-flex">
                    <MudText Color="Color.Primary">Filtros</MudText>
                    <MudIcon Icon="@(filterOpen ? Icons.Material.Filled.FilterList : Icons.Material.Filled.FilterListOff)" class="ml-auto"></MudIcon>
                </div>
            </TitleContent>
            <ChildContent>
                <EditForm Elevation="25" Model="this" OnValidSubmit="OnSearch">
                    <MudCard Elevation="25">
                        <MudCardContent>

                            <MudGrid>

                                <MudItem md="3" Style="margin-top:12px !important">
                                    <MudTextField OnClearButtonClick="OnSearch" Clearable="true" HelperText="Código / Título  / Centro" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="_modelFilter.Term" Label="Buscar" />
                                </MudItem>

                                <MudItem md="5">
                                    <MudGrid>
                                        <MudItem md="6">
                                            <MudDateRangePicker Clearable="true" Culture="@CultureInfo.GetCultureInfo("es-Es")" DateFormat="dd/MM/yyyy" Label="Fecha de Ingreso:" @bind-DateRange="dateRange" />
                                        </MudItem>
                                        <MudItem md="6">
                                            <MudDateRangePicker Clearable="true" Culture="@CultureInfo.GetCultureInfo("es-Es")" DateFormat="dd/MM/yyyy" Label="Fecha de Evaluación:" @bind-DateRange="expirationRange" />
                                        </MudItem>
                                    </MudGrid>
                                </MudItem>

                                <MudItem md="2" Style="margin-top:12px !important">
                                    <MudGrid>
                                        <MudItem md="6" Style="margin-top: 10px !important;">
                                            <MudTooltip Text="Buscar" Arrow="true" Placement="Placement.Top" Color="Color.Default">
                                                <MudIconButton Disabled="@(_loading)" Style="margin-right: 8px;" ButtonType="ButtonType.Submit" Icon="@Icons.Material.Filled.Search" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" />
                                            </MudTooltip>
                                            <MudTooltip Text="Eliminar" Arrow="true" Placement="Placement.Top" Color="Color.Default" Style="margin-top: 10px !important;">
                                                <MudIconButton Disabled="@(_loading)" ButtonType="ButtonType.Button" Icon="@Icons.Material.Filled.Clear" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="()=>OnReset()" />
                                            </MudTooltip>
                                        </MudItem>
                                        <MudItem md="6">
                                            @if (!_loading)
                                            {
                                                <MudText Style="margin-top: 10px !important;" Color="Color.Primary" Typo="Typo.h6">Total:@(_paginatedResult?.TotalCount)</MudText>
                                            }
                                        </MudItem>
                                    </MudGrid>

                                </MudItem>

                            </MudGrid>

                            <MudGrid>

                                <MudItem md="3" Style="margin-top:8px !important">
                                    <MudTextField OnClearButtonClick="OnSearch" Clearable="true" HelperText="Investigador principal" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="_modelFilter.Researcher" Label="Investigador" />
                                </MudItem>

                                <MudItem md="3" Style="margin-top:8px !important">
                                    <MudTextField OnClearButtonClick="OnSearch" Clearable="true" HelperText="Patrocinador del estudio" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="_modelFilter.Sponsor" Label="Patrocinador" />
                                </MudItem>


                            </MudGrid>

                        </MudCardContent>

                    </MudCard>
                </EditForm>

            </ChildContent>
        </MudExpansionPanel>

    </MudCardContent>

</MudCard>


<MudTable  HorizontalScrollbar="true" FixedHeader="false" FixedFooter="false" Elevation="25" @ref="_table" Striped="true" SortLabel="name" LoadingProgressColor="Color.Primary" Dense="true" Hover="true" ServerData="@(new Func<TableState, Task<TableData<AigEstudioDNFD>>>(DoFetchData))">
      
    <HeaderContent>
        <MudTh style="width:3px;"></MudTh>
        <MudTh style="width:3px;"></MudTh>
        <MudTh> <MudTableSortLabel Style="width:100px !important" SortLabel="admissionDate" T="AigEstudioDNFD">Fecha de Ingreso</MudTableSortLabel></MudTh>
        <MudTh><MudInputLabel Style="width:150px !important">Código del protocolo de investigación</MudInputLabel></MudTh>
        <MudTh><MudInputLabel Style="width:450px !important">Título del protocolo de investigación</MudInputLabel></MudTh>
        @*<MudTh> <MudInputLabel Style="width:300px !important">Nota de Evaluación</MudInputLabel> </MudTh>
        <MudTh><MudTableSortLabel Style="width:200px" SortLabel="evaluationDate" T="AigEstudioDNFD">Fecha de Evaluación</MudTableSortLabel></MudTh>*@
        @*<MudTh><MudInputLabel Style="width:400px">Observaciones por el evaluador</MudInputLabel></MudTh>*@
        @*<MudTh><MudInputLabel Style="width:200px">Constancia de registro del protocolo en DIGESA</MudInputLabel></MudTh>*@
       @* <MudTh><MudInputLabel Style="width:200px">Investigador principal</MudInputLabel></MudTh>
        <MudTh><MudInputLabel Style="width:200px">Patrocinador del estudio</MudInputLabel></MudTh>*@
        <MudTh><MudInputLabel Style="width:80px">Duración del estudio</MudInputLabel></MudTh>
        <MudTh><MudInputLabel Style="width:100px">Número de participantes en panamá</MudInputLabel></MudTh>
        @*<MudTh><MudInputLabel Style="width:200px">Centro de investigación</MudInputLabel></MudTh>
        <MudTh><MudInputLabel Style="width:200px">Comité de bioetica que aprobó el estudio</MudInputLabel></MudTh>*@
        <MudTh><MudTableSortLabel Style="width:80px" InitialDirection="SortDirection.Descending" SortLabel="created" T="AigEstudioDNFD">Creado</MudTableSortLabel></MudTh>
       
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudIconButton Icon="@(!context.ShowDetails?Icons.Filled.ArrowCircleRight:@Icons.Filled.ArrowCircleDown)" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(() => context.ShowDetails=!context.ShowDetails)" />
        </MudTd>
        <MudTd>

            <MudMenu Icon="@Icons.Material.Filled.Settings" Color="Color.Default">
                <MudMenuItem Disabled=IsEdit() Icon="@Icons.Material.Filled.Edit" OnClick="@(() => AddEdit(@context.Id))" OnTouch="@(() => AddEdit(@context.Id))">Editar</MudMenuItem>
                @*<MudMenuItem Style="border-bottom:1px solid #E4E6EF !important;" Disabled="@(context.Estado!=EstadoEstudioDNFD.Pending || IsEvaluate())" IconColor="Color.Primary" Icon="@Icons.Material.Outlined.PostAdd" OnClick="@(() => Evaluate(@context.Id))" OnTouch="@(() => Evaluate(@context.Id))">Generar Solicitud</MudMenuItem>*@
                @if (IsDelete())
                {
                    <MudMenuItem Style="border-bottom:1px solid #E4E6EF !important;" IconColor="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="@(() => Delete(@context.Id))" OnTouch="@(() => Delete(@context.Id))">Eliminar</MudMenuItem>
                }
            </MudMenu>

        </MudTd>
        <MudTd DataLabel="Fecha de Ingreso">@(string.Format("{0:dd/MM/yyyy}", context.FechaIngreso!))</MudTd>
        <MudTd DataLabel="Código del protocolo de investigación">
            @if (!string.IsNullOrEmpty(context.AigCodigo?.Codigo))
            {
                <MudBadge Content="context.AigCodigo?.Codigo" Color="Color.Tertiary" Overlap="true">
                </MudBadge>
            }
            else
            {
                <MudBadge Content="@("---")" Color="Color.Default" Overlap="true" Class="mx-2 my-2">
                </MudBadge>
            }
        </MudTd>
        <MudTd DataLabel="Título del protocolo de investigación">@context.Titulo</MudTd>
       @* <MudTd DataLabel="Nota de Evaluación">@context.NotaEvaluacion</MudTd>
        <MudTd DataLabel="Fecha de Evaluación">@(string.Format("{0:dd/MM/yyyy}", context.FechaEvaluacion!))</MudTd>*@
       @* <MudTd DataLabel="Observaciones por el evaluador">@context.ObservacionesEvaluador</MudTd>*@
        @*<MudTd DataLabel="Constancia de registro del protocolo en DIGESA">@context.RegistroProtocoloDIGESA</MudTd>*@
        @*<MudTd DataLabel="Investigador principal">@context.InvestigadorPrincipal</MudTd>
        <MudTd DataLabel="Patrocinador del estudio">@context.Patrocinador</MudTd>*@
        <MudTd DataLabel="Duración del estudio">@context.Duracion</MudTd>
        <MudTd DataLabel="Número de participantes en panamá">@context.Participantes</MudTd>
@*        <MudTd DataLabel="Centro de investigación">@context.CentroInvestigacion</MudTd>
        <MudTd DataLabel="Comité de bioetica que aprobó el estudio">@context.ComiteBioetica</MudTd>*@
        <MudTd DataLabel="Creado">@(string.Format("{0:dd/MM/yyyy}", context.Created))</MudTd>
        
    </RowTemplate>
    <ChildRowContent>
        @if (context.ShowDetails)
        {
            <MudTr>
                <td colspan="9">

                    <div style="background-color: #f2eefc;" _ngcontent-lil-c210="" class="py-4 d-flex ng-star-inserted">
                       
                        <div _ngcontent-lil-c210="" class="mx-4">

                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold; margin-right: 5px;">
                                    Nota de Evaluación:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @(!string.IsNullOrEmpty(@context.NotaEvaluacion) ? @context.NotaEvaluacion : "-")
                                </span>
                            </div>

                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold; margin-right: 5px;">
                                    Fecha de Evaluación:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @(string.Format("{0:dd/MM/yyyy}", context.FechaEvaluacion!))
                                </span>
                            </div>

                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold; margin-right: 5px;">
                                    Observaciones por el evaluador:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @(!string.IsNullOrEmpty(@context.ObservacionesEvaluador) ? @context.ObservacionesEvaluador : "-")
                                </span>
                            </div>
                            <hr/>
                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold; margin-right: 5px;">
                                    Constancia de registro del protocolo en DIGESA:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @(!string.IsNullOrEmpty(@context.RegistroProtocoloDIGESA) ? @context.RegistroProtocoloDIGESA : "-")
                                </span>
                            </div>

                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold; margin-right: 5px;">
                                    Investigador principal:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @(!string.IsNullOrEmpty(@context.InvestigadorPrincipal) ? @context.InvestigadorPrincipal : "-")
                                </span>
                            </div>

                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold; margin-right: 5px;">
                                    Patrocinador del estudio:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @(!string.IsNullOrEmpty(@context.Patrocinador) ? @context.Patrocinador : "-")
                                </span>
                            </div>

                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold; margin-right: 5px;">
                                    Centro de investigación:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @(!string.IsNullOrEmpty(@context.CentroInvestigacion) ? @context.CentroInvestigacion : "-")
                                </span>
                            </div>

                             <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold; margin-right: 5px;">
                                    Comité de bioetica que aprobó el estudio:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @(!string.IsNullOrEmpty(@context.ComiteBioetica) ? @context.ComiteBioetica : "-")
                                </span>
                            </div>
                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold; margin-right: 5px;">
                                    Población a Estudiar:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">

                                    @context.Poblacion

                                </span>
                            </div>
                        </div>

                    </div>

                </td>
            </MudTr>
        }
    </ChildRowContent>
    <NoRecordsContent>
        <MudText>No se encontraron elementos</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Cargando...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager HorizontalAlignment="HorizontalAlignment.Center" Class="primary" InfoFormat="{first_item}-{last_item} de {all_items}" PageSizeOptions="new int[] {3,5,6,8,10, 25, 50, 100, 250 }" RowsPerPageString="Filas" />
    </PagerContent>

</MudTable>


@code {
    private bool filterOpen = false;
    private PaginatedResult<AigEstudioDNFD> _paginatedResult;
    private static IEnumerable<AigEstudioDNFD> List { get; set; }
    private MudTable<AigEstudioDNFD> _table;
    private DateRange dateRange;
    private DateRange expirationRange;
    protected StudiesDNFDFilter _modelFilter;
    protected bool _loading = false;
    private ClaimsPrincipal _user;
    protected async override Task OnInitializedAsync()
    {
        _modelFilter = new StudiesDNFDFilter();
        dateRange = new DateRange();
        expirationRange = new DateRange();
        base.OnInitialized();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _user = await _authenticationManager.CurrentUser();
            _table.SetRowsPerPage(10);
        }

    }
    private async Task RefresView(bool state)
    {
        _loading = state;
        await this.InvokeAsync(StateHasChanged);
    }

    protected bool IsDelete()
    {
        var disabled=true;
        if (_user == null) return disabled;
        var username= _user.GetUserName();
        return (username== "sys@sys.com");
    }

    protected bool IsEdit()
    {
        var disabled = true;
        if (_user == null) return disabled;
        var role = _user.GetRole();
        var userRole = role.ParseEnum<RoleType>();
        disabled = !(userRole == RoleType.Admin || userRole == RoleType.Boss || userRole == RoleType.Secretary || userRole == RoleType.Evaluator);
        return disabled;
    }
    protected bool IsEvaluate()
    {
        var disabled = true;
        if (_user == null) return disabled;
        var role = _user.GetRole();
        var userRole = role.ParseEnum<RoleType>();
        disabled = !(userRole == RoleType.Admin || userRole == RoleType.Boss);
        return disabled;
    }


    private async Task<TableData<AigEstudioDNFD>> DoFetchData(TableState state)
    {
        var result = new TableData<AigEstudioDNFD>();

        await RefresView(true);
        var sorting = new List<SortingOption>();
        var filters = new List<FilteringOption>();
        if (state.SortDirection != SortDirection.None)
        {
            var sortDirection = state.SortDirection == SortDirection.Descending ? SortingDirection.DESC : SortingDirection.ASC;
            sorting = new() { new SortingOption { Field = state.SortLabel, Direction = sortDirection } };
        }
        if (!string.IsNullOrEmpty(_modelFilter.Term))
            filters.Add(new FilteringOption { Field = "term", Operator = FilteringOperator.Contains, Value = _modelFilter.Term.Trim() });
        if (_modelFilter.StartDate != null && _modelFilter.EndDate != null)
        {
            filters.Add(new FilteringOption { Field = "startAdmissionDate", Operator = FilteringOperator.GreaterThanEqual, Value = _modelFilter.StartDate.Value.ToString("dd/MM/yyyy") });
            filters.Add(new FilteringOption { Field = "endAdmissionDate", Operator = FilteringOperator.LessThanEqual, Value = _modelFilter.EndDate.Value.ToString("dd/MM/yyyy") });
        }
        if (_modelFilter.StartExpirationDate != null && _modelFilter.EndExpirationDate != null)
        {
            filters.Add(new FilteringOption { Field = "startEvaluationDate", Operator = FilteringOperator.GreaterThanEqual, Value = _modelFilter.StartExpirationDate.Value.ToString("dd/MM/yyyy") });
            filters.Add(new FilteringOption { Field = "endEvaluationDate", Operator = FilteringOperator.LessThanEqual, Value = _modelFilter.EndExpirationDate.Value.ToString("dd/MM/yyyy") });
        }

        filters.Add(new FilteringOption { Field = "status", Operator = FilteringOperator.Equal, Value = _modelFilter.Status.ToString() });

        if (!string.IsNullOrEmpty(_modelFilter.Researcher))
            filters.Add(new FilteringOption { Field = "researcher", Operator = FilteringOperator.Contains, Value = _modelFilter.Researcher.Trim() });

        if (!string.IsNullOrEmpty(_modelFilter.Sponsor))
            filters.Add(new FilteringOption { Field = "sponsor", Operator = FilteringOperator.Contains, Value = _modelFilter.Sponsor.Trim() });

        var args = new PageSearchArgs()
            {
                PageIndex = state.Page + 1,
                PageSize = state.PageSize,
                SortingOptions = sorting,
                FilteringOptions = filters
            };

        _paginatedResult = await _manager.SearchAsync(args);
        List = _paginatedResult.Data;
        result = new TableData<AigEstudioDNFD>() { TotalItems = _paginatedResult.TotalCount, Items = _paginatedResult.Data };

        await RefresView(false);
        return result;
    }

    private async void OnSearch()
    {
        _modelFilter.StartDate = dateRange.Start;
        _modelFilter.EndDate = dateRange.End;
        _modelFilter.StartExpirationDate = expirationRange.Start;
        _modelFilter.EndExpirationDate = expirationRange.End;
        await _table.ReloadServerData();
    }
    private async Task OnReset()
    {
        _modelFilter = new StudiesDNFDFilter();
        dateRange = new DateRange();
        expirationRange = new DateRange();
        await _table.ReloadServerData();
    }

    private async Task AddEdit(long id = 0)
    {
        var parameters = new DialogParameters { ["_id"] = id };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<AddEdit>(id == 0 ? "Nuevo" : "Editar ", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await _table.ReloadServerData();
            await _bus.Publish(true);
        }
    }

    private async Task Evaluate(long id)
    {
        var parameters = new DialogParameters{
             { nameof(Shared.Dialogs.EvaluateConfirmation.ContentText), string.Format("¿Estás seguro de querer generar una solicitud de importación?", id) }
         };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<Shared.Dialogs.EvaluateConfirmation>("Evaluar", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var response = await _manager.EvaluateAsync(id);
            if (response.Succeeded)
                _navigation.NavigateTo("studies");
            foreach (var message in response.Messages)
            {
                _snackBar.Add(message, response.Succeeded ? Severity.Success : Severity.Error);
            }
        }
    }


    private async Task Delete(long id)
    {
        var parameters = new DialogParameters{
             { nameof(Shared.Dialogs.DeleteConfirmation.ContentText), string.Format("¿Estás seguro de querer eliminar el registro?", id) }
         };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<Shared.Dialogs.DeleteConfirmation>("Eliminar", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var response = await _manager.DeleteAsync(id);
            if (response.Succeeded)
                await _table.ReloadServerData();
            foreach (var message in response.Messages)
            {
                _snackBar.Add(message, response.Succeeded ? Severity.Success : Severity.Error);
            }
        }
    }
}

@page "/profile"
@attribute [Authorize]
@using Aig.Farmacoterapia.Wasm.Client.Extensions
@using Aig.Farmacoterapia.Wasm.Client.Infrastructure.Managers.User
@using Aig.Farmacoterapia.Domain.Common
@using Aig.Farmacoterapia.Domain.Entities.Enums
@using Aig.Farmacoterapia.Domain.Identity
@using Blazored.FluentValidation
@inject IUserManager _manager;

<style>
   .container-image {
        border: 1px solid #adb5bd;
        width: 100px;
        height: 100px;
        border-radius: 0.42rem;
    }
    .outer {
        width: 100% !important;
        height: 100% !important;
        max-width: 150px !important; 
        max-height: 150px !important; 
        background-color: transparent;
        position: relative;
        background-size: cover;
        border-radius: 0.42rem;

    }
    .inner-edit {
        background-color: #594ae2ff;
        width:32px;
        height:32px;
        border-radius: 100%;
        position: absolute;
        top: -10px;
        right: -10px;
    }
    .inner-edit:hover {
        background-color: #5555ff;
    }
    .inner-edit label {
        background-color: transparent;
        cursor:pointer !important;
        width: 100%;
        height: 100%;
    }
    .inner-edit label svg {
       margin:3px;
    }
    .inner-delete {
        background-color: #E91E63;
        width:30px;
        height:30px;
        border-radius: 100%;
        position: absolute;
        bottom: -10px;
        right: -10px;
    }
    .inner-delete label {
        background-color: transparent;
        cursor:pointer !important;
        width: 100%;
        height: 100%;
    }
    .inner-delete label svg {
       margin:3px;
    }
    .inputfile {
        opacity: 0;
        overflow: hidden;
        position: absolute;
        z-index: 1;
        width: 100%;
        height: 100%;
        margin-top:3px;
    }
</style>
<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Icon="@Icons.Material.Filled.CoPresent" Text="Datos Generales">

        <MudGrid>
           
            <MudItem md="5">
                <EditForm Model="@_profileUserModel" OnValidSubmit="ProfileSubmitAsync">
                    <MudCard>
                        <MudCardContent>

                            <FluentValidationValidator  @ref="_profileFluentValidationValidator" />
                            <MudGrid>


                                <MudItem xs="12" sm="12" md="12">
                                    <MudItem>

                                        <div class="container-image">
  
                                            @if (string.IsNullOrEmpty(_profilePicture))
                                            {
                                                <div class="outer" style="background-image: url(/media/user.png);">
                                                    <div class="inner-edit">
                                                        <label>
                                                            <InputFile Class="inputfile" id="fileInput" OnChange="UploadFiles" />
                                                            <MudIcon Icon="@Icons.Material.Filled.AttachFile" Style="color:#fff;" />
                                                        </label>
                                                    </div>
                                                     
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="outer" style="background-image: url(@_profilePicture);">
                                                    <div class="inner-edit">
                                                        <label>
                                                            <InputFile Class="inputfile" id="fileInput" OnChange="UploadFiles" />
                                                            <MudIcon Icon="@Icons.Material.Filled.AttachFile" Style="color:#fff;" />
                                                        </label>
                                                    </div>
                                                     <div class="inner-delete">
                                                          <label>
                                                            <MudIcon  @onclick="DeleteAsync"  Icon="@Icons.Material.Filled.DeleteOutline" Style="color:#fff;" />
                                                          </label>
                                                      </div>
                                                </div>
                                            }

                                        </div>

                                    </MudItem>

                                </MudItem>


                                <MudItem  xs="12" sm="12" md="12">
                                    <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" For="@(() => _profileUserModel.Email)" @bind-Value="_profileUserModel.Email" Label="Correo" />
                                </MudItem>
                                <MudItem   xs="12" sm="12" md="12">
                                    <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" For="@(() => _profileUserModel.FirstName)" @bind-Value="_profileUserModel.FirstName" Label="Nombre" />
                                </MudItem>
                                <MudItem   xs="12" sm="12" md="12">
                                    <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" For="@(() => _profileUserModel.LastName)" @bind-Value="_profileUserModel.LastName" Label="Apellido" />
                                </MudItem>
                                <MudItem   xs="12" sm="12" md="12">
                                    <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" T="string" Label="Teléfono" @bind-Value="_profileUserModel.PhoneNumber" For="@(() => _profileUserModel.PhoneNumber)" />
                                </MudItem>
                             
                            </MudGrid>

                        </MudCardContent>
                        <MudCardActions>
                           <MudButton Disabled="@(!_profileValidated)"  ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small">Actualizar</MudButton>
                        </MudCardActions>
                    </MudCard>
                </EditForm>
            </MudItem>

            <MudItem md="7"/>

        </MudGrid>

    </MudTabPanel>
    <MudTabPanel  Icon="@Icons.Material.Filled.Key" Text="Cambiar Contraseña">
     
        <MudGrid>
           
          
            <MudItem md="5">
                <EditForm Model="@_changePasswordRequestModel" OnValidSubmit="ChangePasswordAsyncSubmitAsync">
                    <MudCard>
                        <MudCardContent>

                            <FluentValidationValidator  @ref="_passwordFluentValidationValidator" />
                            <MudGrid>

                                <MudItem  xs="12" sm="12" md="12">
                                    <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" For="@(() => _changePasswordRequestModel.NewPassword)" @bind-Value="_changePasswordRequestModel.NewPassword"
                                                  Label="Contraseña" InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />
                                </MudItem>

                                 <MudItem  xs="12" sm="12" md="12">
                                    <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" For="@(() => _changePasswordRequestModel.ConfirmNewPassword)" @bind-Value="_changePasswordRequestModel.ConfirmNewPassword"
                                                  Label="Contraseña" InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />
                                </MudItem>
                              
                            </MudGrid>

                        </MudCardContent>
                        <MudCardActions>
                           <MudButton Disabled="@(!_passwordValidated)"  ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small">Actualizar</MudButton>
                        </MudCardActions>
                    </MudCard>
                </EditForm>
            </MudItem>

            <MudItem md="7"/>

        </MudGrid>


    </MudTabPanel>
</MudTabs>


@code {

    private FluentValidationValidator _profileFluentValidationValidator;
    private FluentValidationValidator _passwordFluentValidationValidator;
    private bool _profileValidated => _profileFluentValidationValidator.Validate(options => { options.IncludeAllRuleSets(); });
    private bool _passwordValidated =>_passwordFluentValidationValidator.Validate(options => { options.IncludeAllRuleSets(); });

    public UpdateProfileRequest _profileUserModel { get; set; } = new UpdateProfileRequest();
    public ChangePasswordRequest _changePasswordRequestModel { get; set; } = new ChangePasswordRequest();
    string _profilePicture { get; set; } = string.Empty;
    private bool _showPictureAlert = false;
    private IBrowserFile _file;

    private bool _passwordVisibility;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
    private InputType _passwordInput = InputType.Password;


    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();

    }

    void TogglePasswordVisibility()
    {
        if (_passwordVisibility)
        {
            _passwordVisibility = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordVisibility = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }


    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        _file = e.File;
        if (_file != null)
        {
            _showPictureAlert = false;
            long maxFileSize = 1048576 * 1;//1 MB
            if (_file.Size <= maxFileSize)
            {
                var contentType = _file.ContentType;
                var extension = Path.GetExtension(_file.Name);
                var imageFile = await _file.RequestImageFileAsync(contentType, 400, 400);
                var stream = imageFile.OpenReadStream(maxAllowedSize: maxFileSize);
                var request = new UploadObject{
                    FileName = $"{Guid.NewGuid()}{extension}",
                    Data = stream,
                    Size = imageFile.Size,
                    UploadType = UploadType.Users,
                    ContentType = contentType,
                    Extension = extension,
                 };
                if((await _manager.UploadProfilePictureAsync(request)).Succeeded) { 
                    _profileUserModel.ProfilePicture= request.FileName;
                    var buffer = new byte[imageFile.Size];
                    await imageFile.OpenReadStream().ReadAsync(buffer);
                    _profilePicture = $"data:{contentType};base64,{Convert.ToBase64String(buffer)}";
                }
            }
            else { _showPictureAlert = true; }
        }
    }

    private async Task DeleteAsync()
    {
        if (!string.IsNullOrEmpty(_profileUserModel.ProfilePicture)){
            await _manager.DeleteProfilePictureAsync(UploadType.Users, _profileUserModel.ProfilePicture);
           _profilePicture= null; 
           _profileUserModel.ProfilePicture = string.Empty; 
        }
        
    }

    protected async Task ProfileSubmitAsync()
    {   
        var response = await _manager.UpdateProfileAsync(_profileUserModel);
        if (response.Succeeded)
        {
            await _authenticationManager.Logout();
            _snackBar.Add("Tu perfil ha sido actualizado correctamente. Por favor inicie sesión para continuar.", Severity.Success);
            _navigationManager.NavigateTo("/");
        }
        else
        {
            foreach (var message in response.Messages)
            {
                _snackBar.Add(message, Severity.Error);
            }
        }
    }

    protected async Task ChangePasswordAsyncSubmitAsync()
    {   
        var response = await _manager.ChangePasswordAsync(_changePasswordRequestModel);
        if (response.Succeeded)
        {
            await _authenticationManager.Logout();
            _snackBar.Add("Tu contraseña ha sido actualizada correctamente. Por favor inicie sesión para continuar.", Severity.Success);
            _navigationManager.NavigateTo("/");
        }
        else
        {
            foreach (var message in response.Messages)
            {
                _snackBar.Add(message, Severity.Error);
            }
        }
    }

    private async Task LoadDataAsync()
    {
        var state = await _stateProvider.GetAuthenticationStateAsync();
        var user = state.User;
        _profileUserModel.Id = user.GetUserId();
        _profileUserModel.Email = user.GetEmail();
        _profileUserModel.FirstName = user.GetFirstName();
        _profileUserModel.LastName = user.GetLastName();
        _profileUserModel.PhoneNumber = user.GetPhoneNumber();
         _profileUserModel.ProfilePicture = user.GetAvatar();
         var picture=await _localStorage.GetItemAsync<string>(AppConstants.Local.UserImageURL);
         _profilePicture =string.IsNullOrEmpty(picture)?string.Empty: $"{_appConfiguration.ApiUrl}{picture}";
        _changePasswordRequestModel.UserId = _profileUserModel.Id;
    }

}

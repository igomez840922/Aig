@page "/"
@attribute [Authorize]
@using Aig.Farmacoterapia.Domain.Entities.Enums
@using Aig.Farmacoterapia.Domain.Entities.Products;
@using Aig.Farmacoterapia.Domain.Extensions
@using Aig.Farmacoterapia.Wasm.Client.Components.Medicament
@using Aig.Farmacoterapia.Wasm.Client.Components.Record;
@using Aig.Farmacoterapia.Wasm.Client.Extensions
@using Aig.Farmacoterapia.Wasm.Client.Model
@using Aig.Farmacoterapia.Domain.Common
@using Aig.Farmacoterapia.Domain.Entities
@using Aig.Farmacoterapia.Wasm.Client.Infrastructure.Managers.Medicament
@using System.Globalization
@using System.Security.Claims
@inject IAigRecordManager _manager;

<PageTitle>Medicaments</PageTitle>

<style>
    .table th, .table td {
        vertical-align: middle !important;
    }

    .table-sm th {
        padding: 0.8rem 0.3rem 0.8rem 1rem !important;
    }

    .table-sm td {
        padding: 0.3rem 0.3rem 0.3rem 1rem !important;
    }

    .dropdown-item {
        display: flow-root !important;
    }

    .mud-table-container {
        min-height: 200px !important;
    }

    .mud-table-empty-row {
        padding-top: 60px !important;
    }

    .mud-table-head {
        background-color: #f0f0f0 !important;
        border-color: #f0f0f0 !important;
        color: #594ae2 !important;
    }

    .mud-table-root .mud-table-head .mud-table-cell {
        color: #594ae2 !important;
    }

    .mud-table-sort-label:hover {
        color: #594ae2 !important;
    }
</style>

<MudCard Elevation="25">
    <MudCardContent>

        <MudGrid>
            <MudItem xs="12" md="12">
                <MudToolBar Style="height:25px !important;">
                    <MudText Color="Color.Primary">
                        <MudIcon Icon="@Icons.Material.Filled.MedicationLiquid" Color="Color.Default" Style="margin-bottom: 5px;"></MudIcon>
                        Medicamentos
                    </MudText>
                    <MudSpacer />
                    <MudTooltip Text="Actualizar" Arrow="true" Placement="Placement.Left" Color="Color.Default">
                        <MudIconButton ButtonType="ButtonType.Button" Disabled="@(_loading)" Icon="@Icons.Material.Filled.Refresh" Variant="Variant.Outlined" Color="Color.Default" Size="Size.Small" @onclick="@(async () =>await Refresh())" />
                    </MudTooltip>
                </MudToolBar>
            </MudItem>
        </MudGrid>

    </MudCardContent>

</MudCard>

<MudCard Elevation="25" style="margin-top:10px !important;">
    <MudCardContent Style="padding: 0px !important;">
        <MudExpansionPanel @bind-IsExpanded="filterOpen" HideIcon="true">
            <TitleContent>
                <div class="d-flex">
                    <MudText Color="Color.Primary">Filtros</MudText>
                    <MudIcon Icon="@(filterOpen ? Icons.Material.Filled.FilterList : Icons.Material.Filled.FilterListOff)" class="ml-auto"></MudIcon>
                </div>
            </TitleContent>
            <ChildContent>
                <EditForm Elevation="25" Model="this" OnValidSubmit="OnSearch" style="margin-top:10px !important;">
                    <MudCard Elevation="25">
                        <MudCardContent>

                           <MudGrid>

                                <MudItem md="3" Style="margin-top:12px !important">
                                    <MudTextField HelperText="No.Registro / Nombre / Principio Activo / Fabricante" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="_modelFilter.Term" Label="Buscar" />
                                </MudItem>

                                <MudItem md="5">
                                    <MudGrid>
                                        <MudItem md="6">
                                            <MudDateRangePicker Culture="@CultureInfo.GetCultureInfo("es-Es")" DateFormat="dd/MM/yyyy" Label="Fecha de Emisión:" @bind-DateRange="dateRange" />
                                        </MudItem>
                                        <MudItem md="6">
                                            <MudDateRangePicker Culture="@CultureInfo.GetCultureInfo("es-Es")" DateFormat="dd/MM/yyyy" Label="Fecha de Expiración:" @bind-DateRange="expirationRange" />
                                        </MudItem>
                                    </MudGrid>
                                </MudItem>
                                <MudItem md="2" Style="margin-top:20px !important">
                                    <MudGrid>

                                        <MudItem md="12" Style="padding:3px !important">
                                            <MudSelect T="ServiceType" Label="Fuente" Margin="Margin.Dense" Dense="true" Variant="Variant.Outlined" @bind-Value="_modelFilter.ServiceType">
                                                @foreach (ServiceType dt in Enum.GetValues(typeof(ServiceType)))
                                                {
                                                    <MudSelectItem Value="@(dt)">@(dt.ToDescriptionString())</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>

                                    </MudGrid>
                                </MudItem>

                                <MudItem md="2" Style="margin-top:12px !important">
                                    <MudGrid>
                                        <MudItem md="12" Style="margin-top: 10px !important;">
                                            <MudTooltip Text="Buscar" Arrow="true" Placement="Placement.Top" Color="Color.Default">
                                                <MudIconButton Disabled="@(_loading)" Style="margin-right: 8px;" ButtonType="ButtonType.Submit" Icon="@Icons.Material.Filled.Search" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" />
                                            </MudTooltip>
                                            <MudTooltip Text="Eliminar" Arrow="true" Placement="Placement.Top" Color="Color.Default" Style="margin-top: 10px !important;">
                                                <MudIconButton Disabled="@(_loading)" ButtonType="ButtonType.Button" Icon="@Icons.Material.Filled.Clear" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="()=>OnReset()" />
                                            </MudTooltip>
                                        </MudItem>
                                       
                                    </MudGrid>

                                </MudItem>


                            </MudGrid>


                             <MudGrid>

                                <MudItem md="4">
                                    <MudRadioGroup @bind-SelectedOption="expiration" Variant="Variant.Outlined">
                                        <MudRadio Option="0" Color="Color.Primary" Dense="true">Todos</MudRadio>
                                        <MudRadio Option="1" Color="Color.Success" Dense="false">Vigentes</MudRadio>
                                        <MudRadio Option="2" Color="Color.Error" Dense="false">Caducados</MudRadio>
                                    </MudRadioGroup>
                                </MudItem>

                            </MudGrid>

                        </MudCardContent>

                    </MudCard>
                </EditForm>

            </ChildContent>
        </MudExpansionPanel>

    </MudCardContent>

</MudCard>



@*<EditForm Elevation="25" Model="this" OnValidSubmit="OnSearch" style="margin-top:10px !important;">
    <MudCard Elevation="25">
        <MudCardContent>

            <MudGrid>

                <MudItem md="3" Style="margin-top:12px !important">
                    <MudTextField HelperText="No.Registro / Nombre / Principio Activo / Fabricante" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="_modelFilter.Term" Label="Buscar" />
                </MudItem>

                 <MudItem md="5">
                    <MudGrid>
                        <MudItem md="6">
                            <MudDateRangePicker Culture="@CultureInfo.GetCultureInfo("es-Es")" DateFormat="dd/MM/yyyy" Label="Fecha de Emisión:"  @bind-DateRange="dateRange" />
                        </MudItem>
                        <MudItem md="6">
                             <MudDateRangePicker Culture="@CultureInfo.GetCultureInfo("es-Es")" DateFormat="dd/MM/yyyy" Label="Fecha de Expiración:" @bind-DateRange="expirationRange" />
                        </MudItem>
                    </MudGrid>
                </MudItem>
                <MudItem md="2" Style="margin-top:20px !important">
                    <MudGrid>
                       
                        <MudItem md="12" Style="padding:3px !important">
                        <MudSelect T="ServiceType" Label="Fuente" Margin="Margin.Dense" Dense="true" Variant="Variant.Outlined" @bind-Value="_modelFilter.ServiceType">
                            @foreach (ServiceType dt in Enum.GetValues(typeof(ServiceType)))
                                {
                                    <MudSelectItem Value="@(dt)">@(dt.ToDescriptionString())</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                     
                    </MudGrid>
                </MudItem>

              

                <MudItem md="2" Style="margin-top:12px !important">
                    <MudGrid>
                        <MudItem md="12" Style="margin-top: 10px !important;">
                            <MudTooltip Text="Buscar" Arrow="true" Placement="Placement.Top" Color="Color.Default">
                                <MudIconButton Disabled="@(_loading)" Style="margin-right: 8px;" ButtonType="ButtonType.Submit" Icon="@Icons.Material.Filled.Search" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" />
                            </MudTooltip>
                            <MudTooltip Text="Eliminar" Arrow="true" Placement="Placement.Top" Color="Color.Default" Style="margin-top: 10px !important;">
                                <MudIconButton Disabled="@(_loading)" ButtonType="ButtonType.Button" Icon="@Icons.Material.Filled.Clear" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="()=>OnReset()" />
                            </MudTooltip>
                        </MudItem>
                      
                    </MudGrid>

                </MudItem>


            </MudGrid>

        </MudCardContent>

    </MudCard>
</EditForm>
*@

<MudTable Elevation="25" Style="margin-bottom:80px !important;" @ref="_table" Striped="true" SortLabel="name" LoadingProgressColor="Color.Primary" Dense="true" Hover="true" ServerData="@(new Func<TableState, Task<TableData<AigRecord>>>(DoFetchData))" Breakpoint="Breakpoint.Sm">

    <HeaderContent>
       @* <MudTh style="width:3px;"></MudTh>
        <MudTh style="width:3px;"></MudTh>*@
        <MudTh><MudInputLabel Style="width:3px"></MudInputLabel></MudTh>
        <MudTh><MudInputLabel Style="width:3px"></MudInputLabel></MudTh>
        <MudTh style="width:60px;"><MudTableSortLabel SortLabel="numReg" T="AigRecord">Registro</MudTableSortLabel></MudTh>
        <MudTh style="width:100px;"><MudTableSortLabel SortLabel="dateOfIssue" T="AigRecord">Emisión</MudTableSortLabel></MudTh>
        <MudTh style="width:100px;"><MudTableSortLabel SortLabel="expirationDate" T="AigRecord">Expiración</MudTableSortLabel></MudTh>
        <MudTh style="width:300px;"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortLabel="name" T="AigRecord">Medicamento</MudTableSortLabel></MudTh>
        <MudTh style="width:300px;">Principio Activo</MudTh>
        <MudTh>Fabricante</MudTh>
        <MudTh style="width:20px;"><MudTableSortLabel T="AigRecord" SortLabel="updated">Actualizado</MudTableSortLabel></MudTh>
       @* <MudTh style="width:100px;">Fuente</MudTh>*@
        <MudTh><MudInputLabel Style="width:100px">Fuente</MudInputLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudIconButton Icon="@(!context.ShowDetails?Icons.Filled.ArrowCircleRight:@Icons.Filled.ArrowCircleDown)" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(() => context.ShowDetails=!context.ShowDetails)" />
        </MudTd>
        <MudTd>
            <MudMenu Icon="@Icons.Material.Filled.Settings" Color="Color.Default">
                <MudMenuItem Icon="@Icons.Material.Filled.Edit" OnClick="@(() => Edit(@context.Id))" OnTouch="@(() => Edit(@context.Id))">Editar</MudMenuItem>

                @if (!string.IsNullOrEmpty(context.DataSheetURL))
                {
                    <MudMenuItem Target="_blank" IconColor="Color.Primary" Icon="@Icons.Filled.PictureAsPdf"
                                 Link="@($"{_appConfiguration.ApiUrl}{AppConstants.AigRecordManagerEndpoints.DataSheetURL(context.DataSheetURL)}")">
                        Monografía
                    </MudMenuItem>
                }
                @if (!string.IsNullOrEmpty(context.ProspectusURL))
                {
                    <MudMenuItem Target="_blank" IconColor="Color.Primary" Icon="@Icons.Filled.PictureAsPdf"
                                 Link="@($"{_appConfiguration.ApiUrl}{AppConstants.AigRecordManagerEndpoints.ProspectusURL(context.ProspectusURL)}")">
                        Prospecto
                    </MudMenuItem>
                }

            </MudMenu>
        </MudTd>
        <MudTd DataLabel="No. Registro">@context.Numero</MudTd>
        <MudTd DataLabel="Fech. Emisión">
            @if (context.FechaExpedicion != null)
            {
                <MudBadge Content="@(string.Format("{0:dd/MM/yyyy}", @context.FechaExpedicion))" Color="Color.Info" Overlap="true" Class="mx-2 my-2">
                </MudBadge>
            }
            else
            {
                <MudBadge Content="@("---")" Color="Color.Default" Overlap="true" Class="mx-2 my-2">
                </MudBadge>
            }
         </MudTd>
        <MudTd DataLabel="Fech. Expiración">
            @if (context.FechaVencimiento != null)
            {
                @if (DateTime.Now > context.FechaVencimiento)
                {
                    <MudTooltip Text="Medicamento caducado" Arrow="true" Placement="Placement.Top" Color="Color.Default">
                        <MudBadge Content="@(string.Format("{0:dd/MM/yyyy}", context.FechaVencimiento))" Color="Color.Default" Overlap="true">
                            <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.Warning" Color="Color.Error" />
                        </MudBadge>
                    </MudTooltip>

                }
                else
                {
                    <MudTooltip Arrow="true" Placement="Placement.Top" Color="Color.Default">
                        <MudBadge Content="@(string.Format("{0:dd/MM/yyyy}", context.FechaVencimiento))" Color="Color.Default" Overlap="true">
                            <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Tertiary" />
                        </MudBadge>
                    </MudTooltip>

                }
            }
            else
            {
                <MudBadge Content="@("---")" Color="Color.Default" Overlap="true" Class="mx-2 my-2">
                </MudBadge>
            }
           
        </MudTd>
        <MudTd DataLabel="Medicamento">@context.Producto?.Nombre</MudTd>
        <MudTd DataLabel="Principio Activo">@context.Producto?.PrincipioActivo</MudTd>
        <MudTd DataLabel="Fabricante">@context.Fabricante?.Nombre</MudTd>
        <MudTd DataLabel="Actualizado">@(string.Format("{0:dd/MM/yyyy}", context.FechaUltimaActualizacion))</MudTd>
        <MudTd DataLabel="Fuente">@context.Servicio.ToDescriptionString()</MudTd>
    </RowTemplate>
    <ChildRowContent>
        @if (context.ShowDetails)
        {
            <MudTr>
                <td colspan="10">

                    <div style="background-color: #f2eefc;" _ngcontent-lil-c210="" class="py-4 d-flex ng-star-inserted">

                        <div _ngcontent-lil-c210="" class="mx-4">
                            <div _ngcontent-lil-c210="" class="d-flex mb-2">

                                @if (!string.IsNullOrEmpty(@context.PictureData))
                                {
                                    <a target="_blank" href="@context.PictureData" download>
                                        <img src="@context.PictureData" Width="300" Height="250" Elevation="25" Class="rounded-lg" />
                                    </a>
                                }
                                else
                                {

                                    <img src="/media/no-image.png" Width="300" Height="250" Elevation="25" Class="rounded-lg" />
                                }

                            </div>

                        </div>


                        <div _ngcontent-lil-c210="" class="mx-4">
                            

                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold; margin-right: 5px;">
                                    Registro:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @(!string.IsNullOrEmpty(@context.Numero) ? @context.Numero : "-")
                                </span>
                            </div>

                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold; margin-right: 5px;">
                                    Renovación:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @(!string.IsNullOrEmpty(@context.RenovacionTexto) ? @context.RenovacionTexto : "-")
                                </span>
                            </div>
                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold; margin-right: 5px;">
                                    Estado:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @(!string.IsNullOrEmpty(context.Estado) ? context.Estado : "-")
                                </span>
                            </div>

                            <hr>

                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold;margin-right: 5px;">
                                    Envase:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @(!string.IsNullOrEmpty(@context.Producto?.DescripcionEnvase) ? @context.Producto?.DescripcionEnvase : "-")
                                </span>
                            </div>
                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold;margin-right: 5px;">
                                    Clasificaciónn:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @(!string.IsNullOrEmpty(@context.Producto?.ClasificacionMedica) ? @context.Producto?.ClasificacionMedica : "-")
                                </span>
                            </div>
                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold;margin-right: 5px;">
                                    Venta:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @(!string.IsNullOrEmpty(@context.Producto?.CondicionVenta) ? @context.Producto?.CondicionVenta : "-")
                                </span>
                            </div>

                            <hr>

                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold;margin-right: 5px;">
                                    Forma Farmacéutica:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @(!string.IsNullOrEmpty(context.Producto?.FormaFarmaceutica) ? context.Producto?.FormaFarmaceutica : "-")
                                </span>
                            </div>
                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold;margin-right: 5px;">
                                    Vía de Administración:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @(!string.IsNullOrEmpty(context.Producto?.ViaAdministracion) ? context.Producto?.ViaAdministracion : "-")
                                </span>
                            </div>
                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold;margin-right: 5px;">
                                    Vida Útil
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @(!string.IsNullOrEmpty(context.Producto?.VidaUtil) ? context.Producto?.VidaUtil : "-")
                                </span>
                            </div>
                            @if (context.Presentaciones?.Count > 0)
                            {
                                <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                    <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold;margin-right: 5px;">
                                        Presentaciones:
                                    </span>
                                    <span _ngcontent-lil-c210="" class="text-dark-50">

                                        <ul>
                                            @foreach (var ex in context.Presentaciones)
                                            {
                                                <li>@($"{ex.Presentacion}({ex.Tipo})")</li>
                                            }
                                        </ul>

                                    </span>
                                </div>
                            }
                            @if (context.Excipientes?.Count > 0)
                            {
                                <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                    <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="margin-right: 5px;">
                                        Excipientes:
                                    </span>
                                    <span _ngcontent-lil-c210="" class="text-dark-50">

                                        <ul>
                                            @foreach (var ex in context.Excipientes)
                                            {
                                                <li>@($"{ex.Descripcion}({ex.Concentracion})")</li>
                                            }
                                        </ul>

                                    </span>
                                </div>
                            }

                            <hr>

                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold;margin-right: 5px;">
                                    Fabricante:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @(!string.IsNullOrEmpty(@context.Fabricante?.Nombre) ? @context.Fabricante?.Nombre : "-")
                                </span>
                            </div>
                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold;margin-right: 5px;">
                                    Dirección:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @(!string.IsNullOrEmpty(@context.Fabricante?.Direccion) ? @context.Fabricante?.Direccion : "-")
                                </span>
                            </div>
                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold;margin-right: 5px;">
                                    País:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @(!string.IsNullOrEmpty(@context.Fabricante?.Pais) ? @context.Fabricante?.Pais : "-")
                                </span>
                            </div>

                            @if (!string.IsNullOrEmpty(@context.Distribuidor?.NombreDistribuidorNacional))
                            {

                                <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                    <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold;margin-right: 5px;">
                                        Distribuidor:
                                    </span>
                                    <span _ngcontent-lil-c210="" class="text-dark-50">
                                        @(!string.IsNullOrEmpty(@context.Distribuidor?.NombreDistribuidorNacional) ? @context.Distribuidor?.NombreDistribuidorNacional : "-")
                                    </span>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(@context.Distribuidor?.NombreTitular))
                            {
                                <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                    <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold;margin-right: 5px;">
                                        Titular:
                                    </span>
                                    <span _ngcontent-lil-c210="" class="text-dark-50">
                                        @(!string.IsNullOrEmpty(@context.Distribuidor?.NombreTitular) ? @context.Distribuidor?.NombreTitular : "-")
                                    </span>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(@context.Distribuidor?.NombreAcondicionadorPrimario))
                            {
                                <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                    <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold;margin-right: 5px;">
                                        Acondicionador Primario:
                                    </span>
                                    <span _ngcontent-lil-c210="" class="text-dark-50">
                                        @(
                                            !string.IsNullOrEmpty(@context.Distribuidor?.NombreAcondicionadorPrimario) ? @context.Distribuidor?.NombreAcondicionadorPrimario : "-"
                                            )
                                    </span>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(@context.Distribuidor?.PaisAcondicionadorPrimario))
                            {
                                <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                    <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold;margin-right: 5px;">
                                        País Acondicionador Primario:
                                    </span>
                                    <span _ngcontent-lil-c210="" class="text-dark-50">
                                        @(!string.IsNullOrEmpty(@context.Distribuidor?.PaisAcondicionadorPrimario) ? @context.Distribuidor?.PaisAcondicionadorPrimario : "-")
                                    </span>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(@context.Distribuidor?.NombreAcondicionadorSecundario))
                            {
                                <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                    <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold;margin-right: 5px;">
                                        Acondicionador Secundario:
                                    </span>
                                    <span _ngcontent-lil-c210="" class="text-dark-50">
                                        @(!string.IsNullOrEmpty(@context.Distribuidor?.NombreAcondicionadorSecundario) ? @context.Distribuidor?.NombreAcondicionadorSecundario : "-")
                                    </span>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(@context.Distribuidor?.PaisAcondicionadorSecundario))
                            {
                            <div _ngcontent-lil-c210="" class="d-flex mb-2">
                                <span _ngcontent-lil-c210="" class="font-weight-bold font-size-sm" style="font-weight:bold;margin-right: 5px;">
                                        País Acondicionador Secundario:
                                </span>
                                <span _ngcontent-lil-c210="" class="text-dark-50">
                                    @(!string.IsNullOrEmpty(@context.Distribuidor?.PaisAcondicionadorSecundario) ? @context.Distribuidor?.PaisAcondicionadorSecundario : "-")
                                </span>
                            </div>
                            }

                        </div>


                    
                    </div>

                </td>
            </MudTr>
        }
    </ChildRowContent>
    <NoRecordsContent>
        <MudText>No se encontraron elementos</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Cargando...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager HorizontalAlignment="HorizontalAlignment.Center" Class="primary" InfoFormat="{first_item}-{last_item} de {all_items}" PageSizeOptions="new int[] {8,10, 25, 50, 100, 250 }" RowsPerPageString="Filas" />
    </PagerContent>

</MudTable>


@code {
    private bool filterOpen = false;
    private PaginatedResult<AigRecord> _paginatedResult;
    private static IEnumerable<AigRecord> List { get; set; }
    private MudTable<AigRecord> _table;
    private DateRange dateRange;
    private DateRange expirationRange;
    protected MedicamentFilter _modelFilter;
    public int expiration { get; set; } = 0;
    protected bool _loading = false;
    protected async override Task OnInitializedAsync()
    {
        _modelFilter = new MedicamentFilter();
        dateRange = new DateRange();
        expirationRange = new DateRange();
        base.OnInitialized();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _table.SetRowsPerPage(10);
        }
    }
    private async Task RefresView(bool state)
    {
        _loading = state;
        await this.InvokeAsync(StateHasChanged);
    }
    private async Task<TableData<AigRecord>> DoFetchData(TableState state)
    {
        var result = new TableData<AigRecord>();
        await RefresView(true);
        var sorting = new List<SortingOption>();
        var filters = new List<FilteringOption>();
        if (state.SortDirection != SortDirection.None)
        {
            var sortDirection = state.SortDirection == SortDirection.Descending ? SortingDirection.DESC : SortingDirection.ASC;
            sorting = new() { new SortingOption { Field = state.SortLabel, Direction = sortDirection } };
        }
        if (!string.IsNullOrEmpty(_modelFilter.Term))
            filters.Add(new FilteringOption { Field = "term", Operator = FilteringOperator.Contains, Value = _modelFilter.Term.Trim() });
        if (_modelFilter.StartDate != null && _modelFilter.EndDate != null)
        {
            filters.Add(new FilteringOption { Field = "startDateOfIssue", Operator = FilteringOperator.GreaterThanEqual, Value = _modelFilter.StartDate.Value.ToString("dd/MM/yyyy") });
            filters.Add(new FilteringOption { Field = "endDateOfIssue", Operator = FilteringOperator.LessThanEqual, Value = _modelFilter.EndDate.Value.ToString("dd/MM/yyyy") });
        }
        if (_modelFilter.StartExpirationDate != null && _modelFilter.EndExpirationDate != null)
        {
            filters.Add(new FilteringOption { Field = "startExpirationDate", Operator = FilteringOperator.GreaterThanEqual, Value = _modelFilter.StartExpirationDate.Value.ToString("dd/MM/yyyy") });
            filters.Add(new FilteringOption { Field = "endDateExpirationDate", Operator = FilteringOperator.LessThanEqual, Value = _modelFilter.EndExpirationDate.Value.ToString("dd/MM/yyyy") });
        }
       
        filters.Add(new FilteringOption { Field = "expiration", Operator = FilteringOperator.GreaterThanEqual, Value = expiration.ToString() });
        
        filters.Add(new FilteringOption { Field = "service", Operator = FilteringOperator.Contains, Value = _modelFilter.ServiceType.ToString() });
       
        var args = new PageSearchArgs()
            {
                PageIndex = state.Page + 1,
                PageSize = state.PageSize,
                SortingOptions = sorting,
                FilteringOptions = filters
            };
        var paginatedResult = await _manager.AdminSearchAsync(args);
        List = paginatedResult.Data;
        result = new TableData<AigRecord>() { TotalItems = paginatedResult.TotalCount, Items = paginatedResult.Data };

        await RefresView(false);
        return result;
    }
    private void ShowBtnPress(long nr)
    {
        var item = List.First(f => f.Id == nr);
        item.ShowDetails = !item.ShowDetails;
    }
    private async void OnSearch()
    {
        _modelFilter.StartDate = dateRange.Start;
        _modelFilter.EndDate = dateRange.End;
        _modelFilter.StartExpirationDate = expirationRange.Start;
        _modelFilter.EndExpirationDate = expirationRange.End;
        await _table.ReloadServerData();
    }
    private async Task OnReset()
    {
        _modelFilter = new MedicamentFilter();
        dateRange = new DateRange();
        expirationRange = new DateRange();
        await _table.ReloadServerData();
    }
    private async Task Edit(long id = 0)
    {
        var parameters = new DialogParameters { ["_id"] = id };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<Edit>("Editar", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
            await _table.ReloadServerData();
    }

    private async Task Refresh()
    {
        await _table.ReloadServerData();
        await this.InvokeAsync(StateHasChanged);
    }
}

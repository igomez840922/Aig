@page "/users"
@attribute [Authorize]
@using Aig.Farmacoterapia.Domain.Common
@using Aig.Farmacoterapia.Domain.Entities.Enums
@using Aig.Farmacoterapia.Domain.Extensions
@using Aig.Farmacoterapia.Domain.Interfaces
@using Aig.Farmacoterapia.Domain.Models
@using Aig.Farmacoterapia.Wasm.Client.Components.User
@using Aig.Farmacoterapia.Wasm.Client.Extensions
@using Aig.Farmacoterapia.Wasm.Client.Infrastructure.Managers.User
@using System.Security.Claims
@inject IUserManager _manager;

<PageTitle>Users</PageTitle>

@if (_loading)
{
    <div style="position:absolute; top: 45vh;left: 0px; width: 100%; text-align: center">
        <div align="center" class="cssload-fond">
            <div class="cssload-container-general">
                <div class="cssload-internal"><div class="cssload-ballcolor cssload-ball_1"> </div></div>
                <div class="cssload-internal"><div class="cssload-ballcolor cssload-ball_2"> </div></div>
                <div class="cssload-internal"><div class="cssload-ballcolor cssload-ball_3"> </div></div>
                <div class="cssload-internal"><div class="cssload-ballcolor cssload-ball_4"> </div></div>
            </div>
        </div>
    </div>
}


<MudCard Elevation="25">
    <MudCardContent>

        <MudGrid>
           <MudItem xs="12" md="12" >
                <MudToolBar Style="height:25px !important;">
                    <MudText Color="Color.Primary">
                        <MudIcon Icon="@Icons.Material.Filled.Groups" Color="Color.Default" Style="margin-bottom: 5px;"></MudIcon>
                        Usuarios
                    </MudText>
                    <MudSpacer />
                    <MudTooltip Text="Nuevo" Arrow="true" Placement="Placement.Left" Color="Color.Default">
                        <MudIconButton ButtonType="ButtonType.Button" Disabled="@(_loading || !IsEdit())" Icon="@Icons.Material.Filled.PersonAdd" Variant="Variant.Outlined" Color="Color.Default" Size="Size.Small" @onclick="@(() => Add())" />
                    </MudTooltip>
                </MudToolBar>
            </MudItem>
        </MudGrid>

    </MudCardContent>

</MudCard>

<EditForm Model="this" OnValidSubmit="OnSearch" style="margin-top:10px !important;">
    <MudCard Elevation="25">
        <MudCardContent>

            <MudGrid>

                <MudItem md="4">
                    <MudTextField OnClearButtonClick="OnSearch" Clearable="true" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="_searchString" Label="Buscar" />
                </MudItem>
                <MudItem md="4">
                    <MudGrid>
                        <MudItem md="6" Style="margin-top: 10px !important;">
                            <MudTooltip Text="Buscar" Arrow="true" Placement="Placement.Top" Color="Color.Default">
                                <MudIconButton Disabled="@(_loading)" Style="margin-right: 8px;" ButtonType="ButtonType.Submit" Icon="@Icons.Material.Filled.Search" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" />
                            </MudTooltip>
                            <MudTooltip Text="Eliminar" Arrow="true" Placement="Placement.Top" Color="Color.Default" Style="margin-top: 10px !important;">
                                <MudIconButton Disabled="@(_loading)" ButtonType="ButtonType.Button" Icon="@Icons.Material.Filled.Clear" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="()=>OnReset()" />
                            </MudTooltip>
                        </MudItem>
                        <MudItem md="6">
                        </MudItem>
                    </MudGrid>

                </MudItem>
                <MudItem md="4">

                </MudItem>

            </MudGrid>

        </MudCardContent>

    </MudCard>
</EditForm>

@if (_paginatedResult != null && _paginatedResult.Data.Count > 0)
{

    <MudGrid Style="margin-top:5px !important;" Spacing="5">
        @if (_paginatedResult != null && _paginatedResult.Data.Count > 0)
        {

            @foreach (var dt in _paginatedResult.Data)
            {
                <MudItem xs="12" sm="4" md="3">
                    <MudCard Elevation="25" Class="align-content-center align-self-center">
                        <MudCardContent Style="padding: 0.5rem;display: flex;flex-wrap: nowrap;align-content: center;justify-content: flex-start; align-items: center;">
                            <MudGrid Style="padding: 1rem;">
                            </MudGrid>
                            <MudGrid Style="display: contents;">
                                <MudItem>
                                    <MudTooltip Text="Editar Perfil" Arrow="true" Placement="Placement.Bottom" Color="Color.Default" Typo="Typo.h5">
                                        <MudMenu AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.TopRight" Icon="@Icons.Material.Filled.MoreVert" Size="Size.Medium" Color="Color.Default" Style="font-size:2rem;">
                                            <MudMenuItem Disabled="!IsEdit()" Icon="@Icons.Material.Filled.CoPresent" OnClick="@(() => Edit(@dt.UserName))" OnTouch="@(() => Edit(@dt.UserName))">Perfil</MudMenuItem>
                                            <MudMenuItem Disabled="!IsEdit()" Style="border-top:1px solid #E4E6EF !important;" Icon="@Icons.Material.Filled.Key" OnClick="@(() => Password(@dt.UserName))" OnTouch="@(() => Password(@dt.UserName))">Contraseña</MudMenuItem>
                                            <MudMenuItem Disabled="!IsEdit()" Style="border-top:1px solid #E4E6EF !important;" Icon="@Icons.Material.Filled.Group" OnClick="@(() => Role(@dt.UserName))" OnTouch="@(() => Role(@dt.UserName))">Rol</MudMenuItem>
                                            <MudMenuItem Disabled="!IsEdit()" Style="border-top:1px solid #E4E6EF !important;" Icon="@Icons.Material.Filled.Delete" OnClick="@(() => Delete(@dt.Id))" OnTouch="@(() => Delete(@dt.Id))">Eliminar</MudMenuItem>
                                        </MudMenu>
                                    </MudTooltip>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                        <MudCardContent Style="padding-top: 0px;display: flex;align-content: center;align-items: center;justify-content: center;flex-wrap: wrap;">
                            @if (string.IsNullOrEmpty(dt.ProfilePicture))
                            {
                                <MudAvatar Elevation="25" Style="background-color: #004b9c ; height:140px; width:140px; border-color:white;border-width:2.5px;display: flex; align-content: center;justify-content: center; flex-wrap: wrap;font-size: 40px;" Color="Color.Default">@dt.FirstName?[..1]?.ToUpper()  </MudAvatar>
                            }
                            else
                            {
                                <MudAvatar Image="@dt.ProfilePicture" Elevation="25" Style="height:140px; width:140px; border-color:white;border-width:2.5px;display: flex; align-content: center;justify-content: center; flex-wrap: wrap;"> </MudAvatar>
                            }
                        </MudCardContent>
                        <MudCardContent Style="padding:5px">
                            <MudText Align="Align.Center" Color="Color.Default"><b>@dt.FullName</b></MudText>
                            <MudText Style="margin-top:5px;" Align="Align.Center" Color="Color.Default"><b>Correo:</b> @dt.Email</MudText>
                            <MudText Style="margin-top:5px;margin-bottom: 10px;" Align="Align.Center" Color="Color.Default"> <b>Teléfono:</b>@dt.PhoneNumber</MudText>
                            <MudCardContent Justify="Justify.SpaceEvenly" Style="background-color: #f0f0f0;display: flex;justify-content: space-evenly!important;">
                                <MudText Style="font-size: 1rem; margin-top:10px;color:#004b9c  !important" Align="Align.Center">@dt.UserRoleDescription</MudText>
                            </MudCardContent>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

            }

        }
    </MudGrid>
    <MudGrid Style="margin-bottom:100px !important;">
        <MudItem>
            <MudPagination Selected="@_paginatedResult.CurrentPage" SelectedChanged="PageChanged" Variant="Variant.Outlined" Count="@_paginatedResult.TotalPages" Class="pa-4" />
        </MudItem>
    </MudGrid>

}


@*@if (_paginatedResult != null && _paginatedResult.Data.Count > 0)
{
    <MudGrid Style="margin-top:5px !important;">
        <MudItem>

            <MudGrid Spacing="5">
                @foreach (var dt in _paginatedResult.Data)
                {
                    <MudItem Style="display:flex;">
                        <MudCard Elevation="25" Class="d-flex">
                            <MudCardHeader>
                                <CardHeaderAvatar>

                                    @if (string.IsNullOrEmpty(dt.ProfilePicture))
                                    {

                                        <MudAvatar Size="Size.Large" Color="Color.Secondary"> @dt.FullName?[..1]?.ToUpper() </MudAvatar>
                                    }
                                    else
                                    {
                                        <MudAvatar Size="Size.Large" Image="@dt.ProfilePicture"></MudAvatar>
                                    }

                                </CardHeaderAvatar>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.body1">@dt.FullName</MudText>
                                    <MudText Typo="Typo.body2">
                                        <MudIcon Icon="@Icons.Material.Filled.Group" Color="Color.Default" Style="margin-bottom: 5px;"></MudIcon>
                                        @dt.UserRoleDescription
                                    </MudText>
                                    <MudText Typo="Typo.body2">
                                        <MudIcon Icon="@Icons.Material.Filled.Email" Color="Color.Default" Style="margin-bottom: 5px;"></MudIcon>
                                        @dt.Email
                                    </MudText>
                                    <MudText Typo="Typo.body2">
                                        <MudIcon Icon="@Icons.Material.Filled.Phone" Color="Color.Default" Style="margin-bottom: 5px;"></MudIcon>
                                        @dt.PhoneNumber
                                    </MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudMenu Icon="@Icons.Material.Filled.Settings" Color="Color.Default">
                                        <MudMenuItem Disabled="!IsEdit()" Icon="@Icons.Material.Filled.CoPresent" OnClick="@(() => Edit(@dt.UserName))" OnTouch="@(() => Edit(@dt.UserName))">Perfil</MudMenuItem>
                                        <MudMenuItem Disabled="!IsEdit()" Style="border-top:1px solid #E4E6EF !important;" Icon="@Icons.Material.Filled.Key" OnClick="@(() => Password(@dt.UserName))" OnTouch="@(() => Password(@dt.UserName))">Contraseña</MudMenuItem>
                                        <MudMenuItem Disabled="!IsEdit()" Style="border-top:1px solid #E4E6EF !important;" Icon="@Icons.Material.Filled.Group" OnClick="@(() => Role(@dt.UserName))" OnTouch="@(() => Role(@dt.UserName))">Rol</MudMenuItem>
                                        <MudMenuItem Disabled="!IsEdit()" Style="border-top:1px solid #E4E6EF !important;" Icon="@Icons.Material.Filled.Delete" OnClick="@(() => Delete(@dt.Id))" OnTouch="@(() => Delete(@dt.Id))">Eliminar</MudMenuItem>
                                    </MudMenu>
                                </CardHeaderActions>
                            </MudCardHeader>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>

            <MudGrid  Style="margin-bottom:100px !important;">
                <MudItem>
                    <MudPagination Selected="@_paginatedResult.CurrentPage" SelectedChanged="PageChanged" Variant="Variant.Outlined" Count="@_paginatedResult.TotalPages" Class="pa-4" />
                </MudItem>
            </MudGrid>

        </MudItem>
    </MudGrid>

}*@

@code {

    private PaginatedResult<UserModelOutput> _paginatedResult;
    private MudTable<UserModelOutput> _table;
    private ClaimsPrincipal _user;
    bool _loading = false;
    private string _searchString;

    private async Task RefresView(bool state)
    {
        _loading = state;
        await this.InvokeAsync(StateHasChanged);
    }
   
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender){   
            _user = await _authenticationManager.CurrentUser();
            _searchString = string.Empty;
            //_bus.Subscribe<IResult>(UserAddedHandler);
            _paginatedResult = new PaginatedResult<UserModelOutput>(){PageSize=12};
            await DoFetchData();
        }
        base.OnInitialized();
    }

     protected bool IsEdit()
    {
        var disabled=true;
        if (_user == null) return disabled;
        var role= _user.GetRole();
        var userRole = role.ParseEnum<RoleType>();
        return (userRole== RoleType.Admin);
    }

    //private  void UserAddedHandler(MessageArgs args)
    //{
    //    var result = args.GetMessage<IResult>();
    //    if (result.Succeeded){
    //       Task.Run(async () => await DoFetchData());
    //    }
    //}

    private async Task DoFetchData()
    {

        await RefresView(true);
        var sorting = new List<SortingOption>() { new SortingOption { Field = "Name", Direction = SortingDirection.ASC } };
        var filters = new List<FilteringOption>();
        if (!string.IsNullOrEmpty(_searchString))
            filters.Add(new FilteringOption { Field = "term", Operator = FilteringOperator.Contains, Value = _searchString.Trim() });
        var args = new PageSearchArgs()
            {
                PageIndex = _paginatedResult.CurrentPage,
                PageSize = _paginatedResult.PageSize,
                SortingOptions = sorting,
                FilteringOptions = filters
            };
        _paginatedResult = await _manager.SearchAsync(args);
        _paginatedResult.Data = _paginatedResult.Data.Select(w => { w.ProfilePicture = string.IsNullOrEmpty(w.ProfilePicture) ? string.Empty : $"{_appConfiguration.ApiUrl}{AppConstants.UsersEndpoints.Avatar(w.ProfilePicture!)}"; return w; }).ToList();
        await RefresView(false);
    }

    private async void OnSearch()
    {
        await DoFetchData();
    }

    private async Task PageChanged(int i)
    {
        _paginatedResult.CurrentPage = i;
        await DoFetchData();
    }

    private async void OnReset()
    {
        _searchString = string.Empty;
        await DoFetchData();
    }

    private async Task Add()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<Add>("Nuevo", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
            await DoFetchData();
    }
    private async Task Edit(string username)
    {
        var parameters = new DialogParameters { ["username"]=username };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<Edit>("Editar", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
            await DoFetchData();
    }

    private async Task Password(string username)
    {
        var parameters = new DialogParameters { ["username"]=username };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<Password>("Password", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
            await DoFetchData();
    }

     private async Task Role(string username)
    {
        var parameters = new DialogParameters { ["username"]=username };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<Roles>("Roles", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
            await DoFetchData();
    }

    private async Task Delete(string id)
    {
        var parameters = new DialogParameters{
             { nameof(Shared.Dialogs.DeleteConfirmation.ContentText), string.Format("¿Estás seguro de querer eliminar el registro?", id) }
         };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<Shared.Dialogs.DeleteConfirmation>("Eliminar", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var response = await _manager.DeleteUserAsync(id);
            if (response.Succeeded)
                await DoFetchData();
            foreach (var message in response.Messages)
            {
                _snackBar.Add(message, response.Succeeded ? Severity.Success : Severity.Error);
            }
        }
    }
}

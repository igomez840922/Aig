@attribute [Authorize]
@using Aig.Farmacoterapia.Wasm.Client.Extensions
@using Aig.Farmacoterapia.Wasm.Client.Infrastructure.Managers.User
@using Aig.Farmacoterapia.Wasm.Client.Validation
@using Aig.Farmacoterapia.Domain.Common
@using Aig.Farmacoterapia.Domain.Entities.Enums
@using Aig.Farmacoterapia.Domain.Extensions
@using Aig.Farmacoterapia.Domain.Identity
@using Aig.Farmacoterapia.Domain.Interfaces
@using Blazored.FluentValidation
@inject IUserManager _manager;

<EditForm Model="@_userModel"  OnValidSubmit=@(async () => await SubmitAsync()) >
    <FluentValidationValidator @ref="_fluentValidation" Options="@(options => options.IncludeAllRuleSets())" />
    <MudDialog DefaultFocus="DefaultFocus.FirstChild">
      <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Key" Class="mr-3 mb-n1" />
                Editar contraseña
            </MudText>
        </TitleContent>
        <DialogContent>
            @if (_loading)
            {
                <div style="margin-left:45% !important;">
                    <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" />
                </div>
            }
            else
            {
                <MudGrid>

                    <MudItem xs="12" md="12">

                        <MudItem md="12" Style="padding:3px !important">
                            <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" For="@(() => _userModel.NewPassword)" @bind-Value="_userModel.NewPassword"
                                      Label="Contraseña" InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />
                        </MudItem>

                        <MudItem md="12" Style="padding:3px !important">
                            <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" For="@(() => _userModel.ConfirmNewPassword)" @bind-Value="_userModel.ConfirmNewPassword"
                                      Label="Confirmar Contraseña" InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />
                        </MudItem>

                    </MudItem>

                </MudGrid>
            }
        </DialogContent>
        <DialogActions >
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Default" OnClick="()=>Cancel()">Cancelar</MudButton>
             <MudButton Disabled="@(!Validate())" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Guardar</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>



@code {

    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }
    [Parameter] public string username { get; set; } = string.Empty;
    private FluentValidationValidator _fluentValidation;
    private ChangePasswordRequest _userModel = new ChangePasswordRequest();
    private bool _validated=>Validate();
    private bool _passwordVisibility;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
    private InputType _passwordInput = InputType.Password;
    bool _loading = false;

    protected override async Task OnInitializedAsync()
    { 
        await LoadDataAsync();
        base.OnInitialized();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            Validate();
    }
    void TogglePasswordVisibility()
    {
        if (_passwordVisibility)
        {
            _passwordVisibility = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordVisibility = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }
      private async Task RefresView(bool state)
    {
        _loading = state;
        await this.InvokeAsync(StateHasChanged);
    }
    private bool Validate()=>_fluentValidation.Validate();
  
    protected async Task SubmitAsync()
    {
        if (Validate()){
            var response = await _manager.ChangePasswordAsync(_userModel);
            if (response.Succeeded)
                MudDialog.Close();
            foreach (var message in response.Messages){
                _snackBar.Add(message, response.Succeeded ? Severity.Success : Severity.Error);
            }
        }
    }

    public void Cancel()
    {
        MudDialog.Cancel();
    }
   
  private async Task LoadDataAsync()
    {
        await RefresView(true);
        var response = await _manager.GetAsync(username);
        if (response.Succeeded) {
            _userModel.UserId = response.Data.Id;
        }
        await RefresView(false);
    }
}
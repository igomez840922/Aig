@attribute [Authorize]
@using Aig.Farmacoterapia.Domain.Entities.Enums
@using Aig.Farmacoterapia.Domain.Entities.Studies
@using Aig.Farmacoterapia.Domain.Entities.Studies.Enums
@using Aig.Farmacoterapia.Domain.Extensions
@using Aig.Farmacoterapia.Wasm.Client.Infrastructure.Managers.Studies
@using Aig.Farmacoterapia.Wasm.Client.Components.Studies
@using Aig.Farmacoterapia.Wasm.Client.Model
@using Aig.Farmacoterapia.Domain.Common
@using Aig.Farmacoterapia.Domain.Entities
@using System.Globalization
@inject IStudyManager _manager;

<PageTitle>Medicaments</PageTitle>

<style>

</style>

<MudCard Elevation="25">
    <MudCardContent>

        <MudGrid>
            <MudItem md="12">
                <MudToolBar Style="height:25px !important;">
                    <MudSpacer />
                    <MudTooltip Text="Nuevo" Arrow="true" Placement="Placement.Left" Color="Color.Default">
                        <MudIconButton ButtonType="ButtonType.Button" Disabled="@(_loading || !_edit )" Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Default" Size="Size.Small" @onclick="@(() => AddEdit(string.Empty))" />
                    </MudTooltip>
                </MudToolBar>
            </MudItem>
        </MudGrid>

    </MudCardContent>

</MudCard>
 
<MudTable Items="@_parent?.Documents"  Dense="true" Hover="true" Height="500px">
        <HeaderContent>
             <MudTh>Nombre del Documento</MudTh>
             <MudTh>Fichero Adjunto</MudTh>
             <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
             <MudTd DataLabel="Nombre del Documento">
                 @context.Nombre
            </MudTd>
            <MudTd DataLabel="Fichero Adjunt">
                <MudButton Variant="Variant.Text"
                    Color="Color.Info"
                    StartIcon="@Icons.Filled.FileDownload"
                    Size="Size.Small"
                    Link="@($"{_appConfiguration.ApiUrl}{AppConstants.EstudioEndpoints.DocumentURL(@context.Document!.FileName)}")" Target="_blank">
                    @context.Document!.FileName
                </MudButton>
            </MudTd>
           
          <MudTd>
               <MudButton Variant="Variant.Text"
                    Color="Color.Error"
                    StartIcon="@Icons.Filled.Delete"
                    Size="Size.Medium"
                    OnClick="@(() => Delete(@context.Id,@context.Document!.FileName))">
                </MudButton>
        </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No se encontraron elementos</MudText>
        </NoRecordsContent>
    </MudTable>

@code {
    [Parameter] public AigEstudio _parent { get; set; }
    [Parameter] public bool _edit { get; set; } = true;

    protected bool _loading = false;
    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
    }

    private async Task RefresView(bool state)
    {
        _loading = state;
        await this.InvokeAsync(StateHasChanged);
    }

    private async Task AddEdit(string id)
    { 
        var data = _parent.Medicamentos.Where(p => p.Id == id).FirstOrDefault();
        var parameters = data != null ? new DialogParameters { ["_modelData"] = data } :
              new DialogParameters { ["_modelData"] = new AigEstudioFile() {  Document = new UploadObject() } };
        var options = new DialogOptions {CloseOnEscapeKey=false, CloseButton = false, MaxWidth = MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<AddEditDocument>(string.IsNullOrEmpty(id) ? "Nuevo" : "Editar ", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var item = result.Data as AigEstudioFile;
            if (item != null) {
                var index= _parent.Documents!.FindIndex(p => p.Id == item.Id);
                if (index == -1){
                    _parent.Documents!.Add(item);
                }
                await RefresView(false);
            }
        }
            
    }

  private async Task Delete(string id,string file)
    {
        var parameters = new DialogParameters{
             { nameof(Shared.Dialogs.DeleteConfirmation.ContentText), string.Format("¿Estás seguro de querer eliminar el documento?", id) }
         };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<Shared.Dialogs.DeleteConfirmation>("Eliminar", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            if (!string.IsNullOrEmpty(file)){
                await _manager.DeleteFileAsync(UploadType.Documents, file);
               _parent.Documents!.RemoveAll(p => p.Id == id);
                await _manager.UpdateAsync(_parent);
            }
             await RefresView(false);
        }
    }
}

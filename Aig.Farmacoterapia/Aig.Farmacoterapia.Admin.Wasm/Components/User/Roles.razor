@attribute [Authorize]
@using Aig.Farmacoterapia.Admin.Wasm.Extensions
@using Aig.Farmacoterapia.Admin.Wasm.Infrastructure.Managers.User
@using Aig.Farmacoterapia.Admin.Wasm.Validation
@using Aig.Farmacoterapia.Domain.Common
@using Aig.Farmacoterapia.Domain.Entities.Enums
@using Aig.Farmacoterapia.Domain.Extensions
@using Aig.Farmacoterapia.Domain.Identity
@using Aig.Farmacoterapia.Domain.Interfaces
@using Blazored.FluentValidation
@inject IUserManager _manager;

<EditForm Model="@_userModel" OnValidSubmit=@(async () => await SubmitAsync())>
    <FluentValidationValidator @ref="_fluentValidation" Options="@(options => options.IncludeAllRuleSets())" />
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Group" Class="mr-3 mb-n1" />
                Editar Rol
            </MudText>
        </TitleContent>
        <DialogContent>

            
            @if (_loading)
            {
                 <div style="margin-left:45% !important;">
                    <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" />
                </div>
            }
            else
            {

            <MudGrid>

                <MudItem xs="12" md="12">

                    <MudItem md="12" Style="padding:3px !important">
                        <MudSelect T="RoleType" Label="Rol" Margin="Margin.Dense" Dense="true" Variant="Variant.Outlined" @bind-Value="_userModel.Role">
                            @foreach (RoleType dt in Enum.GetValues(typeof(RoleType)))
                            {
                                <MudSelectItem Value="@(dt)">@(dt.ToDescriptionString())</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                </MudItem>

            </MudGrid>

           }
        </DialogContent>
        <DialogActions>
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Default" OnClick="()=>Cancel()">Cancel</MudButton>
            <MudButton Disabled="@(!Validate())" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Actualizar</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {

    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }
    [Parameter] public string username { get; set; } = string.Empty;
    private FluentValidationValidator _fluentValidation;
    private UpdateUserRolesRequest _userModel = new UpdateUserRolesRequest();
    private bool _validated=>Validate();
    bool _loading = false;
    protected override async Task OnInitializedAsync()
    { 
        await LoadDataAsync();
        base.OnInitialized();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender){}
        Validate();
    }
   private async Task RefresView(bool state)
    {
        _loading = state;
        await this.InvokeAsync(StateHasChanged);
    }
    private bool Validate()=>_fluentValidation.Validate();

    protected async Task SubmitAsync()
    {
        if (Validate()){
            var response = await _manager.UpdateRolesAsync(_userModel);
            if (response.Succeeded)
                MudDialog.Close();
            foreach (var message in response.Messages){
                _snackBar.Add(message, response.Succeeded ? Severity.Success : Severity.Error);
            }
        }
    }

    public void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task LoadDataAsync()
    {   await RefresView(true);
        var response = await _manager.GetAsync(username);
        if (response.Succeeded) {
            _userModel.UserId = response.Data.Id;
            _userModel.Role = response.Data.Role;
        }
        await RefresView(false);
    }
}
@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace Aig.Auditoria.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Farmacias y Drogas</title>

    <!--begin::Fonts -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins:300,400,500,600,700|Roboto:300,400,500,600,700">
    <!--end::Fonts -->

    <base href="~/" />
    @if (Request.Path.Value.Contains("/login"))
    {
        <!--begin::Page Custom Styles(used by this page) -->
        <link href="assets/css/pages/login/login-5.css" rel="stylesheet" type="text/css" />

        <!--end::Page Custom Styles -->
        <!--begin::Global Theme Styles(used by all pages) -->
        <link href="assets/plugins/global/plugins.bundle.css" rel="stylesheet" type="text/css" />
        <link href="assets/css/style.bundle.css" rel="stylesheet" type="text/css" />

        <!--end::Global Theme Styles -->
        <!--begin::Layout Skins(used by all pages) -->
        <link href="assets/css/skins/header/base/light.css" rel="stylesheet" type="text/css" />
        <link href="assets/css/skins/header/menu/light.css" rel="stylesheet" type="text/css" />
        <link href="assets/css/skins/brand/dark.css" rel="stylesheet" type="text/css" />
        <link href="assets/css/skins/aside/dark.css" rel="stylesheet" type="text/css" />        
    }
    else
    {
        <!--begin::Fonts -->
        <link href="assets/plugins/global/plugins.bundle.css" rel="stylesheet" type="text/css" />
        <link href="assets/css/style.bundle.css" rel="stylesheet" type="text/css" />

        <!--end::Global Theme Styles --> <!--begin::Layout Skins(used by all pages) -->
        <!--begin::Layout Themes(used by all pages)-->
		@*<link href="assets/css/themes/layout/header/base/light.css" rel="stylesheet" type="text/css" />
		<link href="assets/css/themes/layout/header/menu/light.css" rel="stylesheet" type="text/css" />
		<link href="assets/css/themes/layout/brand/light.css" rel="stylesheet" type="text/css" />
		<link href="assets/css/themes/layout/aside/light.css" rel="stylesheet" type="text/css" />*@

        <link href="assets/css/skins/header/base/light.css" rel="stylesheet" type="text/css" />
        <link href="assets/css/skins/header/menu/light.css" rel="stylesheet" type="text/css" />
        <link href="assets/css/skins/brand/light.css" rel="stylesheet" type="text/css" />
        <link href="assets/css/skins/aside/light.css" rel="stylesheet" type="text/css" />
        <link href="Site.css" rel="stylesheet" type="text/css" />
        <link href="assets/plugins/custom/fullcalendar/fullcalendar.bundle.css" rel="stylesheet" type="text/css" />

		<link href="assets/css/pages/wizard/wizard-1.css" rel="stylesheet" type="text/css" />
        <!--end::Page Custom Styles --> <!--begin::Global Theme Styles(used by all pages) -->
    }

    <link href="Site.css" rel="stylesheet" type="text/css" />
    <link rel="shortcut icon" href="assets/media/logos/logo2.ico" />

    <link rel="stylesheet" href="radzen/css/material-base.css">

</head>


@if (Request.Path.Value.Contains("/login"))
{
    <body class="kt-quick-panel--right kt-demo-panel--right kt-offcanvas-panel--right kt-header--fixed kt-header-mobile--fixed kt-subheader--enabled kt-subheader--fixed kt-subheader--solid kt-aside--enabled kt-aside--fixed kt-page--loading">
        <component type="typeof(App)" render-mode="Server" />
        <script src="_framework/blazor.server.js" autostart="false"></script>
        <script>
            async function connectionDown(options) {
                console.log("Connection Down - you could do some UI here...");
                for (let i = 0; i < options.maxRetries; i++) {
                    console.log("Waiting for reconnect attempt #" + (i + 1) + " ...");
                    await this.delay(options.retryIntervalMilliseconds);
                    if (this.isDisposed) {
                        break;
                    }

                    try {
                        // reconnectCallback will asynchronously return:
                        // - true to mean success
                        // - false to mean we reached the server, but it rejected the connection (e.g., unknown circuit ID)
                        // - exception to mean we didn't reach the server (this can be sync or async)
                        console.log("Starting Reconnect attempt #" + (i + 1) + " ...");
                        await window.Blazor.disconnect();
                        const result = await window.Blazor.reconnect();
                        if (!result) {
                            // If the server responded and refused to reconnect, log it
                            console.error("Server Rejected");
                        } else {
                            // Reconnected!
                            return;
                        }
                    } catch (err) {
                        // We got an exception so will try again
                        console.error(err);
                    }
                }
                // all attempts failed - let's try a full reload
                // This could be a UI change instead or something more complicated
                await window.Blazor.disconnect();
                location.reload();
            }

            function delay(durationMilliseconds) {
                return new Promise(resolve => setTimeout(resolve, durationMilliseconds));
            }

            function connectionUp(e) {
                // Reconnected
                console.log("Connection UP!");
                // if you have a UI to hide/change you can do that here.
            }

            window.Blazor.start({
                reconnectionOptions: {
                    maxRetries: 30,
                    retryIntervalMilliseconds: 2000,
                },
                reconnectionHandler: {
                    onConnectionDown: e => connectionDown(e),
                    onConnectionUp: e => connectionUp(e)
                }
            });
        </script>


        <script>
            var KTAppOptions = {
            "colors": {
            "state": {
            "brand": "#5d78ff",
            "dark": "#282a3c",
            "light": "#ffffff",
            "primary": "#5867dd",
            "success": "#34bfa3",
            "info": "#36a3f7",
            "warning": "#ffb822",
            "danger": "#fd3995"
            },
            "base": {
            "label": [
            "#c5cbe3",
            "#a1a8c3",
            "#3d4465",
            "#3e4466"
            ],
            "shape": [
            "#f0f3ff",
            "#d9dffa",
            "#afb4d4",
            "#646c9a"
            ]
            }
            }
            };
        </script>

        <!-- end::Global Config -->
        <!--begin::Global Theme Bundle(used by all pages) -->
        <script src="assets/plugins/global/plugins.bundle.js" type="text/javascript"></script>
        <script src="assets/js/scripts.bundle.js" type="text/javascript"></script>

        <!--end::Global Theme Bundle -->
        <!--begin::Page Scripts(used by this page) -->
        <script src="assets/js/pages/custom/login/login-general.js" type="text/javascript"></script>

        <script src="assets/js/pages/components/extended/toastr.js" type="text/javascript"></script>


        <script type="text/javascript">

            function ShowMessage(Msg) {
            toastr.options = {
            "closeButton": false,
            "debug": false,
            "newestOnTop": false,
            "progressBar": false,
            "positionClass": "toast-top-right",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
            };

            toastr.success(Msg);
            }

            function ShowError(Msg) {
            toastr.options = {
            "closeButton": false,
            "debug": false,
            "newestOnTop": false,
            "progressBar": false,
            "positionClass": "toast-top-right",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
            };

            toastr.error(Msg);
            }

            function ShowWarning(Msg) {
            toastr.options = {
            "closeButton": false,
            "debug": false,
            "newestOnTop": false,
            "progressBar": false,
            "positionClass": "toast-top-right",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
            };

            toastr.warning(Msg);
            }

            function ShowInfo(Msg) {
            toastr.options = {
            "closeButton": false,
            "debug": false,
            "newestOnTop": false,
            "progressBar": false,
            "positionClass": "toast-top-right",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
            };

            toastr.info(Msg);

            }

        </script>


    </body>
}
else
{
    <body class="kt-quick-panel--right kt-demo-panel--right kt-offcanvas-panel--right kt-header--fixed kt-header-mobile--fixed kt-subheader--enabled kt-subheader--fixed kt-subheader--solid kt-aside--enabled kt-aside--fixed kt-page--loading">

        <component type="typeof(App)" render-mode="Server" />

        <script src="_framework/blazor.server.js" autostart="false"></script>
        <script>
            async function connectionDown(options) {
                console.log("Connection Down - you could do some UI here...");
                for (let i = 0; i < options.maxRetries; i++) {
                    console.log("Waiting for reconnect attempt #" + (i + 1) + " ...");
                    await this.delay(options.retryIntervalMilliseconds);
                    if (this.isDisposed) {
                        break;
                    }

                    try {
                        // reconnectCallback will asynchronously return:
                        // - true to mean success
                        // - false to mean we reached the server, but it rejected the connection (e.g., unknown circuit ID)
                        // - exception to mean we didn't reach the server (this can be sync or async)
                        console.log("Starting Reconnect attempt #" + (i + 1) + " ...");
                        await window.Blazor.disconnect();
                        const result = await window.Blazor.reconnect();
                        if (!result) {
                            // If the server responded and refused to reconnect, log it
                            console.error("Server Rejected");
                        } else {
                            // Reconnected!
                            return;
                        }
                    } catch (err) {
                        // We got an exception so will try again
                        console.error(err);
                    }
                }
                // all attempts failed - let's try a full reload
                // This could be a UI change instead or something more complicated
                await window.Blazor.disconnect();
                location.reload();
            }

            function delay(durationMilliseconds) {
                return new Promise(resolve => setTimeout(resolve, durationMilliseconds));
            }

            function connectionUp(e) {
                // Reconnected
                console.log("Connection UP!");
                // if you have a UI to hide/change you can do that here.
            }

            window.Blazor.start({
                reconnectionOptions: {
                    maxRetries: 30,
                    retryIntervalMilliseconds: 2000,
                },
                reconnectionHandler: {
                    onConnectionDown: e => connectionDown(e),
                    onConnectionUp: e => connectionUp(e)
                }
            });
        </script>        

        <script src="assets/js/Mobsites.Blazor.SignaturePad/bundle.js"></script>
        <script src="assets/js/BlazorDownloadFile/BlazorDownloadFileScript.js"></script>
        <script src="radzen/Radzen.Blazor.js"></script>
        @*<script>
            Blazor.defaultReconnectionHandler._reconnectCallback = function (d) { document.location.reload(); }
        </script>*@
                
        <script>
            var KTAppOptions = {
            "colors": {
            "state": {
            "brand": "#5d78ff",
            "dark": "#282a3c",
            "light": "#ffffff",
            "primary": "#5867dd",
            "success": "#34bfa3",
            "info": "#36a3f7",
            "warning": "#ffb822",
            "danger": "#fd3995"
            },
            "base": {
            "label": [
            "#c5cbe3",
            "#a1a8c3",
            "#3d4465",
            "#3e4466"
            ],
            "shape": [
            "#f0f3ff",
            "#d9dffa",
            "#afb4d4",
            "#646c9a"
            ]
            }
            }
            };
        </script>

        <!-- end::Global Config -->
        <!--begin::Global Theme Bundle(used by all pages) -->
        <script src="assets/plugins/global/plugins.bundle.js" type="text/javascript"></script>
        <script src="assets/js/scripts.bundle.js" type="text/javascript"></script>

        <!--end::Global Theme Bundle -->
        <!--begin::Page Scripts(used by this page) -->

        <script src="assets/js/pages/components/extended/toastr.js" type="text/javascript"></script>

        <script src="assets/js/jquery-validate/jquery.validate.min.js"></script>

        <script src="assets/js/jquery-loading-overlay/loadingoverlay.js" type="text/javascript"></script>

        <script type="text/javascript">

            function ShowMessage(Msg) {
            toastr.options = {
            "closeButton": false,
            "debug": false,
            "newestOnTop": false,
            "progressBar": false,
            "positionClass": "toast-top-right",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
            };

            toastr.success(Msg);
            }

            function ShowError(Msg) {
            toastr.options = {
            "closeButton": false,
            "debug": false,
            "newestOnTop": false,
            "progressBar": false,
            "positionClass": "toast-top-right",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
            };

            toastr.error(Msg);
            }

            function ShowWarning(Msg) {
            toastr.options = {
            "closeButton": false,
            "debug": false,
            "newestOnTop": false,
            "progressBar": false,
            "positionClass": "toast-top-right",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
            };

            toastr.warning(Msg);
            }

            function ShowInfo(Msg) {
            toastr.options = {
            "closeButton": false,
            "debug": false,
            "newestOnTop": false,
            "progressBar": false,
            "positionClass": "toast-top-right",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
            };

            toastr.info(Msg);

            }

            function ShowLoading() {
            try { $.LoadingOverlay("show"); }
            catch (err) { }
            }

            function CloseLoading() {
            try { $.LoadingOverlay("hide"); }
            catch (err) { }
            }

            function InitDateControl() {
            $('.datepicker').datepicker(
            {
            format: 'mm/dd/yyyy',
            todayHighlight: true,
            templates:
            {
            leftArrow: '<i class=\"la la-angle-leftId\"></i>',
            rightArrow: '<i class=\"la la-angle-right\"></i>'
            },
            }
            ).on('changeDate', function (ev) {
            //console.debug(ev);
            //$("input.datepicker[type=text]").val("hello").change();
            });
            }

            function OpenCloseModal(btnId) {
            try { $(btnId).click(); }
            catch (err) { }
            }

            function StartBoostrapSwitch(){
            console.log("StartBoostrapSwitch");
            $("[name='boostrapSwitch']").bootstrapSwitch();
            }

            function ShowAlert(Header,Msg,Type) {
            swal.fire(Header, Msg, Type);
            }

            function InitTimeControl(){
                $('.timepicker').timepicker();
            }
        </script>

        <!--end::Global Theme Bundle -->
        <!--begin::Page Vendors(used by this page) -->
        <script src="assets/plugins/custom/fullcalendar/fullcalendar.bundle.js" type="text/javascript"></script>

        <!--end::Page Vendors -->
        <!--begin::Page Scripts(used by this page) -->
        <script src="assets/js/pages/dashboard.js" type="text/javascript"></script>

        <script src="assets/js/pages/crud/forms/widgets/select2.js" type="text/javascript"></script>

        <script src="assets/js/pages/crud/forms/widgets/bootstrap-switch.js"></script>

        <script src="assets/js/pages/components/extended/sweetalert2.js" type="text/javascript"></script>

        <script src="assets/js/pages/components/extended/sticky-panels.js" type="text/javascript"></script>

        <!--begin::Page Scripts(used by this page) -->
        <script src="assets/js/pages/crud/forms/widgets/bootstrap-timepicker.js" type="text/javascript"></script>

    </body>
}

</html>

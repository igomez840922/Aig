using DataAccess;
using DataModel.Models;
using DataModel;
using Microsoft.AspNetCore.Identity;
using System.Linq;
using System.Reflection.Metadata;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Query.Internal;
using MimeKit;
using System;
using Org.BouncyCastle.Utilities;
using System.IO;
using Microsoft.Net.Http.Headers;
using Aig.Auditoria.Pages.Inspections;
using DataModel.Helper;

namespace Aig.Auditoria.Services
{    
    public class PdfGenerationService : IPdfGenerationService
    {
        private readonly IDalService DalService;
        private readonly IWebHostEnvironment env;
        public PdfGenerationService(IDalService dalService, IWebHostEnvironment env)
        {
            DalService = dalService;
            this.env = env;
        }

        public async Task<Stream> GenerateInspectionPDF(long InspectionId)
        {
            try
            {
                var inspection = DalService.Get<AUD_InspeccionTB>(InspectionId);
                switch (inspection.TipoActa)
                {
                    case DataModel.Helper.enumAUD_TipoActa.RR:
                        {
                            return await GenerateRetentionReceptionPDF(inspection);
                        }
                    case DataModel.Helper.enumAUD_TipoActa.AF:
                    case DataModel.Helper.enumAUD_TipoActa.CUF:
                        {
                            inspection.InspAperCambUbicFarm.DatosSolicitante = inspection.InspAperCambUbicFarm.DatosSolicitante != null ? inspection.InspAperCambUbicFarm.DatosSolicitante : new AUD_DatosSolicitante();

                            return await GenerateAperturaCambioUbicacionFarmacia(inspection);
                        }
                    case DataModel.Helper.enumAUD_TipoActa.AA:
                    case DataModel.Helper.enumAUD_TipoActa.CUA:
                        {
                            inspection.InspAperCambUbicAgen.DatosSolicitante = inspection.InspAperCambUbicAgen.DatosSolicitante != null ? inspection.InspAperCambUbicAgen.DatosSolicitante : new AUD_DatosSolicitante();

                            return await GenerateAperturaCambioUbicacionAgencia(inspection);
                        }
                    case DataModel.Helper.enumAUD_TipoActa.INV:
                        {                            
                            return await GenerateInvestigaciones(inspection);
                        }
                    case DataModel.Helper.enumAUD_TipoActa.AFM:
                        {                            
                            return await GenerateAperturaFabricantesMedicamentos(inspection);
                        }
                    case DataModel.Helper.enumAUD_TipoActa.AFC:
                        {                            
                            return await GenerateAperturaFabricantesCosmeticoDesinfectantes(inspection);
                        }
                    case DataModel.Helper.enumAUD_TipoActa.BPMCD:
                        {
                            
                            return await GenerateGuiaFabricantesCosmeticosDesinfectantes(inspection);
                        }
                    case DataModel.Helper.enumAUD_TipoActa.AECA:
                        {
                            return await GenerateAperturaCosmeticosArtesanales(inspection);
                            break;
                        }
                    case DataModel.Helper.enumAUD_TipoActa.BPMMN:
                        {
                            return await GenerateGuiaFabricantesProdNaturalesMedicinales(inspection);
                            break;
                        }
                    case DataModel.Helper.enumAUD_TipoActa.VF:
                        {
                            return await GenerateRutinaVigilanciaFarmacias(inspection);
                            break;
                        }
                    case DataModel.Helper.enumAUD_TipoActa.VA:
                        {
                            return await GenerateRutinaVigilanciaAgencia(inspection);
                            break;
                        }
                    case DataModel.Helper.enumAUD_TipoActa.COP:
                        {
                            return await GenerateCierreOperaciones(inspection);
                            break;
                        }
                    case DataModel.Helper.enumAUD_TipoActa.DFP:
                        {
                            return await GenerateDisposicionFinalProd(inspection);
                            break;
                        }
                    case DataModel.Helper.enumAUD_TipoActa.BPMFM:
                        {
                            return await GenerateGuiaFabricantesMedicamentos(inspection);
                            break;
                        }
                    case DataModel.Helper.enumAUD_TipoActa.BPMAM:
                        {
                            return await GenerateGuiaLabAcondicionadores(inspection);
                            break;
                        }
                    case DataModel.Helper.enumAUD_TipoActa.BPA:
                        {
                            return await GenerateGuiaBPM_BPA(inspection);
                            break;
                        }
                }
            }
            catch { }
            return null;
        }

        //generamos el pdf del Acta de Apertura o Cambio de Ubicacion de Farmacia
        private async Task<Stream> GenerateAperturaCambioUbicacionFarmacia(AUD_InspeccionTB inspection)
        {
            try
            {
                //var inspection = DalService.Get<AUD_InspeccionTB>(InspectionId);

                // code in your main method
                var byteArray = QuestPDF.Fluent.Document.Create(container =>
                {
                    container.Page(page =>
                    {
                        page.Size(PageSizes.A4);
                        page.Margin(5, Unit.Millimetre);
                        page.PageColor(Colors.White);
                        page.DefaultTextStyle(x => x.FontSize(8));
                        //page.DefaultTextStyle(x => x.Color("Black"));

                        var path = System.IO.Path.Combine(env.WebRootPath, "img", "pdf", "Header.png");

                        page.Header().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                            });

                            table.Header(header =>
                            {
                                header.Cell().Image(path);
                                header.Cell().AlignCenter().Text("");
                                header.Cell().AlignRight().AlignMiddle().Text(string.Format("Acta N°: {0}\r\nEstatus: {1}", inspection.NumActa, DataModel.Helper.Helper.GetDescription(inspection.StatusInspecciones)));
                            });

                            table.Cell().ColumnSpan(3).AlignLeft().Text("DIRECCIÓN NACIONAL DE FARMACIA Y DROGAS").Bold();
                            table.Cell().ColumnSpan(3).AlignLeft().Text("Departamento de Auditorías de Calidad a Establecimientos Farmacéuticos y No Farmacéuticos");
                            table.Cell().ColumnSpan(3).AlignCenter().Text("ACTA PARA LA VERIFICACIÓN DE LOS REQUISITOS ESTRUCTURALES DE APERTURA O MODIFICACIÓN POR CAMBIO DE UBICACIÓN DE FARMACIA").Bold();
                        });

                        page.Content().PaddingVertical(8).Column(column =>
                        {
                            column.Item().AlignLeft().Text(string.Format("Hora de Inicio: {0}", inspection.FechaInicio.ToString("hh:mm tt")));
                            column.Item().AlignLeft().Text(string.Format("Fecha: {0}", inspection.FechaInicio.ToString("dd/MM/yyyy")));
                            column.Item().AlignLeft().Text(string.Format("No. Recibo: {0}", inspection.DatosEstablecimiento.ReciboPago));

                            column.Item().AlignLeft().Text(string.Format("TIPO DE INSPECCIÓN: {0}", DataModel.Helper.Helper.GetDescription(inspection.TipoActa)));
                            column.Item().AlignLeft().Text(string.Format("TIPO DE ESTABLECIMIENTO: {0}", DataModel.Helper.Helper.GetDescription(inspection.DatosEstablecimiento?.Establecimiento?.TipoEstablecimiento ?? DataModel.Helper.enumAUD_TipoEstablecimiento.None)));

                            column.Item().PaddingVertical(5).AlignTop().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)0.3);
                                    columns.RelativeColumn((float)0.7);
                                });

                                table.Header(header =>
                                {
                                    header.Cell().ColumnSpan(2).Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("GENERALIDADES DE LA FARMACIA Y SOLICITANTE").Bold();
                                });

                                //Establecimiento
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("NOMBRE DEL ESTABLECIMIENTO");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento?.Nombre);
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Provincia");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento?.Provincia?.Nombre ?? "");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Distrito");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento?.Distrito?.Nombre ?? "");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Corregimiento");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento?.Corregimiento?.Nombre ?? "");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Ubicación");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento?.Direccion);
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Teléfono / Celular");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(string.Format("{0}", inspection.DatosEstablecimiento?.Telefono));
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("NOMBRE DE SOLICITANTE");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicFarm.DatosSolicitante?.Nombre);
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Tipo");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(inspection.InspAperCambUbicFarm.DatosSolicitante.Tipo));
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Nacionalidad");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicFarm.DatosSolicitante?.Nacionalidad);
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Cédula de Identidad Personal");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicFarm.DatosSolicitante?.Cedula);
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Correo electrónico");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicFarm.DatosSolicitante?.Email);
                                //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Residencia");
                                //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicFarm.DatosSolicitante?.PaisResidencia);
                                //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Provincia");
                                //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicFarm.DatosSolicitante?.Provincia);
                                //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Distrito");
                                //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicFarm.DatosSolicitante?.Distrito);
                                //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Corregimiento");
                                //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicFarm.DatosSolicitante?.Corregimiento);
                                //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Ubicación");
                                //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicFarm.DatosSolicitante?.Direccion);
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Teléfono / Celular");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(string.Format("{0} / {1}", inspection.InspAperCambUbicFarm.DatosSolicitante?.TelefonoResid, inspection.InspAperCambUbicFarm.DatosSolicitante?.TelefonoMovil));
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Profesión");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicFarm.DatosSolicitante?.Profesion);

                                table.Footer(footer =>
                                {
                                    footer.Cell().ColumnSpan(2).Border(1).BorderColor(Colors.Black).AlignLeft().Text("Ley 66 de 10 de noviembre de 1947. Código Sanitario de la República de Panamá. (G.O. 10467 de 6 de diciembre de 1947). Artículo 200. Prohíbese ejercer conjuntamente las profesiones de médico-cirujano y farmacéutico. A partir de la aprobación de este código, ningún médico que ejerza la profesión podrá ser dueño por sí mismo o por interpuesta persona, accionista o tener participación comercial cualquiera en establecimientos en que se fabriquen, preparen o vendan medicinas y artículos de cualquier clase que se usen para la prevención o curación de enfermedades, corrección de defectos o para el diagnóstico");
                                });
                            });

                            column.Item().PaddingVertical(5).AlignTop().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)0.3);
                                    columns.RelativeColumn((float)0.7);
                                });

                                table.Header(header =>
                                {
                                    header.Cell().ColumnSpan(2).Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("DATOS SOBRE EL REGENTE FARMACÉUTICO DE LA EMPRESA").Bold();
                                });

                                //Establecimiento
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Nombre");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicFarm.DatosRegente?.Nombre);
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Registro de Idoneidad");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicFarm.DatosRegente?.NumRegistro);
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Cédula de Identidad Personal");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicFarm.DatosRegente?.Cedula);
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Correo electrónico");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicFarm.DatosRegente?.Email);
                                //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Residencia");
                                //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicFarm.DatosRegente?.PaisResidencia);
                                //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Provincia");
                                //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicFarm.DatosRegente?.Provincia);
                                //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Distrito");
                                //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicFarm.DatosRegente?.Distrito);
                                //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Corregimiento");
                                //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicFarm.DatosRegente?.Corregimiento);
                                //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Ubicación");
                                //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicFarm.DatosRegente?.Ubicacion);
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Teléfono / Celular");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(string.Format("{0} / {1}", inspection.InspAperCambUbicFarm.DatosRegente?.TelefonoOfic, inspection.InspAperCambUbicFarm.DatosRegente?.TelefonoMovil));

                            });


                            column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                            column.Item().AlignLeft().Text(string.Format("Estructura Organizativa de la Farmacia".ToUpper())).Bold();
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)5);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("RESPUESTA".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                });
                                if (inspection.InspAperCambUbicFarm?.DatosEstructuraOrganizacional?.LContenido?.Count > 0)
                                {
                                    foreach (var dat in inspection.InspAperCambUbicFarm.DatosEstructuraOrganizacional.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }

                                }
                            });

                            column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                            column.Item().AlignLeft().Text(string.Format("Infraestructura de Farmacia".ToUpper())).Bold();
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)5);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("RESPUESTA".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                });
                                if (inspection.InspAperCambUbicFarm?.DatosInfraEstructura?.LContenido?.Count > 0)
                                {
                                    foreach (var dat in inspection.InspAperCambUbicFarm.DatosInfraEstructura.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }

                                }
                            });

                            column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                            column.Item().AlignLeft().Text(string.Format("Área Física de Farmacia".ToUpper())).Bold();
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)5);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("RESPUESTA".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                });
                                if (inspection.InspAperCambUbicFarm?.DatosAreaFisica?.LContenido?.Count > 0)
                                {
                                    foreach (var dat in inspection.InspAperCambUbicFarm.DatosAreaFisica.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }

                                }
                            });

                            column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                            column.Item().AlignLeft().Text(string.Format("Preguntas".ToUpper())).Bold();
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)5);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("RESPUESTA".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                });
                                if (inspection.InspAperCambUbicFarm?.DatosPreguntasGenericas?.LContenido?.Count > 0)
                                {
                                    foreach (var dat in inspection.InspAperCambUbicFarm.DatosPreguntasGenericas.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }

                                }
                            });

                            column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                            column.Item().AlignLeft().Text(string.Format("Área de Productos Controlados".ToUpper())).Bold();
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)5);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("RESPUESTA".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                });
                                if (inspection.InspAperCambUbicFarm?.DatosAreaProductosControlados?.LContenido?.Count > 0)
                                {
                                    foreach (var dat in inspection.InspAperCambUbicFarm.DatosAreaProductosControlados.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }

                                }
                            });

                            column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                            column.Item().AlignLeft().Text(string.Format("Área de Almacen de Medicamentos y otros productos para la salud humana".ToUpper())).Bold();
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)5);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("RESPUESTA".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                });
                                if (inspection.InspAperCambUbicFarm?.DatosAreaAlmacenamiento?.LContenido?.Count > 0)
                                {
                                    foreach (var dat in inspection.InspAperCambUbicFarm.DatosAreaAlmacenamiento.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }

                                }
                            });

                            column.Item().PaddingVertical(5).AlignTop().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn();
                                });

                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONES GENERALES").Bold();
                                });

                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosConclusiones?.ObservacionesFinales);

                            });

                            if (inspection.DatosConclusiones != null)
                            {
                                column.Item().PaddingVertical(5).AlignTop().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn();
                                    });

                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("SEGÚN CRITERIO TÉCNICO SE CONCLUYE QUE").Bold();
                                    });

                                    if (inspection.DatosConclusiones.CumpleRequisitosMinOperacion)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("EL LOCAL CUMPLE ESTRUCTURALMENTE CON LOS REQUISITOS MÍNIMOS PARA OPERAR").Bold();
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("EL LOCAL NO CUMPLE ESTRUCTURALMENTE CON LOS REQUISITOS MÍNIMOS PARA OPERAR").Bold();
                                    }

                                });
                            }

                            column.Item().PaddingVertical(5).Text("OBSERVACIÓN:").Bold();
                            column.Item().Text("El Acta original se mantendrá en el expediente del establecimiento que permanece en la Dirección Nacional de Farmacia y Drogas y se hace entrega de una copia al firmante de esta acta, al finalizar la inspección").Bold();

                            column.Item().PaddingVertical(5).Text("DE NO CUMPLIR CON LOS REQUISITOS MÍNIMOS ESTRUCTURALES EN ESTA ACTA, EL USUARIO DEBERÁ SUBSANAR TODOS LOS PUNTOS PENDIENTES, PARA SU DEBIDA VERIFICACIÓN EN UNA SEGUNDA INSPECCIÓN. SI EN ESTA SEGUNDA INPECCIÓN REINCIDE EN LAS DESVIACIONES IDENTIFICADAS EN LA PRIMERA INSPECCIÓN, SE PROCEDERÁ A LA DEVOLUCIÓN DE LA SOLICITUD Y EL INTERESADO DEBERÁ REINICIAR EL TRÁMITE CON TODOS LOS REQUISITOS ESTABLECIDOS PARA EL MISMO").Bold();


                            column.Item().PaddingVertical(5).Text(string.Format("Esta Acta se levanta en presencia de los abajo firmantes\r\n"));
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                });

                                table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Establecimiento:").Bold();
                                if (!string.IsNullOrEmpty(inspection.InspAperCambUbicFarm.DatosSolicitante?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspAperCambUbicFarm.DatosSolicitante.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitArea);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }


                                if (!string.IsNullOrEmpty(inspection.InspAperCambUbicFarm.DatosRegente?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspAperCambUbicFarm.DatosRegente.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }


                                table.Cell().AlignLeft().Text("");

                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Cargo:{2}", inspection.InspAperCambUbicFarm.DatosSolicitante?.Nombre, inspection.InspAperCambUbicFarm.DatosSolicitante?.Cedula, inspection.InspAperCambUbicFarm.DatosSolicitante?.Cargo));
                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Cargo:{2} | Reg.:{3}", inspection.InspAperCambUbicFarm.DatosRegente?.Nombre, inspection.InspAperCambUbicFarm.DatosRegente?.Cedula, inspection.InspAperCambUbicFarm.DatosRegente?.Cargo, inspection.InspAperCambUbicFarm.DatosRegente?.NumRegistro));

                                table.Cell().AlignLeft().Text("");

                            });

                            column.Item().PaddingVertical(5).Text(" ").Bold();

                            if (inspection.ParticipantesDNFD?.LParticipantes?.Count > 0)
                            {
                                column.Item().Table(table => {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(1);
                                    });

                                    table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Ministerio de Salud (DNFD):").Bold();

                                    foreach (var participant in inspection.ParticipantesDNFD.LParticipantes)
                                    {
                                        table.Cell().Table(tbl =>
                                        {
                                            tbl.ColumnsDefinition(columns =>
                                            {
                                                columns.RelativeColumn(1);
                                            });
                                            if (!string.IsNullOrEmpty(participant.Firma))
                                            {
                                                byte[] data = Convert.FromBase64String(participant.Firma.Split("image/png;base64,")[1]);
                                                MemoryStream memoryStream = new MemoryStream(data);
                                                tbl.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                            }
                                            tbl.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Reg.:{2}", participant.NombreCompleto, participant.CedulaIdentificacion, participant.RegistroNumero));
                                        });
                                    }
                                });
                            }

                            column.Item().PaddingVertical(5).Text(string.Format("Hora de finalización de inspección: {0}", inspection.DatosConclusiones?.FechaFinalizacion?.ToString("dd/MM/yyyy hh:mm tt") ?? ""));


                            column.Item().PaddingVertical(10).Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(6);
                                    columns.RelativeColumn(4);
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                    });
                                    tbl.Header(header =>
                                    {
                                        header.Cell().AlignLeft().Text("Fundamento Legal:").Bold();
                                    });
                                    tbl.Cell().AlignLeft().Text("Ley 66 de 10 de noviembre de 1947");
                                    tbl.Cell().AlignLeft().Text("Ley 1 de 10 de enero de 2001");
                                    tbl.Cell().AlignLeft().Text("Ley 17 de 12 de septiembre de 2014");
                                    tbl.Cell().AlignLeft().Text("Ley 24 de 29 de enero de 1963");
                                    tbl.Cell().AlignLeft().Text("Decreto Ejecutivo 115 de 16 de agosto de 2022");
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                    });

                                    tbl.Header(header =>
                                    {
                                        header.Cell().ColumnSpan(3).AlignLeft().Text("Contáctenos:").Bold();
                                    });

                                    tbl.Cell().AlignLeft().Text("S. Inspecciones");
                                    tbl.Cell().AlignLeft().Text("512-9168/62 (Ext. 1126)");
                                    tbl.Cell().AlignLeft().Text("inspeccionesfyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("S. Auditorías");
                                    tbl.Cell().AlignLeft().Text("512-9168/62");
                                    tbl.Cell().AlignLeft().Text("auditoriafyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Veraguas");
                                    tbl.Cell().AlignLeft().Text("935-0316/18");
                                    tbl.Cell().AlignLeft().Text("orvdnfd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Chiriquí");
                                    tbl.Cell().AlignLeft().Text("774-7410");
                                    tbl.Cell().AlignLeft().Text("fydchiriqui@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Colón");
                                    tbl.Cell().AlignLeft().Text("475-2060 Ext. 5021");
                                    tbl.Cell().AlignLeft().Text("mbramwell@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Panamá Pacífico");
                                    tbl.Cell().AlignLeft().Text("504-2565");
                                    tbl.Cell().AlignLeft().Text("rlquiros@minsa.gob.pa");
                                });

                                table.Cell().ColumnSpan(2).AlignRight().AlignBottom().Text(string.Format("Confeccionado: Sección de Inspecciones {0}", DateTime.Now.ToString("dd/MM/yyyy")));
                            });

                        });

                        page.Footer().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                            });

                            
                            table.Cell().AlignRight().AlignBottom().Text(string.Format("Confeccionado: Sección de Inspecciones {0}", DateTime.Now.ToString("dd/MM/yyyy")));
                        });
                    });
                })
                  .GeneratePdf();

                Stream stream = new MemoryStream(byteArray);

                return stream;
            }
            catch { }
            return null;
        }
        //generamos el pdf del Acta de Apertura o Cambio de Ubicacion de Agencia
        private async Task<Stream> GenerateAperturaCambioUbicacionAgencia(AUD_InspeccionTB inspection)
        {
            try
            {
                //var inspection = DalService.Get<AUD_InspeccionTB>(InspectionId);

                // code in your main method
                var byteArray = QuestPDF.Fluent.Document.Create(container =>
                {
                    container.Page(page =>
                    {
                        page.Size(PageSizes.A4);
                        page.Margin(5, Unit.Millimetre);
                        page.PageColor(Colors.White);
                        page.DefaultTextStyle(x => x.FontSize(8));
                        //page.DefaultTextStyle(x => x.Color("Black"));

                        var path = System.IO.Path.Combine(env.WebRootPath, "img", "pdf", "Header.png");

                        page.Header().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                            });

                            table.Header(header =>
                            {
                                header.Cell().Image(path);
                                header.Cell().AlignCenter().Text("");
                                header.Cell().AlignRight().AlignMiddle().Text(string.Format("Acta N°: {0}\r\nEstatus: {1}", inspection.NumActa, DataModel.Helper.Helper.GetDescription(inspection.StatusInspecciones)));
                            });

                            table.Cell().ColumnSpan(3).AlignLeft().Text("DIRECCIÓN NACIONAL DE FARMACIA Y DROGAS").Bold();
                            table.Cell().ColumnSpan(3).AlignLeft().Text("Departamento de Auditorías de Calidad a Establecimientos Farmacéuticos y No Farmacéuticos");
                            table.Cell().ColumnSpan(3).AlignCenter().Text("ACTA PARA LA VERIFICACIÓN DE LOS REQUISITOS ESTRUCTURALES DE APERTURA O MODIFICACIÓN POR CAMBIO DE UBICACIÓN DE AGENCIA DISTRIBUIDORA").Bold();
                        });

                        page.Content().PaddingVertical(8).Column(column =>
                        {
                            column.Item().AlignLeft().Text(string.Format("Hora de Inicio: {0}", inspection.FechaInicio.ToString("hh:mm tt")));
                            column.Item().AlignLeft().Text(string.Format("Fecha: {0}", inspection.FechaInicio.ToString("dd/MM/yyyy")));
                            column.Item().AlignLeft().Text(string.Format("No. Recibo: {0}", inspection.DatosEstablecimiento.ReciboPago));

                            column.Item().AlignLeft().Text(string.Format("TIPO DE INSPECCIÓN: {0}", DataModel.Helper.Helper.GetDescription(inspection.TipoActa)));
                            column.Item().AlignLeft().Text(string.Format("TIPO DE ESTABLECIMIENTO: {0}", DataModel.Helper.Helper.GetDescription(inspection.DatosEstablecimiento?.Establecimiento?.TipoEstablecimiento ?? DataModel.Helper.enumAUD_TipoEstablecimiento.None)));

                            if (inspection.DatosEstablecimiento != null)
                            {
                                column.Item().PaddingVertical(5).AlignTop().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.3);
                                        columns.RelativeColumn((float)0.7);
                                    });

                                    table.Header(header =>
                                    {
                                        header.Cell().ColumnSpan(2).Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("GENERALIDADES DEL ESTABLECIMIENTO Y SOLICITANTE").Bold();
                                    });

                                    //Establecimiento
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("NOMBRE DEL ESTABLECIMIENTO");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento.Nombre);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Provincia");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento.Provincia?.Nombre ?? "");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Distrito");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento.Distrito?.Nombre ?? "");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Corregimiento");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento.Corregimiento?.Nombre ?? "");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Ubicación");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento.Direccion);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Teléfono / Celular");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(string.Format("{0}", inspection.DatosEstablecimiento.Telefono));

                                    if (inspection.InspAperCambUbicAgen.DatosSolicitante != null)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("NOMBRE DE SOLICITANTE");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicAgen.DatosSolicitante.Nombre);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Tipo");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(inspection.InspAperCambUbicAgen.DatosSolicitante.Tipo));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Nacionalidad");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicAgen.DatosSolicitante.Nacionalidad);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Cédula de Identidad Personal");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicAgen.DatosSolicitante.Cedula);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Correo electrónico");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicAgen.DatosSolicitante.Email);
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Residencia");
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicAgen.DatosSolicitante?.PaisResidencia);
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Provincia");
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicAgen.DatosSolicitante?.Provincia);
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Distrito");
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicAgen.DatosSolicitante?.Distrito);
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Corregimiento");
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicAgen.DatosSolicitante?.Corregimiento);
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Ubicación");
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicAgen.DatosSolicitante?.Direccion);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Teléfono / Celular");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(string.Format("{0} / {1}", inspection.InspAperCambUbicAgen.DatosSolicitante.TelefonoResid, inspection.InspAperCambUbicAgen.DatosSolicitante.TelefonoMovil));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Profesión");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicAgen.DatosSolicitante.Profesion);
                                    }

                                    table.Footer(footer =>
                                    {
                                        footer.Cell().ColumnSpan(2).Border(1).BorderColor(Colors.Black).AlignLeft().Text("Ley 66 de 10 de noviembre de 1947. Código Sanitario de la República de Panamá. (G.O. 10467 de 6 de diciembre de 1947). Artículo 200. Prohíbese ejercer conjuntamente las profesiones de médico-cirujano y farmacéutico. A partir de la aprobación de este código, ningún médico que ejerza la profesión podrá ser dueño por sí mismo o por interpuesta persona, accionista o tener participación comercial cualquiera en establecimientos en que se fabriquen, preparen o vendan medicinas y artículos de cualquier clase que se usen para la prevención o curación de enfermedades, corrección de defectos o para el diagnóstico");
                                    });
                                });

                            }

                            if (inspection.InspAperCambUbicAgen.DatosRegente != null)
                            {
                                column.Item().PaddingVertical(5).AlignTop().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.3);
                                        columns.RelativeColumn((float)0.7);
                                    });

                                    table.Header(header =>
                                    {
                                        header.Cell().ColumnSpan(2).Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("DATOS SOBRE EL REGENTE FARMACÉUTICO DE LA EMPRESA").Bold();
                                    });

                                    //Establecimiento
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Nombre");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicAgen.DatosRegente.Nombre);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Registro de Idoneidad");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicAgen.DatosRegente.NumRegistro);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Cédula de Identidad Personal");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicAgen.DatosRegente.Cedula);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Correo electrónico");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicAgen.DatosRegente.Email);
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Residencia");
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicAgen.DatosRegente?.PaisResidencia);
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Provincia");
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicAgen.DatosRegente?.Provincia);
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Distrito");
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicAgen.DatosRegente?.Distrito);
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Corregimiento");
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicAgen.DatosRegente?.Corregimiento);
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Ubicación");
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperCambUbicAgen.DatosRegente?.Ubicacion);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Teléfono / Celular");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(string.Format("{0} / {1}", inspection.InspAperCambUbicAgen.DatosRegente.TelefonoOfic, inspection.InspAperCambUbicAgen.DatosRegente?.TelefonoMovil));

                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Se encontraba presente al momento de la inspección");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(inspection.InspAperCambUbicAgen.DatosRegente.PresenteEnInspeccion));

                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("El Regente Farmacéutico realiza otras funciones del dentro de la empresa?");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(inspection.InspAperCambUbicAgen.DatosRegente.RealizaOtraFuncion));
                                });

                            }

                            if (inspection.InspAperCambUbicAgen.CondCaractEstablecimiento != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("CONDICIONES Y CARACTERÍSTICAS DEL ESTABLECIMIENTO".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspAperCambUbicAgen?.CondCaractEstablecimiento?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspAperCambUbicAgen.CondCaractEstablecimiento.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspAperCambUbicAgen.AreaAdministrativa != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA ADMINSITRATIVA".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspAperCambUbicAgen?.AreaAdministrativa?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspAperCambUbicAgen.AreaAdministrativa.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspAperCambUbicAgen.AreaRecepcionProducto != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA DE RECEPCIÓN DE PRODUCTOS".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspAperCambUbicAgen?.AreaRecepcionProducto?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspAperCambUbicAgen.AreaRecepcionProducto.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspAperCambUbicAgen.AreaAlmacenamiento != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA DE ALMACENAMIENTO".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspAperCambUbicAgen?.AreaAlmacenamiento?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspAperCambUbicAgen.AreaAlmacenamiento.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspAperCambUbicAgen.AreaProductosDevueltosVencidos != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA PARA PRODUCTOS DEVUELTOS Y VENCIDOS ".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspAperCambUbicAgen?.AreaProductosDevueltosVencidos?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspAperCambUbicAgen.AreaProductosDevueltosVencidos.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspAperCambUbicAgen.AreaProductosRetiradosMercado != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA PARA PRODUCTOS RETIRADOS DEL MERCADO".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspAperCambUbicAgen?.AreaProductosRetiradosMercado?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspAperCambUbicAgen.AreaProductosRetiradosMercado.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspAperCambUbicAgen.AreaDespachoProductos != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA DE DESPACHO DE PRODUCTOS".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspAperCambUbicAgen?.AreaDespachoProductos?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspAperCambUbicAgen.AreaDespachoProductos.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspAperCambUbicAgen.AreaAlmacenProdReqCadenaFrio != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA DE ALMACENAMIENTO DE PRODUCTOS QUE REQUIEREN CADENA DE FRÍO ".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspAperCambUbicAgen?.AreaAlmacenProdReqCadenaFrio?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspAperCambUbicAgen.AreaAlmacenProdReqCadenaFrio.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspAperCambUbicAgen.AreaAlmacenProdVolatiles != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA DE ALMACENAMIENTO DE PRODUCTOS VOLATILES ".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspAperCambUbicAgen?.AreaAlmacenProdVolatiles?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspAperCambUbicAgen.AreaAlmacenProdVolatiles.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspAperCambUbicAgen.AreaAlmacenPlaguicidas != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA DE ALMACENAMIENTO DE PLAGUICIDAS DE USO DOMÉSTICO Y DE SALUD PÚBLICA".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspAperCambUbicAgen?.AreaAlmacenPlaguicidas?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspAperCambUbicAgen.AreaAlmacenPlaguicidas.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspAperCambUbicAgen.AreaAlmacenMateriaPrima != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA DE ALMACENAMIENTO DE MATERIA PRIMA PARA LA INDUSTRIA FARMACÉUTICA".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspAperCambUbicAgen?.AreaAlmacenMateriaPrima?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspAperCambUbicAgen.AreaAlmacenMateriaPrima.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspAperCambUbicAgen.AreaAlmacenProdSujetosControl != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA DE ALMACENAMIENTO DE PRODUCTOS SUJETOS A CONTROL (CUANDO APLIQUE)".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspAperCambUbicAgen?.AreaAlmacenProdSujetosControl?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspAperCambUbicAgen.AreaAlmacenProdSujetosControl.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspAperCambUbicAgen.AreaDesperdicio != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA DE DESPERDICIOS QUE SE GENERAN Y NO PUEDEN SER COLOCADOS EN EL ÁREA DE ALMACENAMIENTO".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspAperCambUbicAgen?.AreaDesperdicio?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspAperCambUbicAgen.AreaDesperdicio.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspAperCambUbicAgen.Requisitos != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("PROCEDIMIENTOS".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspAperCambUbicAgen?.Requisitos?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspAperCambUbicAgen.Requisitos.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspAperCambUbicAgen.Actividades != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Actividades".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspAperCambUbicAgen?.Actividades?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspAperCambUbicAgen.Actividades.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspAperCambUbicAgen.Productos != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Productos".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspAperCambUbicAgen?.Productos?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspAperCambUbicAgen.Productos.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }


                            column.Item().PaddingVertical(5).AlignTop().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn();
                                });

                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONES GENERALES").Bold();
                                });

                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosConclusiones?.ObservacionesFinales);

                            });

                            column.Item().PaddingVertical(5).Text("OBSERVACIÓN:").Bold();
                            column.Item().Text("El Acta original se mantendrá en el expediente del establecimiento que permanece en la Dirección Nacional de Farmacia y Drogas y se hace entrega de una copia al firmante de esta acta, al finalizar la inspección").Bold();

                            column.Item().PaddingVertical(5).Text("COMO PARTE DE LOS REQUISITOS PARA LA EMISIÓN DE LA LICENCIA DE OPERACIÓN, LAS DESVIACIONES OBSERVADAS EN LA INSPECCIÓN, DEBERÁNM SER SUBSANADAS EN UN TERMINO NO MAYOR A 20 DÍAS, DENTRO DE LOS CUALES DEBEN NOTIFICAR A LA DIRECCIÓN NACIONAL DE FARMACIA Y DROGAS. PARA REALIZAR LA INSPECCIÓN DEFINITIVA").Bold();

                            if (inspection.DatosConclusiones != null)
                            {
                                column.Item().PaddingVertical(5).AlignTop().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn();
                                    });

                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("SEGÚN CRITERIO TÉCNICO SE CONCLUYE QUE").Bold();
                                    });

                                    if (inspection.DatosConclusiones.CumpleRequisitosMinOperacion)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("EL LOCAL CUMPLE ESTRUCTURALMENTE CON LOS REQUISITOS MÍNIMOS PARA OPERAR").Bold();
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("EL LOCAL NO CUMPLE ESTRUCTURALMENTE CON LOS REQUISITOS MÍNIMOS PARA OPERAR").Bold();
                                    }
                                });
                            }

                            column.Item().PaddingVertical(5).Text(string.Format("Esta Acta se levanta en presencia de los abajo firmantes\r\n"));
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                });

                                table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Establecimiento:").Bold();
                                if (!string.IsNullOrEmpty(inspection.InspAperCambUbicAgen.DatosSolicitante?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspAperCambUbicAgen.DatosSolicitante.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitArea);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }


                                if (!string.IsNullOrEmpty(inspection.InspAperCambUbicAgen.DatosRegente?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspAperCambUbicAgen.DatosRegente.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }


                                table.Cell().AlignLeft().Text("");

                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Cargo:{2}", inspection.InspAperCambUbicAgen.DatosSolicitante?.Nombre, inspection.InspAperCambUbicAgen.DatosSolicitante?.Cedula, inspection.InspAperCambUbicAgen.DatosSolicitante?.Cargo));
                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Cargo:{2} | Reg.:{3}", inspection.InspAperCambUbicAgen.DatosRegente?.Nombre, inspection.InspAperCambUbicAgen.DatosRegente?.Cedula, inspection.InspAperCambUbicAgen.DatosRegente?.Cargo, inspection.InspAperCambUbicAgen.DatosRegente?.NumRegistro));

                                table.Cell().AlignLeft().Text("");

                            });

                            column.Item().PaddingVertical(5).Text(" ").Bold();

                            if (inspection.ParticipantesDNFD?.LParticipantes?.Count > 0)
                            {
                                column.Item().Table(table => {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(1);
                                    });

                                    table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Ministerio de Salud (DNFD):").Bold();

                                    foreach (var participant in inspection.ParticipantesDNFD.LParticipantes)
                                    {
                                        table.Cell().Table(tbl =>
                                        {
                                            tbl.ColumnsDefinition(columns =>
                                            {
                                                columns.RelativeColumn(1);
                                            });
                                            if (!string.IsNullOrEmpty(participant.Firma))
                                            {
                                                byte[] data = Convert.FromBase64String(participant.Firma.Split("image/png;base64,")[1]);
                                                MemoryStream memoryStream = new MemoryStream(data);
                                                tbl.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                            }
                                            tbl.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Reg.:{2}", participant.NombreCompleto, participant.CedulaIdentificacion, participant.RegistroNumero));
                                        });
                                    }
                                });
                            }

                            column.Item().PaddingVertical(5).Text(string.Format("Hora de finalización de inspección: {0}", inspection.DatosConclusiones?.FechaFinalizacion?.ToString("dd/MM/yyyy hh:mm tt") ?? ""));

                            column.Item().PaddingVertical(10).Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(4);
                                    columns.RelativeColumn(6);
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                    });
                                    tbl.Header(header =>
                                    {
                                        header.Cell().AlignLeft().Text("Fundamento Legal:").Bold();
                                    });
                                    tbl.Cell().AlignLeft().Text("Ley 66 de 10 de noviembre de 1947");
                                    tbl.Cell().AlignLeft().Text("Ley 1 de 10 de enero de 2001");
                                    tbl.Cell().AlignLeft().Text("Ley 17 de 12 de septiembre de 2014");
                                    tbl.Cell().AlignLeft().Text("Ley 24 de 29 de enero de 1963");
                                    tbl.Cell().AlignLeft().Text("Decreto Ejecutivo 115 de 16 de agosto de 2022");
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                    });

                                    tbl.Header(header =>
                                    {
                                        header.Cell().ColumnSpan(3).AlignLeft().Text("Contáctenos:").Bold();
                                    });

                                    tbl.Cell().AlignLeft().Text("S. Inspecciones");
                                    tbl.Cell().AlignLeft().Text("512-9168/62 (Ext. 1126)");
                                    tbl.Cell().AlignLeft().Text("inspeccionesfyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("S. Auditorías");
                                    tbl.Cell().AlignLeft().Text("512-9168/62");
                                    tbl.Cell().AlignLeft().Text("auditoriafyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Veraguas");
                                    tbl.Cell().AlignLeft().Text("935-0316/18");
                                    tbl.Cell().AlignLeft().Text("orvdnfd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Chiriquí");
                                    tbl.Cell().AlignLeft().Text("774-7410");
                                    tbl.Cell().AlignLeft().Text("fydchiriqui@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Colón");
                                    tbl.Cell().AlignLeft().Text("475-2060 Ext. 5021");
                                    tbl.Cell().AlignLeft().Text("mbramwell@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Panamá Pacífico");
                                    tbl.Cell().AlignLeft().Text("504-2565");
                                    tbl.Cell().AlignLeft().Text("rlquiros@minsa.gob.pa");
                                });

                                table.Cell().ColumnSpan(2).AlignRight().AlignBottom().Text(string.Format("Confeccionado: Sección de Inspecciones {0}", DateTime.Now.ToString("dd/MM/yyyy")));
                            });

                        });

                        page.Footer().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                            });


                            table.Cell().AlignRight().AlignBottom().Text(string.Format("Confeccionado: Sección de Inspecciones {0}", DateTime.Now.ToString("dd/MM/yyyy")));
                        });


                    });
                })
                  .GeneratePdf();

                Stream stream = new MemoryStream(byteArray);

                return stream;
            }
            catch { }
            return null;
        }
        //RUTINA VIGILANCIA FARMACIA
        private async Task<Stream> GenerateRutinaVigilanciaFarmacias(AUD_InspeccionTB inspection)
        {
            try
            {
                //var inspection = DalService.Get<AUD_InspeccionTB>(InspectionId);

                // code in your main method
                var byteArray = QuestPDF.Fluent.Document.Create(container =>
                {
                    container.Page(page =>
                    {
                        page.Size(PageSizes.A4);
                        page.Margin(5, Unit.Millimetre);
                        page.PageColor(Colors.White);
                        page.DefaultTextStyle(x => x.FontSize(8));
                        //page.DefaultTextStyle(x => x.Color("Black"));

                        var path = System.IO.Path.Combine(env.WebRootPath, "img", "pdf", "Header.png");

                        page.Header().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                            });

                            table.Header(header =>
                            {
                                header.Cell().Image(path);
                                header.Cell().AlignCenter().Text("");
                                header.Cell().AlignRight().AlignMiddle().Text(string.Format("Acta N°: {0}\r\nEstatus: {1}", inspection.NumActa, DataModel.Helper.Helper.GetDescription(inspection.StatusInspecciones)));
                            });

                            table.Cell().ColumnSpan(3).AlignLeft().Text("DIRECCIÓN NACIONAL DE FARMACIA Y DROGAS").Bold();
                            table.Cell().ColumnSpan(3).AlignLeft().Text("Departamento de Auditorías de Calidad a Establecimientos Farmacéuticos y No Farmacéuticos");
                            table.Cell().ColumnSpan(3).AlignCenter().Text("ACTA DE RUTINA O VIGILANCIA OPERATIVA A FARMACIA".ToUpper()).Bold();
                        });

                        page.Content().PaddingVertical(8).Column(column =>
                        {

                            column.Item().AlignLeft().Text(string.Format("Hora de Inicio: {0}", inspection.FechaInicio.ToString("hh:mm tt")));
                            column.Item().AlignLeft().Text(string.Format("Fecha: {0}", inspection.FechaInicio.ToString("dd/MM/yyyy")));
                            column.Item().AlignLeft().Text(string.Format("No. Recibo: {0}", inspection.DatosEstablecimiento.ReciboPago));

                            column.Item().AlignLeft().Text(string.Format("TIPO DE INSPECCIÓN: {0}", DataModel.Helper.Helper.GetDescription(inspection.TipoActa)));
                            column.Item().AlignLeft().Text(string.Format("TIPO DE ESTABLECIMIENTO: {0}", DataModel.Helper.Helper.GetDescription(inspection.DatosEstablecimiento?.Establecimiento?.TipoEstablecimiento ?? DataModel.Helper.enumAUD_TipoEstablecimiento.None)));

                            if (inspection.DatosEstablecimiento != null)
                            {
                                column.Item().PaddingVertical(5).AlignTop().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.3);
                                        columns.RelativeColumn((float)0.7);
                                    });

                                    table.Header(header =>
                                    {
                                        header.Cell().ColumnSpan(2).Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("GENERALIDADES DE LA FARMACIA Y REPRESENTANTE LEGAL O PROPIETARIO").Bold();
                                    });

                                    //Establecimiento
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("NOMBRE DEL ESTABLECIMIENTO");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento.Nombre);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Provincia");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento.Provincia?.Nombre ?? "");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Distrito");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento.Distrito?.Nombre ?? "");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Corregimiento");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento.Corregimiento?.Nombre ?? "");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Ubicación");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento.Direccion);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Teléfono / Celular");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(string.Format("{0}", inspection.DatosEstablecimiento.Telefono));
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Número de Licencia de Operación");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(string.Format("{0}", inspection.DatosEstablecimiento.NumLicencia));
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Vigente Desde");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(string.Format("{0}", inspection.DatosEstablecimiento.VigenteDesde?.ToString("dd/MM/yyyy") ?? ""));
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Vigente Hasta");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(string.Format("{0}", inspection.DatosEstablecimiento.VigenteHasta?.ToString("dd/MM/yyyy") ?? ""));

                                    if (inspection.InspRutinaVigFarmacia.DatosRepresentLegal != null)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Nombre del Representante Legal o Propietario");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigFarmacia.DatosRepresentLegal.Nombre);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Cédula de Identidad Personal");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigFarmacia.DatosRepresentLegal.Cedula);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Correo electrónico");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigFarmacia.DatosRepresentLegal.Email);
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Residencia");
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigFarmacia.DatosSolicitante?.PaisResidencia);
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Provincia");
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigFarmacia.DatosSolicitante?.Provincia);
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Distrito");
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigFarmacia.DatosSolicitante?.Distrito);
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Corregimiento");
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigFarmacia.DatosSolicitante?.Corregimiento);
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Ubicación");
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigFarmacia.DatosSolicitante?.Direccion);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Teléfono / Celular");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(string.Format("{0} / {1}", inspection.InspRutinaVigFarmacia.DatosRepresentLegal.TelefonoResid, inspection.InspRutinaVigFarmacia.DatosRepresentLegal.TelefonoMovil));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Profesión");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigFarmacia.DatosRepresentLegal.Profesion);
                                    }

                                    table.Footer(footer =>
                                    {
                                        footer.Cell().ColumnSpan(2).Border(1).BorderColor(Colors.Black).AlignLeft().Text("Ley 66 de 10 de noviembre de 1947. Código Sanitario de la República de Panamá. (G.O. 10467 de 6 de diciembre de 1947). Artículo 200. Prohíbese ejercer conjuntamente las profesiones de médico-cirujano y farmacéutico. A partir de la aprobación de este código, ningún médico que ejerza la profesión podrá ser dueño por sí mismo o por interpuesta persona, accionista o tener participación comercial cualquiera en establecimientos en que se fabriquen, preparen o vendan medicinas y artículos de cualquier clase que se usen para la prevención o curación de enfermedades, corrección de defectos o para el diagnóstico.");
                                    });
                                });

                            }

                            if (inspection.InspRutinaVigFarmacia.DatosRegente != null)
                            {
                                column.Item().PaddingVertical(5).AlignTop().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.3);
                                        columns.RelativeColumn((float)0.7);
                                    });

                                    table.Header(header =>
                                    {
                                        header.Cell().ColumnSpan(2).Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("DATOS SOBRE EL REGENTE FARMACÉUTICO DE LA EMPRESA, FARMACÉUTICO DE TURNO Y TECNICO EN FARMACIA").Bold();
                                    });

                                    //Establecimiento
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Nombre");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigFarmacia.DatosRegente.Nombre);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Registro de Idoneidad");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigFarmacia.DatosRegente.NumRegistro);
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Cédula de Identidad Personal");
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigFarmacia.DatosRegente.Cedula);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Correo electrónico");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigFarmacia.DatosRegente.Email);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Se encontraba presente al momento de la inspección");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(inspection.InspRutinaVigFarmacia.DatosRegente.PresenteEnInspeccion));
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Horario declarado en la Licencia de Operación");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigFarmacia.DatosRegente.HorarioRegencia);
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Residencia");
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigFarmacia.DatosRegente?.PaisResidencia);
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Provincia");
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigFarmacia.DatosRegente?.Provincia);
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Distrito");
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigFarmacia.DatosRegente?.Distrito);
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Corregimiento");
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigFarmacia.DatosRegente?.Corregimiento);
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Ubicación");
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigFarmacia.DatosRegente?.Ubicacion);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Teléfono / Celular");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(string.Format("{0} / {1}", inspection.InspRutinaVigFarmacia.DatosRegente.TelefonoOfic, inspection.InspRutinaVigFarmacia.DatosRegente?.TelefonoMovil));

                                    if (inspection.InspRutinaVigFarmacia.DatosFarmaceutico != null)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Cuenta con Farmacéutico de Turno");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(inspection.InspRutinaVigFarmacia.DatosFarmaceutico.CuentaConFarmaceutico));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Horario declarado en la Licencia de Operación");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigFarmacia.DatosFarmaceutico.Horario);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Cuenta con Personal (Técnico en Farmacia):");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(inspection.InspRutinaVigFarmacia.DatosFarmaceutico.CuentaConPersonalTecnico));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Nombre de Técnico en Farmacia");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigFarmacia.DatosFarmaceutico.Nombre);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Registro");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigFarmacia.DatosFarmaceutico.NumRegistro);
                                    }
                                });

                            }

                            if (inspection.InspRutinaVigFarmacia.ExpPersonalFarmacia != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("EXPEDIENTES DEL PERSONAL DE LA FARMACIA".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigFarmacia?.ExpPersonalFarmacia?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigFarmacia.ExpPersonalFarmacia.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspRutinaVigFarmacia.EstructOrganizFarmacia != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ESTRUCTURA ORGANIZACIONAL DE LA FARMACIA".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigFarmacia?.EstructOrganizFarmacia?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigFarmacia.EstructOrganizFarmacia.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspRutinaVigFarmacia.EstructFarmacia != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("INFRAESTRUCTURA DE LA FARMACIA".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigFarmacia?.EstructFarmacia?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigFarmacia.EstructFarmacia.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspRutinaVigFarmacia.AreaFisicaFarmacia != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA FÍSICA DE LA FARMACIA".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigFarmacia?.AreaFisicaFarmacia?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigFarmacia.AreaFisicaFarmacia.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspRutinaVigFarmacia.AreaProdControlados != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("AREA DE PRODUCTOS CONTROLADOS (CUANDO APLIQUE).".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigFarmacia?.AreaProdControlados?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigFarmacia.AreaProdControlados.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspRutinaVigFarmacia.RegMovimientoExistencia != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("REGISTRO DE MOVIMIENTO DE EXISTENCIA".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigFarmacia?.RegMovimientoExistencia?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigFarmacia.RegMovimientoExistencia.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspRutinaVigFarmacia.AreaAlmacenMedicamentos != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA DE ALMACEN DE MEDICAMENTOS Y OTROS PRODUCTOS PARA LA SALUD HUMANA. (CUANDO APLIQUE)".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigFarmacia?.AreaAlmacenMedicamentos?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigFarmacia.AreaAlmacenMedicamentos.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspRutinaVigFarmacia.Procedimientos != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("PROCEDIMIENTOS".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigFarmacia?.Procedimientos?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigFarmacia.Procedimientos.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspRutinaVigFarmacia.InventarioMedicamento != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("INVENTARIO DE MEDICAMENTOS DE USO CONTROLADO".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)2);
                                        columns.RelativeColumn((float)2);
                                        columns.RelativeColumn((float)2);
                                        columns.RelativeColumn((float)2);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Nombre del Producto".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Laboratorio Fabricante".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Nº de Lote".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Vencimiento".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Existencia Física".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Registro en Libro o sistema".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigFarmacia?.InventarioMedicamento?.LProductos?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigFarmacia.InventarioMedicamento.LProductos)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Nombre);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Fabricante);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Lote);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.FechaVencimiento?.ToString("dd/MM/yyyy" ?? ""));
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Existencia);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.RegistroSistema);
                                        }

                                    }
                                });

                                column.Item().PaddingVertical(5).AlignLeft().Text("");
                                column.Item().AlignLeft().Text(string.Format("{0} Se realizó inventario al azar de {1} (cantidad) productos, además de estos existen otros a la venta", DataModel.Helper.Helper.GetDescription(inspection.InspRutinaVigFarmacia.InventarioMedicamento.InventarioAlAzar), inspection.InspRutinaVigFarmacia.InventarioMedicamento.CantidadAlAzar));
                                column.Item().AlignLeft().Text(string.Format("{0} Se realizó inventario de todos los productos a la venta", DataModel.Helper.Helper.GetDescription(inspection.InspRutinaVigFarmacia.InventarioMedicamento.InventarioProductosVenta)));

                            }

                            column.Item().PaddingVertical(5).AlignTop().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn();
                                });

                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONES GENERALES").Bold();
                                });

                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosConclusiones?.ObservacionesFinales);

                            });

                            column.Item().PaddingVertical(5).Text("OBSERVACIÓN:").Bold();
                            column.Item().Text("El Acta original se mantendrá en el expediente del establecimiento que permanece en la Dirección Nacional de Farmacia y Drogas y se hace entrega de una copia al firmante de esta acta, al finalizar la inspección").Bold();

                            if (inspection.DatosConclusiones != null)
                            {
                                column.Item().PaddingVertical(5).AlignTop().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn();
                                    });

                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("SEGÚN CRITERIO TÉCNICO SE CONCLUYE QUE").Bold();
                                    });

                                    if (inspection.DatosConclusiones.CumpleRequisitosMinOperacion)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("EL LOCAL CUMPLE ESTRUCTURALMENTE CON LOS REQUISITOS MÍNIMOS PARA OPERAR").Bold();
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("EL LOCAL NO CUMPLE ESTRUCTURALMENTE CON LOS REQUISITOS MÍNIMOS PARA OPERAR").Bold();
                                    }

                                    if (inspection.DatosConclusiones.ReprogramaInspeccion)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("SE REPROGRAMA INSPECCIÓN AL ESTABLECIMIENTO").Bold();
                                    }
                                });
                            }

                            column.Item().PaddingVertical(5).Text(string.Format("Esta Acta se levanta en presencia de los abajo firmantes\r\n"));
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                });

                                table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Establecimiento:").Bold();
                                if (!string.IsNullOrEmpty(inspection.InspRutinaVigFarmacia.DatosRepresentLegal?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspRutinaVigFarmacia.DatosRepresentLegal.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitArea);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }


                                if (!string.IsNullOrEmpty(inspection.InspRutinaVigFarmacia.DatosRegente?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspRutinaVigFarmacia.DatosRegente.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }


                                table.Cell().AlignLeft().Text("");

                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Cargo:{2}", inspection.InspRutinaVigFarmacia.DatosRepresentLegal?.Nombre, inspection.InspRutinaVigFarmacia.DatosRepresentLegal?.Cedula, inspection.InspRutinaVigFarmacia.DatosRepresentLegal?.Cargo));
                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Cargo:{2} | Reg.:{3}", inspection.InspRutinaVigFarmacia.DatosRegente?.Nombre, inspection.InspRutinaVigFarmacia.DatosRegente?.Cedula, inspection.InspRutinaVigFarmacia.DatosRegente?.Cargo, inspection.InspRutinaVigFarmacia.DatosRegente?.NumRegistro));

                                table.Cell().AlignLeft().Text("");

                            });

                            column.Item().PaddingVertical(5).Text(" ").Bold();

                            if (inspection.ParticipantesDNFD?.LParticipantes?.Count > 0)
                            {
                                column.Item().Table(table => {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(1);
                                    });

                                    table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Ministerio de Salud (DNFD):").Bold();

                                    foreach (var participant in inspection.ParticipantesDNFD.LParticipantes)
                                    {
                                        table.Cell().Table(tbl =>
                                        {
                                            tbl.ColumnsDefinition(columns =>
                                            {
                                                columns.RelativeColumn(1);
                                            });
                                            if (!string.IsNullOrEmpty(participant.Firma))
                                            {
                                                byte[] data = Convert.FromBase64String(participant.Firma.Split("image/png;base64,")[1]);
                                                MemoryStream memoryStream = new MemoryStream(data);
                                                tbl.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                            }
                                            tbl.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Reg.:{2}", participant.NombreCompleto, participant.CedulaIdentificacion, participant.RegistroNumero));
                                        });
                                    }
                                });
                            }

                            column.Item().PaddingVertical(5).Text(string.Format("Hora de finalización de inspección: {0}", inspection.DatosConclusiones?.FechaFinalizacion?.ToString("dd/MM/yyyy hh:mm tt") ?? ""));

                            column.Item().PaddingVertical(10).Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(4);
                                    columns.RelativeColumn(6);
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                    });
                                    tbl.Header(header =>
                                    {
                                        header.Cell().AlignLeft().Text("Fundamento Legal:").Bold();
                                    });
                                    tbl.Cell().AlignLeft().Text("Ley 66 de 10 de noviembre de 1947");
                                    tbl.Cell().AlignLeft().Text("Ley 1 de 10 de enero de 2001");
                                    tbl.Cell().AlignLeft().Text("Ley 17 de 12 de septiembre de 2014");
                                    tbl.Cell().AlignLeft().Text("Ley 24 de 29 de enero de 1963");
                                    tbl.Cell().AlignLeft().Text("Decreto Ejecutivo 115 de 16 de agosto de 2022");
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                    });

                                    tbl.Header(header =>
                                    {
                                        header.Cell().ColumnSpan(3).AlignLeft().Text("Contáctenos:").Bold();
                                    });

                                    tbl.Cell().AlignLeft().Text("S. Inspecciones");
                                    tbl.Cell().AlignLeft().Text("512-9168/62 (Ext. 1126)");
                                    tbl.Cell().AlignLeft().Text("inspeccionesfyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("S. Auditorías");
                                    tbl.Cell().AlignLeft().Text("512-9168/62");
                                    tbl.Cell().AlignLeft().Text("auditoriafyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Veraguas");
                                    tbl.Cell().AlignLeft().Text("935-0316/18");
                                    tbl.Cell().AlignLeft().Text("orvdnfd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Chiriquí");
                                    tbl.Cell().AlignLeft().Text("774-7410");
                                    tbl.Cell().AlignLeft().Text("fydchiriqui@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Colón");
                                    tbl.Cell().AlignLeft().Text("475-2060 Ext. 5021");
                                    tbl.Cell().AlignLeft().Text("mbramwell@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Panamá Pacífico");
                                    tbl.Cell().AlignLeft().Text("504-2565");
                                    tbl.Cell().AlignLeft().Text("rlquiros@minsa.gob.pa");
                                });
                            });

                        });

                        page.Footer().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                            });


                            table.Cell().AlignRight().AlignBottom().Text(string.Format("Confeccionado: Sección de Inspecciones {0}", DateTime.Now.ToString("dd/MM/yyyy")));
                        });
                    });
                }).GeneratePdf();

                Stream stream = new MemoryStream(byteArray);

                return stream;
            }
            catch { }
            return null;
        }
        //RUTINA VIGILANCIA AGENCIA
        private async Task<Stream> GenerateRutinaVigilanciaAgencia(AUD_InspeccionTB inspection)
        {
            try
            {
                //var inspection = DalService.Get<AUD_InspeccionTB>(InspectionId);

                // code in your main method
                var byteArray = QuestPDF.Fluent.Document.Create(container =>
                {
                    container.Page(page =>
                    {
                        page.Size(PageSizes.A4);
                        page.Margin(5, Unit.Millimetre);
                        page.PageColor(Colors.White);
                        page.DefaultTextStyle(x => x.FontSize(8));
                        //page.DefaultTextStyle(x => x.Color("Black"));

                        var path = System.IO.Path.Combine(env.WebRootPath, "img", "pdf", "Header.png");

                        page.Header().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                            });

                            table.Header(header =>
                            {
                                header.Cell().Image(path);
                                header.Cell().AlignCenter().Text("");
                                header.Cell().AlignRight().AlignMiddle().Text(string.Format("Acta N°: {0}\r\nEstatus: {1}", inspection.NumActa, DataModel.Helper.Helper.GetDescription(inspection.StatusInspecciones)));
                            });

                            table.Cell().ColumnSpan(3).AlignLeft().Text("DIRECCIÓN NACIONAL DE FARMACIA Y DROGAS").Bold();
                            table.Cell().ColumnSpan(3).AlignLeft().Text("Departamento de Auditorías de Calidad a Establecimientos Farmacéuticos y No Farmacéuticos");
                            table.Cell().ColumnSpan(3).AlignCenter().Text("ACTA DE VERIFICACIÓN – VIGILANCIA OPERATIVA AGENCIA DISTRIBUIDORA".ToUpper()).Bold();
                        });

                        page.Content().PaddingVertical(8).Column(column =>
                        {

                            column.Item().AlignLeft().Text(string.Format("Hora de Inicio: {0}", inspection.FechaInicio.ToString("hh:mm tt")));
                            column.Item().AlignLeft().Text(string.Format("Fecha: {0}", inspection.FechaInicio.ToString("dd/MM/yyyy")));
                            column.Item().AlignLeft().Text(string.Format("No. Recibo: {0}", inspection.DatosEstablecimiento.ReciboPago));

                            column.Item().AlignLeft().Text(string.Format("TIPO DE INSPECCIÓN: {0}", DataModel.Helper.Helper.GetDescription(inspection.TipoActa)));
                            column.Item().AlignLeft().Text(string.Format("TIPO DE ESTABLECIMIENTO: {0}", DataModel.Helper.Helper.GetDescription(inspection.DatosEstablecimiento?.Establecimiento?.TipoEstablecimiento ?? DataModel.Helper.enumAUD_TipoEstablecimiento.None)));

                            if (inspection.DatosEstablecimiento != null)
                            {
                                column.Item().PaddingVertical(5).AlignTop().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.3);
                                        columns.RelativeColumn((float)0.7);
                                    });

                                    table.Header(header =>
                                    {
                                        header.Cell().ColumnSpan(2).Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("GENERALIDADES DEL ESTABLECIMIENTO Y SOLICITANTE").Bold();
                                    });

                                    //Establecimiento
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("NOMBRE DEL ESTABLECIMIENTO");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento.Nombre);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Provincia");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento.Provincia?.Nombre ?? "");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Distrito");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento.Distrito?.Nombre ?? "");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Corregimiento");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento.Corregimiento?.Nombre ?? "");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Ubicación");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento.Direccion);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Teléfono / Celular");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(string.Format("{0}", inspection.DatosEstablecimiento.Telefono));
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Número de Licencia de Operación");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(string.Format("{0}", inspection.DatosEstablecimiento.NumLicencia));
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Vigente Desde");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(string.Format("{0}", inspection.DatosEstablecimiento.VigenteDesde?.ToString("dd/MM/yyyy") ?? ""));
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Vigente Hasta");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(string.Format("{0}", inspection.DatosEstablecimiento.VigenteHasta?.ToString("dd/MM/yyyy") ?? ""));

                                    if (inspection.InspRutinaVigAgencia.DatosRepresentLegal != null)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Nombre del Representante Legal o Propietario");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigAgencia.DatosRepresentLegal.Nombre);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Cédula de Identidad Personal");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigAgencia.DatosRepresentLegal.Cedula);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Correo electrónico");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigAgencia.DatosRepresentLegal.Email);
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Residencia");
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigAgencia.DatosSolicitante?.PaisResidencia);
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Provincia");
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigAgencia.DatosSolicitante?.Provincia);
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Distrito");
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigAgencia.DatosSolicitante?.Distrito);
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Corregimiento");
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigAgencia.DatosSolicitante?.Corregimiento);
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Ubicación");
                                        //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigAgencia.DatosSolicitante?.Direccion);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Teléfono / Celular");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(string.Format("{0} / {1}", inspection.InspRutinaVigAgencia.DatosRepresentLegal.TelefonoResid, inspection.InspRutinaVigAgencia.DatosRepresentLegal.TelefonoMovil));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Profesión");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigAgencia.DatosRepresentLegal.Profesion);
                                    }

                                    table.Footer(footer =>
                                    {
                                        footer.Cell().ColumnSpan(2).Border(1).BorderColor(Colors.Black).AlignLeft().Text("Ley 66 de 10 de noviembre de 1947. Código Sanitario de la República de Panamá. (G.O. 10467 de 6 de diciembre de 1947). Artículo 200. Prohíbese ejercer conjuntamente las profesiones de médico-cirujano y farmacéutico. A partir de la aprobación de este código, ningún médico que ejerza la profesión podrá ser dueño por sí mismo o por interpuesta persona, accionista o tener participación comercial cualquiera en establecimientos en que se fabriquen, preparen o vendan medicinas y artículos de cualquier clase que se usen para la prevención o curación de enfermedades, corrección de defectos o para el diagnóstico");
                                    });
                                });

                            }

                            if (inspection.InspRutinaVigAgencia.DatosRegente != null)
                            {
                                column.Item().PaddingVertical(5).AlignTop().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.3);
                                        columns.RelativeColumn((float)0.7);
                                    });

                                    table.Header(header =>
                                    {
                                        header.Cell().ColumnSpan(2).Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("DATOS SOBRE EL REGENTE FARMACÉUTICO DE LA EMPRESA").Bold();
                                    });

                                    //Establecimiento
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Nombre");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigAgencia.DatosRegente.Nombre);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Registro de Idoneidad");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigAgencia.DatosRegente.NumRegistro);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Cédula de Identidad Personal");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigAgencia.DatosRegente.Cedula);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Correo electrónico");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigAgencia.DatosRegente.Email);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Se encontraba presente al momento de la inspección?");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(inspection.InspRutinaVigAgencia.DatosRegente.PresenteEnInspeccion));
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("El Regente Farmacéutico realiza otras funciones del dentro de la empresa?");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(inspection.InspRutinaVigAgencia.DatosRegente.RealizaOtraFuncion));
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Horario declarado en la Licencia de Operación");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigAgencia.DatosRegente.HorarioRegencia);
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Residencia");
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigAgencia.DatosRegente?.PaisResidencia);
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Provincia");
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigAgencia.DatosRegente?.Provincia);
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Distrito");
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigAgencia.DatosRegente?.Distrito);
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Corregimiento");
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigAgencia.DatosRegente?.Corregimiento);
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Ubicación");
                                    //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspRutinaVigAgencia.DatosRegente?.Ubicacion);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Teléfono / Celular");
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(string.Format("{0} / {1}", inspection.InspRutinaVigAgencia.DatosRegente.TelefonoOfic, inspection.InspRutinaVigAgencia.DatosRegente?.TelefonoMovil));

                                });

                            }

                            if (inspection.InspRutinaVigAgencia.CondCaractEstablecimiento != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("CONDICIONES Y CARACTERÍSTICAS DEL ESTABLECIMIENTO".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigAgencia?.CondCaractEstablecimiento?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigAgencia.CondCaractEstablecimiento.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspRutinaVigAgencia.AreaAdministrativa != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA ADMINSITRATIVA".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigAgencia?.AreaAdministrativa?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigAgencia.AreaAdministrativa.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspRutinaVigAgencia.AreaRecepcionProducto != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA DE RECEPCIÓN DE PRODUCTOS".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigAgencia?.AreaRecepcionProducto?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigAgencia.AreaRecepcionProducto.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspRutinaVigAgencia.AreaAlmacenamiento != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA DE ALMACENAMIENTO".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigAgencia?.AreaAlmacenamiento?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigAgencia.AreaAlmacenamiento.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspRutinaVigAgencia.AreaProductosDevueltosVencidos != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA PARA PRODUCTOS DEVUELTOS Y VENCIDOS ".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigAgencia?.AreaProductosDevueltosVencidos?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigAgencia.AreaProductosDevueltosVencidos.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspRutinaVigAgencia.AreaProductosRetiradosMercado != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA PARA PRODUCTOS RETIRADOS DEL MERCADO".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigAgencia?.AreaProductosRetiradosMercado?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigAgencia.AreaProductosRetiradosMercado.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspRutinaVigAgencia.AreaDespachoProductos != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA DE DESPACHO DE PRODUCTOS".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigAgencia?.AreaDespachoProductos?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigAgencia.AreaDespachoProductos.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspRutinaVigAgencia.AreaAlmacenProdReqCadenaFrio != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA DE ALMACENAMIENTO DE PRODUCTOS QUE REQUIEREN CADENA DE FRÍO (CUANDO APLIQUE)".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigAgencia?.AreaAlmacenProdReqCadenaFrio?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigAgencia.AreaAlmacenProdReqCadenaFrio.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspRutinaVigAgencia.AreaAlmacenProdVolatiles != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA DE ALMACENAMIENTO DE PRODUCTOS VOLATILES (CUANDO APLIQUE)".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigAgencia?.AreaAlmacenProdVolatiles?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigAgencia.AreaAlmacenProdVolatiles.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspRutinaVigAgencia.AreaAlmacenPlaguicidas != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA DE ALMACENAMIENTO DE PLAGUICIDAS DE USO DOMÉSTICO Y DE SALUD PÚBLICA (CUANDO APLIQUE)".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigAgencia?.AreaAlmacenPlaguicidas?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigAgencia.AreaAlmacenPlaguicidas.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspRutinaVigAgencia.AreaAlmacenMateriaPrima != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA DE ALMACENAMIENTO DE MATERIA PRIMA PARA LA INDUSTRIA FARMACÉUTICA".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigAgencia?.AreaAlmacenMateriaPrima?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigAgencia.AreaAlmacenMateriaPrima.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspRutinaVigAgencia.AreaAlmacenProdSujetosControl != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA DE ALMACENAMIENTO DE PRODUCTOS SUJETOS A CONTROL (CUANDO APLIQUE)".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigAgencia?.AreaAlmacenProdSujetosControl?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigAgencia.AreaAlmacenProdSujetosControl.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspRutinaVigAgencia.Procedimientos != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("PROCEDIMIENTOS".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigAgencia?.Procedimientos?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigAgencia.Procedimientos.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspRutinaVigAgencia.Transporte != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Transporte".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigAgencia?.Transporte?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigAgencia.Transporte.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspRutinaVigAgencia.InventarioMedicamento != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("INVENTARIO DE MEDICAMENTOS DE USO CONTROLADO".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)2);
                                        columns.RelativeColumn((float)2);
                                        columns.RelativeColumn((float)2);
                                        columns.RelativeColumn((float)2);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Nombre del Producto".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Laboratorio Fabricante".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Nº de Lote".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Vencimiento".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Existencia Física".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Registro en Libro o sistema".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigAgencia?.InventarioMedicamento?.LProductos?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigAgencia.InventarioMedicamento.LProductos)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Nombre);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Fabricante);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Lote);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.FechaVencimiento?.ToString("dd/MM/yyyy" ?? ""));
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Existencia);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.RegistroSistema);
                                        }

                                    }
                                });

                                column.Item().PaddingVertical(5).AlignLeft().Text("");
                                column.Item().AlignLeft().Text(string.Format("{0} Se realizó inventario al azar de {1} (cantidad) productos, además de estos existen otros a la venta", DataModel.Helper.Helper.GetDescription(inspection.InspRutinaVigAgencia.InventarioMedicamento.InventarioAlAzar), inspection.InspRutinaVigAgencia.InventarioMedicamento.CantidadAlAzar));
                                column.Item().AlignLeft().Text(string.Format("{0} Se realizó inventario de todos los productos a la venta", DataModel.Helper.Helper.GetDescription(inspection.InspRutinaVigAgencia.InventarioMedicamento.InventarioProductosVenta)));

                            }

                            if (inspection.InspRutinaVigAgencia.Actividades != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Actividades".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigAgencia?.Actividades?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigAgencia.Actividades.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            if (inspection.InspRutinaVigAgencia.Productos != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Productos".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PREGUNTA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("EVALUACIÓN".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    if (inspection.InspRutinaVigAgencia?.Productos?.LContenido?.Count > 0)
                                    {
                                        foreach (var dat in inspection.InspRutinaVigAgencia.Productos.LContenido)
                                        {
                                            if (dat.IsHeader)
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Evaluacion != null ? DataModel.Helper.Helper.GetDescription(dat.Evaluacion.Value) : "");
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                            }
                                        }

                                    }
                                });
                            }

                            
                            column.Item().PaddingVertical(5).AlignTop().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn();
                                });

                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONES GENERALES").Bold();
                                });

                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosConclusiones?.ObservacionesFinales);

                            });

                            column.Item().PaddingVertical(5).Text("OBSERVACIÓN:").Bold();
                            column.Item().Text("El Acta original se mantendrá en el expediente del establecimiento que permanece en la Dirección Nacional de Farmacia y Drogas y se hace entrega de una copia al firmante de esta acta, al finalizar la inspección").Bold();

                            if (inspection.DatosConclusiones != null)
                            {
                                column.Item().PaddingVertical(5).AlignTop().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn();
                                    });

                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("SEGÚN CRITERIO TÉCNICO SE CONCLUYE QUE").Bold();
                                    });

                                    if (inspection.DatosConclusiones.CumpleRequisitosMinOperacion)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("EL LOCAL CUMPLE ESTRUCTURALMENTE CON LOS REQUISITOS MÍNIMOS PARA OPERAR").Bold();
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("EL LOCAL NO CUMPLE ESTRUCTURALMENTE CON LOS REQUISITOS MÍNIMOS PARA OPERAR").Bold();
                                    }

                                    if (inspection.DatosConclusiones.ReprogramaInspeccion)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("SE REPROGRAMA INSPECCIÓN AL ESTABLECIMIENTO").Bold();
                                    }
                                });
                            }

                            column.Item().PaddingVertical(5).Text(string.Format("Esta Acta se levanta en presencia de los abajo firmantes\r\n"));
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                });

                                table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Establecimiento:").Bold();
                                if (!string.IsNullOrEmpty(inspection.InspRutinaVigAgencia.DatosRepresentLegal?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspRutinaVigAgencia.DatosRepresentLegal.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitArea);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }


                                if (!string.IsNullOrEmpty(inspection.InspRutinaVigAgencia.DatosRegente?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspRutinaVigAgencia.DatosRegente.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }


                                table.Cell().AlignLeft().Text("");

                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Cargo:{2}", inspection.InspRutinaVigAgencia.DatosRepresentLegal?.Nombre, inspection.InspRutinaVigAgencia.DatosRepresentLegal?.Cedula, inspection.InspRutinaVigAgencia.DatosRepresentLegal?.Cargo));
                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Cargo:{2} | Reg.:{3}", inspection.InspRutinaVigAgencia.DatosRegente?.Nombre, inspection.InspRutinaVigAgencia.DatosRegente?.Cedula, inspection.InspRutinaVigAgencia.DatosRegente?.Cargo, inspection.InspRutinaVigAgencia.DatosRegente?.NumRegistro));

                                table.Cell().AlignLeft().Text("");

                            });

                            column.Item().PaddingVertical(5).Text(" ").Bold();

                            if (inspection.ParticipantesDNFD?.LParticipantes?.Count > 0)
                            {
                                column.Item().Table(table => {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(1);
                                    });

                                    table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Ministerio de Salud (DNFD):").Bold();

                                    foreach (var participant in inspection.ParticipantesDNFD.LParticipantes)
                                    {
                                        table.Cell().Table(tbl =>
                                        {
                                            tbl.ColumnsDefinition(columns =>
                                            {
                                                columns.RelativeColumn(1);
                                            });
                                            if (!string.IsNullOrEmpty(participant.Firma))
                                            {
                                                byte[] data = Convert.FromBase64String(participant.Firma.Split("image/png;base64,")[1]);
                                                MemoryStream memoryStream = new MemoryStream(data);
                                                tbl.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                            }
                                            tbl.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Reg.:{2}", participant.NombreCompleto, participant.CedulaIdentificacion, participant.RegistroNumero));
                                        });
                                    }
                                });
                            }

                            column.Item().PaddingVertical(5).Text(string.Format("Hora de finalización de inspección: {0}", inspection.DatosConclusiones?.FechaFinalizacion?.ToString("dd/MM/yyyy hh:mm tt") ?? ""));

                            column.Item().PaddingVertical(10).Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(4);
                                    columns.RelativeColumn(6);
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                    });
                                    tbl.Header(header =>
                                    {
                                        header.Cell().AlignLeft().Text("Fundamento Legal:").Bold();
                                    });
                                    tbl.Cell().AlignLeft().Text("Ley 66 de 10 de noviembre de 1947");
                                    tbl.Cell().AlignLeft().Text("Ley 1 de 10 de enero de 2001");
                                    tbl.Cell().AlignLeft().Text("Ley 17 de 12 de septiembre de 2014");
                                    tbl.Cell().AlignLeft().Text("Ley 24 de 29 de enero de 1963");
                                    tbl.Cell().AlignLeft().Text("Decreto Ejecutivo 115 de 16 de agosto de 2022");
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                    });

                                    tbl.Header(header =>
                                    {
                                        header.Cell().ColumnSpan(3).AlignLeft().Text("Contáctenos:").Bold();
                                    });

                                    tbl.Cell().AlignLeft().Text("S. Inspecciones");
                                    tbl.Cell().AlignLeft().Text("512-9168/62 (Ext. 1126)");
                                    tbl.Cell().AlignLeft().Text("inspeccionesfyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("S. Auditorías");
                                    tbl.Cell().AlignLeft().Text("512-9168/62");
                                    tbl.Cell().AlignLeft().Text("auditoriafyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Veraguas");
                                    tbl.Cell().AlignLeft().Text("935-0316/18");
                                    tbl.Cell().AlignLeft().Text("orvdnfd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Chiriquí");
                                    tbl.Cell().AlignLeft().Text("774-7410");
                                    tbl.Cell().AlignLeft().Text("fydchiriqui@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Colón");
                                    tbl.Cell().AlignLeft().Text("475-2060 Ext. 5021");
                                    tbl.Cell().AlignLeft().Text("mbramwell@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Panamá Pacífico");
                                    tbl.Cell().AlignLeft().Text("504-2565");
                                    tbl.Cell().AlignLeft().Text("rlquiros@minsa.gob.pa");
                                });

                           });

                        });

                        page.Footer().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                            });


                            table.Cell().AlignRight().AlignBottom().Text(string.Format("Confeccionado: Sección de Inspecciones {0}", DateTime.Now.ToString("dd/MM/yyyy")));
                        });
                    });
                }).GeneratePdf();

                Stream stream = new MemoryStream(byteArray);

                return stream;
            }
            catch { }
            return null;
        }
        //INVESTIGACIONES
        private async Task<Stream> GenerateInvestigaciones(AUD_InspeccionTB inspection)
        {
            try
            {
                //var inspection = DalService.Get<AUD_InspeccionTB>(InspectionId);
                // code in your main method
                var byteArray = QuestPDF.Fluent.Document.Create(container =>
                {
                    container.Page(page =>
                    {
                        page.Size(PageSizes.A4);
                        page.Margin(5, Unit.Millimetre);
                        page.PageColor(Colors.White);
                        page.DefaultTextStyle(x => x.FontSize(8));
                        //page.DefaultTextStyle(x => x.Color("Black"));

                        var path = System.IO.Path.Combine(env.WebRootPath, "img", "pdf", "Header.png");

                        page.Header().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                            });

                            table.Header(header =>
                            {
                                header.Cell().Image(path);
                                header.Cell().AlignCenter().Text("");
                                header.Cell().AlignRight().AlignMiddle().Text(string.Format("Acta N°: {0}\r\nEstatus: {1}", inspection.NumActa, DataModel.Helper.Helper.GetDescription(inspection.StatusInspecciones)));
                            });

                            table.Cell().ColumnSpan(3).AlignLeft().Text("DIRECCIÓN NACIONAL DE FARMACIA Y DROGAS").Bold();
                            table.Cell().ColumnSpan(3).AlignLeft().Text("Departamento de Auditorías de Calidad a Establecimientos Farmacéuticos y No Farmacéuticos");
                            table.Cell().ColumnSpan(3).AlignCenter().Text("ACTA DE INVESTIGACIONES").Bold();
                        });

                        page.Content().PaddingVertical(8).Column(column =>
                        {
                            column.Item().AlignLeft().Text(string.Format("Hora de Inicio: {0}", inspection.FechaInicio.ToString("hh:mm tt")));
                            column.Item().AlignLeft().Text(string.Format("Fecha: {0}", inspection.FechaInicio.ToString("dd/MM/yyyy")));
                            column.Item().AlignLeft().Text(string.Format("No. Recibo: {0}", inspection.DatosEstablecimiento.ReciboPago));

                            column.Item().AlignLeft().Text(string.Format("TIPO DE INSPECCIÓN: {0}", DataModel.Helper.Helper.GetDescription(inspection.TipoActa)));
                            column.Item().AlignLeft().Text(string.Format("TIPO DE ESTABLECIMIENTO: {0}", DataModel.Helper.Helper.GetDescription(inspection.DatosEstablecimiento?.Establecimiento?.TipoEstablecimiento ?? DataModel.Helper.enumAUD_TipoEstablecimiento.None)));

                            
                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Nombre del establecimiento:{0}", inspection.DatosEstablecimiento?.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Provincia:{0}", inspection.DatosEstablecimiento?.Provincia?.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Distrito:{0}", inspection.DatosEstablecimiento?.Distrito?.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Corregimiento:{0}", inspection.DatosEstablecimiento?.Corregimiento?.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Ubicación:{0}", inspection.DatosEstablecimiento?.Direccion));
                            column.Item().AlignLeft().Text(string.Format("Número de Licencia de Operación:{0}", inspection?.DatosEstablecimiento?.NumLicencia));
                            column.Item().AlignLeft().Text(string.Format("Aviso de Operación:{0}", inspection?.DatosEstablecimiento?.AvisoOperaciones));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Siendo las {0} del {1} de {2} de {3}; actuando como colaboradores de la Dirección Nacional de Farmacia y Drogas del Ministerio de Salud, procedimos a realizar inspección al establecimiento antes descrito, para verificar {4}",
                                inspection.FechaInicio.ToString("hh:mm tt"), inspection.FechaInicio.Day, Helper.Helper.GetMonthNameByMonthNumber(int.Parse(inspection.FechaInicio.ToString("MM"))), inspection.FechaInicio.Year, inspection?.InspInvestigacion?.DetallesInvestigacion?.DetalleVerificacion));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Al llegar al establecimiento fuimos atendidos por {0} con cargo de {1}, y documento de identidad personal N° {2}. A quien se le informó el motivo de la visita.",
                                inspection?.InspInvestigacion?.DatosAtendidosPor?.Nombre, inspection?.InspInvestigacion?.DatosAtendidosPor?.Cargo, inspection.InspInvestigacion?.DatosAtendidosPor?.Cedula));

                            column.Item().PaddingVertical(5).AlignLeft().Text("Por la Dirección Nacional de Farmacia y Drogas, participaron:");
                            if (inspection.ParticipantesDNFD?.LParticipantes?.Count > 0)
                            {
                                column.Item().Table(tbl =>
                                {
                                    tbl.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.7);
                                        columns.RelativeColumn((float)0.3);
                                    });

                                    tbl.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignLeft().Text("Nombre").Bold();
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignLeft().Text("No. Idoneidad").Bold();
                                    });

                                    foreach (var participant in inspection.ParticipantesDNFD.LParticipantes)
                                    {
                                        tbl.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(participant.NombreCompleto);
                                        tbl.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(participant.RegistroNumero);
                                    }
                                });
                            }

                            if (inspection.InspInvestigacion.DetallesInvestigacion != null)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("A continuación, se describen los detalles de la inspección:\r\n{0}", inspection.InspInvestigacion.DetallesInvestigacion.DetalleInspeccion));
                                column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Se adjunta acta de retención y retiro de productos: {0}", DataModel.Helper.Helper.GetDescription(inspection.InspInvestigacion.DetallesInvestigacion.AdjuntaActaRetencion)));
                                column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("No se puede movilizar los productos hasta culminar la investigación: {0}", DataModel.Helper.Helper.GetDescription(inspection.InspInvestigacion.DetallesInvestigacion.MovilizarProductos)));
                            }

                            column.Item().PaddingVertical(5).AlignTop().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn();
                                });

                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONES GENERALES").Bold();
                                });

                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection?.DatosConclusiones?.ObservacionesFinales);

                            });

                            column.Item().PaddingVertical(5).AlignTop().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn();
                                });

                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("se finaliza la inspección por".ToUpper()).Bold();
                                });
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection?.InspInvestigacion?.DetallesInvestigacion?.DetalleVerificacion).Bold();

                                //table.Header(header =>
                                //{
                                //    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("SEGÚN CRITERIO TÉCNICO SE CONCLUYE QUE").Bold();
                                //});

                                //if (inspection.InspInvestigacion.DatosConclusiones.CumpleRequisitosMinOperacion)
                                //{
                                //    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("EL LOCAL CUMPLE ESTRUCTURALMENTE CON LOS REQUISITOS MÍNIMOS PARA OPERAR").Bold();
                                //}
                                //else
                                //{
                                //    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("EL LOCAL NO CUMPLE ESTRUCTURALMENTE CON LOS REQUISITOS MÍNIMOS PARA OPERAR").Bold();
                                //}
                            });

                            column.Item().PaddingVertical(5).Text(string.Format("Esta Acta se levanta en presencia de los abajo firmantes\r\n"));
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                });

                                table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Establecimiento:").Bold();
                                if (!string.IsNullOrEmpty(inspection?.InspInvestigacion?.DatosAtendidosPor?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspInvestigacion.DatosAtendidosPor.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitArea);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }


                                //if (!string.IsNullOrEmpty(inspection?.InspInvestigacion?.DatosAtendidosPor?.Firma))
                                //{
                                //    //var bytes = Convert.FromBase64String(base64encodedstring);
                                //    //var contents = new StreamContent(new MemoryStream(bytes));
                                //    byte[] data = Convert.FromBase64String(inspection.InspInvestigacion.DatosAtendidosPor.Firma.Split("image/png;base64,")[1]);
                                //    MemoryStream memoryStream = new MemoryStream(data);
                                //    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                //}
                                //else
                                //{
                                    table.Cell().AlignLeft().Text("");
                                //}


                                table.Cell().AlignLeft().Text("");

                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Cargo:{2}", inspection?.InspInvestigacion?.DatosAtendidosPor?.Nombre, inspection?.InspInvestigacion?.DatosAtendidosPor?.Cedula, inspection?.InspInvestigacion?.DatosAtendidosPor?.Cargo));
                                //table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Cargo:{2} | Reg.:{3}", inspection.InspRutinaVigAgencia.DatosRegente?.Nombre, inspection.InspRutinaVigAgencia.DatosRegente?.Cedula, inspection.InspRutinaVigAgencia.DatosRegente?.Cargo, inspection.InspRutinaVigAgencia.DatosRegente?.NumRegistro));
                                table.Cell().AlignLeft().Text("");

                                table.Cell().AlignLeft().Text("");

                            });

                            if (inspection.ParticipantesDNFD?.LParticipantes?.Count > 0)
                            {
                                column.Item().Table(table => {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(1);
                                    });

                                    table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Ministerio de Salud (DNFD):").Bold();

                                    foreach (var participant in inspection.ParticipantesDNFD.LParticipantes)
                                    {
                                        table.Cell().Table(tbl =>
                                        {
                                            tbl.ColumnsDefinition(columns =>
                                            {
                                                columns.RelativeColumn(1);
                                            });
                                            if (!string.IsNullOrEmpty(participant.Firma))
                                            {
                                                byte[] data = Convert.FromBase64String(participant.Firma.Split("image/png;base64,")[1]);
                                                MemoryStream memoryStream = new MemoryStream(data);
                                                tbl.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                            }
                                            tbl.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Reg.:{2}", participant.NombreCompleto, participant.CedulaIdentificacion, participant.RegistroNumero));
                                        });
                                    }
                                });
                            }


                            column.Item().PaddingVertical(5).Text(string.Format("Fecha y Hora de finalizada la inspección: {0}", inspection.DatosConclusiones?.FechaFinalizacion?.ToString("dd/MM/yyyy hh:mm tt") ?? ""));

                            column.Item().PaddingVertical(10).Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(4);
                                    columns.RelativeColumn(6);
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                    });
                                    tbl.Header(header =>
                                    {
                                        header.Cell().AlignLeft().Text("Fundamento Legal:").Bold();
                                    });
                                    tbl.Cell().AlignLeft().Text("Ley 66 de 10 de noviembre de 1947");
                                    tbl.Cell().AlignLeft().Text("Ley 1 de 10 de enero de 2001");
                                    tbl.Cell().AlignLeft().Text("Ley 17 de 12 de septiembre de 2014");
                                    tbl.Cell().AlignLeft().Text("Ley 24 de 29 de enero de 1963");
                                    tbl.Cell().AlignLeft().Text("Decreto Ejecutivo 115 de 16 de agosto de 2022");
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                    });

                                    tbl.Header(header =>
                                    {
                                        header.Cell().ColumnSpan(3).AlignLeft().Text("Contáctenos:").Bold();
                                    });

                                    tbl.Cell().AlignLeft().Text("S. Inspecciones");
                                    tbl.Cell().AlignLeft().Text("512-9168/62 (Ext. 1126)");
                                    tbl.Cell().AlignLeft().Text("inspeccionesfyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("S. Auditorías");
                                    tbl.Cell().AlignLeft().Text("512-9168/62");
                                    tbl.Cell().AlignLeft().Text("auditoriafyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Veraguas");
                                    tbl.Cell().AlignLeft().Text("935-0316/18");
                                    tbl.Cell().AlignLeft().Text("orvdnfd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Chiriquí");
                                    tbl.Cell().AlignLeft().Text("774-7410");
                                    tbl.Cell().AlignLeft().Text("fydchiriqui@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Colón");
                                    tbl.Cell().AlignLeft().Text("475-2060 Ext. 5021");
                                    tbl.Cell().AlignLeft().Text("mbramwell@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Panamá Pacífico");
                                    tbl.Cell().AlignLeft().Text("504-2565");
                                    tbl.Cell().AlignLeft().Text("rlquiros@minsa.gob.pa");
                                });

                            });

                        });

                        page.Footer().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                            });

                            
                            table.Cell().AlignRight().AlignBottom().Text(string.Format("Confeccionado: Sección de Inspecciones {0}", DateTime.Now.ToString("dd/MM/yyyy")));
                        });

                    });
                })
                  .GeneratePdf();

                Stream stream = new MemoryStream(byteArray);

                return stream;
            }
            catch { }
            return null;
        }
        //RETIRO Y RETENCION
        private async Task<Stream> GenerateRetentionReceptionPDF(AUD_InspeccionTB inspection)
        {
            try
            {
                //var inspection = DalService.Get<AUD_InspeccionTB>(InspectionId);

                // code in your main method
                var byteArray = QuestPDF.Fluent.Document.Create(container =>
                {
                    container.Page(page =>
                    {
                        page.Size(PageSizes.A4);
                        page.Margin(5, Unit.Millimetre);
                        page.PageColor(Colors.White);
                        page.DefaultTextStyle(x => x.FontSize(8));
                        //page.DefaultTextStyle(x => x.Color("Black"));

                        var path = System.IO.Path.Combine(env.WebRootPath, "img", "pdf", "Header.png");

                        page.Header().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                            });

                            table.Header(header =>
                            {
                                header.Cell().Image(path);
                                header.Cell().AlignCenter().Text("");
                                header.Cell().AlignRight().AlignMiddle().Text(string.Format("Acta N°: {0}\r\nEstatus: {1}", inspection.NumActa, DataModel.Helper.Helper.GetDescription(inspection.StatusInspecciones)));
                            });

                            table.Cell().ColumnSpan(3).AlignLeft().Text("DIRECCIÓN NACIONAL DE FARMACIA Y DROGAS").Bold();
                            table.Cell().ColumnSpan(3).AlignLeft().Text("Departamento de Auditorías de Calidad a Establecimientos Farmacéuticos y No Farmacéuticos");
                            table.Cell().ColumnSpan(3).AlignCenter().Text("ACTA DE RETENCIÓN Y/O RETIRO DE PRODUCTOS FARMACÉUTICOS").Bold();
                        });

                        page.Content().PaddingVertical(8).Column(column =>
                        {
                            string participantes = "";
                            if (inspection.ParticipantesDNFD?.LParticipantes?.Count > 0)
                            {
                                foreach (var partic in inspection.ParticipantesDNFD.LParticipantes)
                                {
                                    participantes += partic.NombreCompleto + ", ";
                                }
                            }

                            column.Item().Text(string.Format("Siendo las {0} del día {1} de {2} de {3}, actuando en representación de la Dirección Nacional de Farmacia y Drogas del Ministerio de Salud, procedimos a efectuar la {4}, de los productos a continuación descritos y que fueron localizados en el establecimiento denominado: {5}, ubicado en: {6}, con Aviso de Operación No. {7} y Licencia de operación {8}/DNFD. Y cuyo Representante Legal es {9} con documento de identidad personal N° {10}. Por la Dirección Nacional de Farmacia y Drogas, participamos: {11}. Y fuimos atendidos por: {12}, con cargo {13} cip: {14}\r\n",
                                inspection.FechaInicio.ToString("hh:mm tt"), inspection.FechaInicio.ToString("dd"), Helper.Helper.GetMonthNameByMonthNumber(int.Parse(inspection.FechaInicio.ToString("MM"))), inspection.FechaInicio.ToString("yyyy"), DataModel.Helper.Helper.GetDescription(inspection.InspRetiroRetencion.RetiroRetencionType), inspection.DatosEstablecimiento?.Nombre ?? "", inspection.DatosEstablecimiento?.Direccion, inspection.DatosEstablecimiento?.AvisoOperaciones, inspection.DatosEstablecimiento?.NumLicencia, inspection.InspRetiroRetencion.DatosRepresentLegal?.Nombre, inspection.InspRetiroRetencion.DatosRepresentLegal?.Cedula, participantes, inspection.InspRetiroRetencion.DatosAtendidosPor?.Nombre, inspection.InspRetiroRetencion.DatosAtendidosPor?.Cargo, inspection.InspRetiroRetencion.DatosAtendidosPor?.Cedula));

                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn();
                                    columns.RelativeColumn();
                                    columns.RelativeColumn();
                                    columns.RelativeColumn();
                                    columns.RelativeColumn();
                                    columns.RelativeColumn();
                                    columns.RelativeColumn();
                                    columns.RelativeColumn();
                                    columns.RelativeColumn();
                                });

                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Nombre del Producto").Bold();
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Presentación Comercial").Bold();
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Fabricante").Bold();
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("País de Fabricación").Bold();
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Lote").Bold();
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Fecha de Exp.").Bold();
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cant. Retenida").Bold();
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cant. Retirada").Bold();
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Motivo de la Retención y/o Retiro").Bold();

                                });

                                //table.Cell().ColumnSpan(3).AlignLeft().Text("DIRECCIÓN NACIONAL DE FARMACIA Y DROGAS").Bold();
                                if (inspection.InspRetiroRetencion?.LProductos?.Count>0)
                                {
                                    foreach (var prod in inspection.InspRetiroRetencion.LProductos)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(prod.Nombre);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(prod.PresentacionComercial);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(prod.Fabricante);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(prod.Pais);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(prod.Lote);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(prod.FechaExp?.ToString("dd/MM/yyyy") ?? "");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(prod.CantidadRetenida);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(prod.CantidadRetirada);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(prod.Motivo);

                                        static IContainer CellStyle(IContainer container) => container.BorderBottom(1).BorderColor(Colors.Grey.Lighten2).PaddingVertical(5);
                                    }
                                }

                            });

                            column.Item().PaddingVertical(5).Text(string.Format("Los productos retenidos y retirados del establecimiento se mantendrán bajo custodia en las instalaciones de la Dirección Nacional de Farmacia y Drogas, hasta culminar las investigaciones.\r\nLos productos farmacéuticos que se mantengan retenidos en el local no podrán ser movidos del lugar donde se fijó su ubicación al momento de levantar este documento.\r\n"));

                            ////////////////////////////
                            ///

                            column.Item().PaddingVertical(5).Text(string.Format("Esta Acta se levanta en presencia de los abajo firmantes\r\n"));
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                });

                                table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Establecimiento:").Bold();
                                if (!string.IsNullOrEmpty(inspection.InspRetiroRetencion.DatosAtendidosPor?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspRetiroRetencion.DatosAtendidosPor.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }
                                //if (!string.IsNullOrEmpty(inspection.InspRetiroRetencion.DatosRegente?.Firma))
                                //{
                                //    //var bytes = Convert.FromBase64String(base64encodedstring);
                                //    //var contents = new StreamContent(new MemoryStream(bytes));
                                //    byte[] data = Convert.FromBase64String(inspection.InspRetiroRetencion.DatosRegente.Firma.Split("image/png;base64,")[1]);
                                //    MemoryStream memoryStream = new MemoryStream(data);
                                //    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                //}
                                //else
                                //{
                                //    table.Cell().AlignLeft().Text("");
                                //}
                                table.Cell().AlignLeft().Text("");

                                table.Cell().AlignLeft().Text("");

                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Cargo:{2}", inspection.InspRetiroRetencion.DatosAtendidosPor?.Nombre, inspection.InspRetiroRetencion.DatosAtendidosPor?.Cedula, inspection.InspRetiroRetencion.DatosAtendidosPor?.Cargo));
                                table.Cell().AlignLeft().Text(""); //table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Cargo:{2} | Reg.:{3}", inspection.InspRetiroRetencion.DatosRegente.Nombre, inspection.InspRetiroRetencion.DatosRegente.Cedula, inspection.InspRetiroRetencion.DatosRegente.Cargo, inspection.InspRetiroRetencion.DatosRegente.NumRegistro));

                                table.Cell().AlignLeft().Text("");

                                table.Cell().ColumnSpan(3).AlignLeft().PaddingVertical(5).Text(" ").Bold();
                                if (inspection.ParticipantesDNFD?.LParticipantes?.Count >0)
                                {
                                    table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Ministerio de Salud (DNFD):").Bold();

                                    foreach (var participant in inspection.ParticipantesDNFD.LParticipantes)
                                    {
                                        table.Cell().Table(tbl =>
                                        {
                                            tbl.ColumnsDefinition(columns =>
                                            {
                                                columns.RelativeColumn(1);
                                            });
                                            if (!string.IsNullOrEmpty(participant.Firma))
                                            {
                                                byte[] data = Convert.FromBase64String(participant.Firma.Split("image/png;base64,")[1]);
                                                MemoryStream memoryStream = new MemoryStream(data);
                                                tbl.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                            }
                                            tbl.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Reg.:{2}", participant.NombreCompleto, participant.CedulaIdentificacion, participant.RegistroNumero));

                                        });
                                    }
                                }

                            });

                            column.Item().PaddingVertical(5).Text(" ");
                            column.Item().AlignBottom().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn((float)1.5);
                                });

                                table.Cell().AlignLeft().Text(" ");

                                table.Cell().Border(1).BorderColor(Colors.Black).Padding(10).AlignBottom().AlignLeft().Column(col =>
                                {
                                    col.Item().AlignLeft().Text("Para uso de la Administración de la DNFD:").Bold();
                                    col.Item().PaddingTop(5).Text("Productos recibidos por (nombre): _____________________________________________________________");
                                    col.Item().PaddingTop(15).Text("(firma): ___________________________________________________________________________________________");
                                    col.Item().PaddingTop(15).Text("Fecha (dd/MM/yyyy): __________________________     Hora: __________________________");
                                });

                            });

                            column.Item().PaddingVertical(5).Text(string.Format("Fecha y Hora de finalizada la inspección: {0}", inspection.DatosConclusiones?.FechaFinalizacion?.ToString("dd/MM/yyyy hh:mm tt") ?? ""));

                            column.Item().PaddingVertical(10).Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(4);
                                    columns.RelativeColumn(6);
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                    });
                                    tbl.Header(header =>
                                    {
                                        header.Cell().AlignLeft().Text("Fundamento Legal:").Bold();
                                    });
                                    tbl.Cell().AlignLeft().Text("Ley 66 de 10 de noviembre de 1947");
                                    tbl.Cell().AlignLeft().Text("Ley 1 de 10 de enero de 2001");
                                    tbl.Cell().AlignLeft().Text("Ley 17 de 12 de septiembre de 2014");
                                    tbl.Cell().AlignLeft().Text("Ley 24 de 29 de enero de 1963");
                                    tbl.Cell().AlignLeft().Text("Decreto Ejecutivo 115 de 16 de agosto de 2022");
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                    });

                                    tbl.Header(header =>
                                    {
                                        header.Cell().ColumnSpan(3).AlignLeft().Text("Contáctenos:").Bold();
                                    });

                                    tbl.Cell().AlignLeft().Text("S. Inspecciones");
                                    tbl.Cell().AlignLeft().Text("512-9168/62 (Ext. 1126)");
                                    tbl.Cell().AlignLeft().Text("inspeccionesfyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("S. Auditorías");
                                    tbl.Cell().AlignLeft().Text("512-9168/62");
                                    tbl.Cell().AlignLeft().Text("auditoriafyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Veraguas");
                                    tbl.Cell().AlignLeft().Text("935-0316/18");
                                    tbl.Cell().AlignLeft().Text("orvdnfd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Chiriquí");
                                    tbl.Cell().AlignLeft().Text("774-7410");
                                    tbl.Cell().AlignLeft().Text("fydchiriqui@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Colón");
                                    tbl.Cell().AlignLeft().Text("475-2060 Ext. 5021");
                                    tbl.Cell().AlignLeft().Text("mbramwell@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Panamá Pacífico");
                                    tbl.Cell().AlignLeft().Text("504-2565");
                                    tbl.Cell().AlignLeft().Text("rlquiros@minsa.gob.pa");
                                });

                            });


                        });

                        page.Footer().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                            });


                            table.Cell().AlignRight().AlignBottom().Text(string.Format("Confeccionado: Sección de Inspecciones {0}", DateTime.Now.ToString("dd/MM/yyyy")));
                        });
                    });
                })
                  .GeneratePdf();

                Stream stream = new MemoryStream(byteArray);

                return stream;
            }
            catch { }
            return null;
        }
        //CIERRE DE OPERACIONES
        private async Task<Stream> GenerateCierreOperaciones(AUD_InspeccionTB inspection)
        {
            try
            {
                //var inspection = DalService.Get<AUD_InspeccionTB>(InspectionId);

                // code in your main method
                var byteArray = QuestPDF.Fluent.Document.Create(container =>
                {
                    container.Page(page =>
                    {
                        page.Size(PageSizes.A4);
                        page.Margin(5, Unit.Millimetre);
                        page.PageColor(Colors.White);
                        page.DefaultTextStyle(x => x.FontSize(8));
                        //page.DefaultTextStyle(x => x.Color("Black"));

                        var path = System.IO.Path.Combine(env.WebRootPath, "img", "pdf", "Header.png");

                        page.Header().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                            });

                            table.Header(header =>
                            {
                                header.Cell().Image(path);
                                header.Cell().AlignCenter().Text("");
                                header.Cell().AlignRight().AlignMiddle().Text(string.Format("Acta N°: {0}\r\nEstatus: {1}", inspection.NumActa, DataModel.Helper.Helper.GetDescription(inspection.StatusInspecciones)));
                            });

                            table.Cell().ColumnSpan(3).AlignLeft().Text("DIRECCIÓN NACIONAL DE FARMACIA Y DROGAS").Bold();
                            table.Cell().ColumnSpan(3).AlignLeft().Text("Departamento de Auditorías de Calidad a Establecimientos Farmacéuticos y No Farmacéuticos");
                            table.Cell().ColumnSpan(3).AlignCenter().Text("ACTA DE CIERRE DE OPERACIONES DE ESTABLECIMIENTOS FARMACEUTICOS".ToUpper()).Bold();
                        });

                        page.Content().PaddingVertical(8).Column(column =>
                        {
                            column.Item().AlignLeft().Text(string.Format("Hora de Inicio: {0}", inspection.FechaInicio.ToString("hh:mm tt")));
                            column.Item().AlignLeft().Text(string.Format("Fecha: {0}", inspection.FechaInicio.ToString("dd/MM/yyyy")));

                            column.Item().AlignLeft().Text(string.Format("TIPO DE INSPECCIÓN: {0}", DataModel.Helper.Helper.GetDescription(inspection.TipoActa)));
                            column.Item().AlignLeft().Text(string.Format("TIPO DE ESTABLECIMIENTO: {0}", DataModel.Helper.Helper.GetDescription(inspection.Establecimiento.TipoEstablecimiento)));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("DATOS GENERALES:".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Nombre del Establecimiento: {0}", inspection.DatosEstablecimiento?.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Nº de Licencia de Operación: {0}, Fecha de vencimiento: {1}", inspection.DatosEstablecimiento?.NumLicencia, inspection.DatosEstablecimiento?.VigenteHasta?.ToString("dd/MM/yyyy") ?? ""));
                            column.Item().AlignLeft().Text(string.Format("Provincia: {0}, Distrito: {1}, Corregimiento: {2}", inspection.DatosEstablecimiento?.Provincia?.Nombre, inspection.DatosEstablecimiento?.Distrito?.Nombre, inspection.DatosEstablecimiento?.Corregimiento?.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Ubicación: {0}", inspection.DatosEstablecimiento?.Direccion));
                            column.Item().AlignLeft().Text(string.Format("Teléfono(s): {0}, Correo electrónico: {1}", inspection.DatosEstablecimiento?.Telefono, inspection.DatosEstablecimiento?.Correo));

                            //column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Datos del Responsable del Establecimiento:".ToUpper())).Bold();
                            //column.Item().AlignLeft().Text(string.Format("Nombre del Responsable: {0}", inspection.InspCierreOperacion.DatosResponsable.Nombre));
                            //column.Item().AlignLeft().Text(string.Format("Nº de Cédula: {0}", inspection.InspCierreOperacion.DatosResponsable.Cedula));
                            //column.Item().AlignLeft().Text(string.Format("Cargo: {0}", inspection.InspCierreOperacion.DatosResponsable.Cargo));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Siendo las {0} del {1} de {2} de {3}, y actuando como colaboradores de la Dirección Nacional de Farmacia y Drogas del Ministerio de Salud, los suscritos:",
                                inspection.FechaInicio.ToString("hh:mm tt"), inspection.FechaInicio.Day, Helper.Helper.GetMonthNameByMonthNumber(int.Parse(inspection.FechaInicio.ToString("MM"))), inspection.FechaInicio.Year));

                            if (inspection.ParticipantesDNFD?.LParticipantes != null)
                            {
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(1);
                                    });

                                    foreach (var participant in inspection.ParticipantesDNFD.LParticipantes)
                                    {
                                        table.Cell().Table(tbl =>
                                        {
                                            tbl.ColumnsDefinition(columns =>
                                            {
                                                columns.RelativeColumn(6);
                                                columns.RelativeColumn(4);
                                            });

                                            tbl.Cell().AlignLeft().Text(string.Format("Lic. {0}", participant.NombreCompleto));
                                            tbl.Cell().AlignLeft().Text(string.Format("Idoneidad profesional N°. {0}", participant.RegistroNumero));

                                        });
                                    }
                                });
                            }
                            column.Item().AlignLeft().Text(string.Format("Procedimos a efectuar inspección al establecimiento antes señalado, para constatar “in situ” el CIERRE DE OPERACIONES, para dar respuesta a solicitud de {0}", inspection.InspCierreOperacion.DatosInspeccion?.SolicitudCierre));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Observaciones sobre la ubicación:  {0}", inspection.InspCierreOperacion.DatosInspeccion?.ObservacionUbicacion));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Observaciones sobre el destino de los productos farmacéuticos (incluir los sujetos a control especial y el libro de registro):  {0}", inspection.InspCierreOperacion.DatosInspeccion?.DestinoProductos));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Por lo cual, concluyen las operaciones del establecimiento que fueron autorizadas a través de licencia de operación N° {0}, y se procederá a cerrar el expediente  que reposa en la Dirección Nacional de Farmacia y Drogas.", inspection.DatosEstablecimiento?.NumLicencia));

                            column.Item().PaddingVertical(5).Text(string.Format("Los abajo firmantes damos fe de lo antes descrito"));
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                });

                                table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Establecimiento:").Bold();
                                if (!string.IsNullOrEmpty(inspection.InspCierreOperacion.DatosRepresentLegal?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspCierreOperacion.DatosRepresentLegal.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }
                                table.Cell().AlignLeft().Text("");
                                table.Cell().AlignLeft().Text("");

                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1}", inspection.InspCierreOperacion.DatosRepresentLegal?.Nombre, inspection.InspCierreOperacion.DatosRepresentLegal?.Cedula));

                                table.Cell().AlignLeft().Text("");
                                table.Cell().AlignLeft().Text("");

                                table.Cell().ColumnSpan(3).AlignLeft().PaddingVertical(5).Text(" ").Bold();
                                if (inspection.ParticipantesDNFD?.LParticipantes?.Count > 0)
                                {
                                    table.Cell().ColumnSpan(3).AlignLeft().Text("Por la Dirección Nacional de Farmacia y Drogas:").Bold();

                                    foreach (var participant in inspection.ParticipantesDNFD.LParticipantes)
                                    {
                                        table.Cell().Table(tbl =>
                                        {
                                            tbl.ColumnsDefinition(columns =>
                                            {
                                                columns.RelativeColumn(1);
                                            });
                                            if (!string.IsNullOrEmpty(participant.Firma))
                                            {
                                                byte[] data = Convert.FromBase64String(participant.Firma.Split("image/png;base64,")[1]);
                                                MemoryStream memoryStream = new MemoryStream(data);
                                                tbl.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                            }
                                            tbl.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Reg.:{2}", participant.NombreCompleto, participant.CedulaIdentificacion, participant.RegistroNumero));

                                        });
                                    }
                                }
                            });

                            column.Item().PaddingVertical(10).Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(4);
                                    columns.RelativeColumn(6);
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                    });
                                    tbl.Header(header =>
                                    {
                                        header.Cell().AlignLeft().Text("Fundamento Legal:").Bold();
                                    });
                                    tbl.Cell().AlignLeft().Text("Ley 66 de 10 de noviembre de 1947");
                                    tbl.Cell().AlignLeft().Text("Ley 1 de 10 de enero de 2001");
                                    tbl.Cell().AlignLeft().Text("Ley 17 de 12 de septiembre de 2014");
                                    tbl.Cell().AlignLeft().Text("Ley 24 de 29 de enero de 1963");
                                    tbl.Cell().AlignLeft().Text("Decreto Ejecutivo 115 de 16 de agosto de 2022");
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                    });

                                    tbl.Header(header =>
                                    {
                                        header.Cell().ColumnSpan(3).AlignLeft().Text("Contáctenos:").Bold();
                                    });

                                    tbl.Cell().AlignLeft().Text("S. Inspecciones");
                                    tbl.Cell().AlignLeft().Text("512-9168/62 (Ext. 1126)");
                                    tbl.Cell().AlignLeft().Text("inspeccionesfyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("S. Auditorías");
                                    tbl.Cell().AlignLeft().Text("512-9168/62");
                                    tbl.Cell().AlignLeft().Text("auditoriafyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Veraguas");
                                    tbl.Cell().AlignLeft().Text("935-0316/18");
                                    tbl.Cell().AlignLeft().Text("orvdnfd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Chiriquí");
                                    tbl.Cell().AlignLeft().Text("774-7410");
                                    tbl.Cell().AlignLeft().Text("fydchiriqui@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Colón");
                                    tbl.Cell().AlignLeft().Text("475-2060 Ext. 5021");
                                    tbl.Cell().AlignLeft().Text("mbramwell@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Panamá Pacífico");
                                    tbl.Cell().AlignLeft().Text("504-2565");
                                    tbl.Cell().AlignLeft().Text("rlquiros@minsa.gob.pa");
                                });

                            });

                        });

                        page.Footer().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                            });


                            table.Cell().AlignRight().AlignBottom().Text(string.Format("Confeccionado: Sección de Inspecciones {0}", DateTime.Now.ToString("dd/MM/yyyy")));
                        });
                    });
                })
                  .GeneratePdf();

                Stream stream = new MemoryStream(byteArray);

                return stream;
            }
            catch { }
            return null;
        }
        //DISPOSICION FINAL DEL PRODUCTO
        private async Task<Stream> GenerateDisposicionFinalProd(AUD_InspeccionTB inspection)
        {
            try
            {
                //var inspection = DalService.Get<AUD_InspeccionTB>(InspectionId);

                // code in your main method
                var byteArray = QuestPDF.Fluent.Document.Create(container =>
                {
                    container.Page(page =>
                    {
                        page.Size(PageSizes.A4);
                        page.Margin(5, Unit.Millimetre);
                        page.PageColor(Colors.White);
                        page.DefaultTextStyle(x => x.FontSize(8));
                        //page.DefaultTextStyle(x => x.Color("Black"));

                        var path = System.IO.Path.Combine(env.WebRootPath, "img", "pdf", "Header.png");

                        page.Header().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                            });

                            table.Header(header =>
                            {
                                header.Cell().Image(path);
                                header.Cell().AlignCenter().Text("");
                                header.Cell().AlignRight().AlignMiddle().Text(string.Format("Acta N°: {0}\r\nEstatus: {1}", inspection.NumActa, DataModel.Helper.Helper.GetDescription(inspection.StatusInspecciones)));
                            });

                            table.Cell().ColumnSpan(3).AlignLeft().Text("DIRECCIÓN NACIONAL DE FARMACIA Y DROGAS").Bold();
                            table.Cell().ColumnSpan(3).AlignLeft().Text("Departamento de Auditorías de Calidad a Establecimientos Farmacéuticos y No Farmacéuticos");
                            table.Cell().ColumnSpan(3).AlignCenter().Text("DISPOSICIÓN FINAL DE DESECHOS FARMACÉUTICOS".ToUpper()).Bold();
                        });

                        page.Content().PaddingVertical(8).Column(column =>
                        {
                            column.Item().AlignLeft().Text(string.Format("Hora de Inicio: {0}", inspection.FechaInicio.ToString("hh:mm tt")));
                            column.Item().AlignLeft().Text(string.Format("Fecha: {0}", inspection.FechaInicio.ToString("dd/MM/yyyy")));

                            column.Item().AlignLeft().Text(string.Format("TIPO DE INSPECCIÓN: {0}", DataModel.Helper.Helper.GetDescription(inspection.TipoActa)));
                            column.Item().AlignLeft().Text(string.Format("TIPO DE ESTABLECIMIENTO: {0}", DataModel.Helper.Helper.GetDescription(inspection?.DatosEstablecimiento?.Establecimiento?.TipoEstablecimiento ?? DataModel.Helper.enumAUD_TipoEstablecimiento.None)));

                            column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                            column.Item().AlignLeft().Text(string.Format("Siendo las {0} del {1} de {2} de {3}, los suscritos:",
                                inspection.FechaInicio.ToString("hh:mm tt"), inspection.FechaInicio.Day, Helper.Helper.GetMonthNameByMonthNumber(int.Parse(inspection.FechaInicio.ToString("MM"))), inspection.FechaInicio.Year));
                            if (inspection.ParticipantesDNFD?.LParticipantes?.Count > 0)
                            {
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(1);
                                    });

                                    foreach (var participant in inspection.ParticipantesDNFD.LParticipantes)
                                    {
                                        table.Cell().AlignLeft().Text(string.Format("Lic. {0}", participant.NombreCompleto));
                                        table.Cell().AlignLeft().Text(string.Format("Idoneidad profesional N°. {0}", participant.RegistroNumero));
                                        table.Cell().AlignLeft().Text(" ");
                                        table.Cell().AlignLeft().Text(" ");

                                    }
                                });
                            }

                            column.Item().AlignLeft().Text(string.Format("Actuando como colaboradores de la Dirección Nacional de Farmacia y Drogas del Ministerio de Salud, nos apersonamos al establecimiento denominado: {0}, ubicado en: {1}. \r\nCon la finalidad de realizar:", inspection.DatosEstablecimiento?.Nombre, inspection.DatosEstablecimiento?.Direccion));
                            column.Item().AlignLeft().Text(string.Format("Tipo de Inspección: {0}", DataModel.Helper.Helper.GetDescription(inspection?.InspDisposicionFinal?.DatosInspeccion?.TipoInspeccion ?? enum_TipoInspeccionDispFinal.VerifInventario)));
                            column.Item().AlignLeft().Text(string.Format("Tipo de Producto: {0}", DataModel.Helper.Helper.GetDescription(inspection?.InspDisposicionFinal?.DatosInspeccion?.TipoProduct ?? enum_TipoProductDispFinal.Controlado)));
                            column.Item().AlignLeft().Text(string.Format("Tipo de Verificación: {0}", DataModel.Helper.Helper.GetDescription(inspection?.InspDisposicionFinal?.DatosInspeccion?.TipoVerificacion ?? enum_TipoVerificacionDispFinal.NA)));
                            column.Item().AlignLeft().Text(string.Format("Disposición final solicitado por: {0}", inspection?.InspDisposicionFinal?.DatosInspeccion?.SolicitudCierre));
                            column.Item().AlignLeft().Text(string.Format("N° de nota de SDGSA: {0}", inspection?.InspDisposicionFinal?.DatosInspeccion?.NumNotaSDGSA));

                            column.Item().PaddingVertical(5).AlignCenter().Text(" ").Bold();

                            column.Item().AlignLeft().Text(string.Format("La solicitud corresponde al expediente con recibo de pago N°: {0}", inspection?.InspDisposicionFinal?.DatosInspeccion?.NumReciboPago));
                            column.Item().AlignLeft().Text(string.Format("El peso de los productos a destruir es: {0} (Kg)", inspection?.InspDisposicionFinal?.DatosInspeccion?.PesoDestruir));
                            column.Item().AlignLeft().Text(string.Format("Adjunto lista de productos: {0}", inspection.InspDisposicionFinal.DatosInspeccion.Adjunta ? "Si" : "No"));
                            column.Item().AlignLeft().Text(string.Format("Total: {0} cajas/tarimas/bultos", inspection?.InspDisposicionFinal?.DatosInspeccion?.Total));

                            column.Item().PaddingVertical(5).AlignCenter().Text(string.Format("Lista de Productos".ToUpper())).Bold();

                            if (inspection?.InspDisposicionFinal?.InventarioMedicamento?.LProductos?.Count > 0)
                            {
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn();
                                        columns.RelativeColumn();
                                        columns.RelativeColumn();
                                        columns.RelativeColumn();
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cantidad".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Nombre del producto".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Presentación".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Motivos".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspDisposicionFinal.InventarioMedicamento.LProductos)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Cantidad);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Nombre);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Presentacion);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Motivos);
                                    }
                                });
                            }

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Observaciones:".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(inspection.DatosConclusiones?.ObservacionesFinales);

                            column.Item().PaddingVertical(5).AlignCenter().Text(string.Format("Conclusiones".ToUpper())).Bold();

                            column.Item().AlignLeft().Text(string.Format("Luego de realizar {0} de los desechos farmacéuticos, se encontró que la existencia física {1} coincide con el registro en la lista que adjuntó el establecimiento a la solicitud.", DataModel.Helper.Helper.GetDescription(inspection?.InspDisposicionFinal?.DatosInspeccion?.TipoInspeccion ?? enum_TipoInspeccionDispFinal.VerifInventario), inspection.InspDisposicionFinal.DatosInspeccion.Coincide ? "Si" : "No"));

                            column.Item().PaddingVertical(5).AlignLeft().Text("La Dirección Nacional de Farmacia y Drogas y sus colaboradores quedan relevados de cualquier compromiso y responsabilidad que pudiera derivarse de la destrucción de estos desechos farmacéuticos o del manejo inadecuado de los mismos");

                            column.Item().PaddingVertical(5).Text(string.Format("Los abajo firmantes damos fe de lo antes descrito"));
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                });

                                table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Establecimiento:").Bold();
                                if (!string.IsNullOrEmpty(inspection.InspDisposicionFinal?.DatosAtendidosPor?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspDisposicionFinal.DatosAtendidosPor.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }
                                table.Cell().AlignLeft().Text("");
                                table.Cell().AlignLeft().Text("");

                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1}", inspection.InspDisposicionFinal.DatosAtendidosPor.Nombre, inspection.InspDisposicionFinal.DatosAtendidosPor.Cedula));

                                table.Cell().AlignLeft().Text("");
                                table.Cell().AlignLeft().Text("");

                                table.Cell().ColumnSpan(3).AlignLeft().PaddingVertical(5).Text(" ").Bold();
                                if (inspection.ParticipantesDNFD?.LParticipantes?.Count > 0)
                                {
                                    table.Cell().ColumnSpan(3).AlignLeft().Text("Por la Dirección Nacional de Farmacia y Drogas:").Bold();

                                    foreach (var participant in inspection.ParticipantesDNFD.LParticipantes)
                                    {
                                        table.Cell().Table(tbl =>
                                        {
                                            tbl.ColumnsDefinition(columns =>
                                            {
                                                columns.RelativeColumn(1);
                                            });
                                            if (!string.IsNullOrEmpty(participant.Firma))
                                            {
                                                byte[] data = Convert.FromBase64String(participant.Firma.Split("image/png;base64,")[1]);
                                                MemoryStream memoryStream = new MemoryStream(data);
                                                tbl.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                            }
                                            tbl.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Reg.:{2}", participant.NombreCompleto, participant.CedulaIdentificacion, participant.RegistroNumero));

                                        });
                                    }
                                }
                            });

                            column.Item().PaddingVertical(5).Text(string.Format("Fecha y Hora de finalizada la inspección: {0}", inspection.DatosConclusiones?.FechaFinalizacion?.ToString("dd/MM/yyyy hh:mm tt") ?? ""));

                            column.Item().PaddingVertical(10).Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(4);
                                    columns.RelativeColumn(6);
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                    });
                                    tbl.Header(header =>
                                    {
                                        header.Cell().AlignLeft().Text("Fundamento Legal:").Bold();
                                    });
                                    tbl.Cell().AlignLeft().Text("Ley 66 de 10 de noviembre de 1947");
                                    tbl.Cell().AlignLeft().Text("Ley 1 de 10 de enero de 2001");
                                    tbl.Cell().AlignLeft().Text("Ley 17 de 12 de septiembre de 2014");
                                    tbl.Cell().AlignLeft().Text("Ley 24 de 29 de enero de 1963");
                                    tbl.Cell().AlignLeft().Text("Decreto Ejecutivo 115 de 16 de agosto de 2022");
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                    });

                                    tbl.Header(header =>
                                    {
                                        header.Cell().ColumnSpan(3).AlignLeft().Text("Contáctenos:").Bold();
                                    });

                                    tbl.Cell().AlignLeft().Text("S. Inspecciones");
                                    tbl.Cell().AlignLeft().Text("512-9168/62 (Ext. 1126)");
                                    tbl.Cell().AlignLeft().Text("inspeccionesfyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("S. Auditorías");
                                    tbl.Cell().AlignLeft().Text("512-9168/62");
                                    tbl.Cell().AlignLeft().Text("auditoriafyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Veraguas");
                                    tbl.Cell().AlignLeft().Text("935-0316/18");
                                    tbl.Cell().AlignLeft().Text("orvdnfd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Chiriquí");
                                    tbl.Cell().AlignLeft().Text("774-7410");
                                    tbl.Cell().AlignLeft().Text("fydchiriqui@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Colón");
                                    tbl.Cell().AlignLeft().Text("475-2060 Ext. 5021");
                                    tbl.Cell().AlignLeft().Text("mbramwell@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Panamá Pacífico");
                                    tbl.Cell().AlignLeft().Text("504-2565");
                                    tbl.Cell().AlignLeft().Text("rlquiros@minsa.gob.pa");
                                });

                            });

                        });

                        page.Footer().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                            });


                            table.Cell().AlignRight().AlignBottom().Text(string.Format("Confeccionado: Sección de Inspecciones {0}", DateTime.Now.ToString("dd/MM/yyyy")));
                        });
                    });
                })
                  .GeneratePdf();

                Stream stream = new MemoryStream(byteArray);

                return stream;
            }
            catch { }
            return null;
        }
        //Apertura de Fabricantes - Medicamentos
        private async Task<Stream> GenerateAperturaFabricantesMedicamentos(AUD_InspeccionTB inspection)
        {
            try
            {
                //var inspection = DalService.Get<AUD_InspeccionTB>(InspectionId);

                // code in your main method
                var byteArray = QuestPDF.Fluent.Document.Create(container =>
                {
                    container.Page(page =>
                    {
                        page.Size(PageSizes.A4);
                        page.Margin(5, Unit.Millimetre);
                        page.PageColor(Colors.White);
                        page.DefaultTextStyle(x => x.FontSize(8));
                        //page.DefaultTextStyle(x => x.Color("Black"));

                        var path = System.IO.Path.Combine(env.WebRootPath, "img", "pdf", "Header.png");

                        page.Header().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                            });

                            table.Header(header =>
                            {
                                header.Cell().Image(path);
                                header.Cell().AlignCenter().Text("");
                                header.Cell().AlignRight().AlignMiddle().Text(string.Format("Acta N°: {0}\r\nEstatus: {1}", inspection.NumActa, DataModel.Helper.Helper.GetDescription(inspection.StatusInspecciones)));
                            });

                            table.Cell().ColumnSpan(3).AlignLeft().Text("DIRECCIÓN NACIONAL DE FARMACIA Y DROGAS").Bold();
                            table.Cell().ColumnSpan(3).AlignLeft().Text("Departamento de Auditorías de Calidad a Establecimientos Farmacéuticos y No Farmacéuticos. Sección de Auditorías de Calidad a Establecimientos Farmacéuticos");
                            table.Cell().ColumnSpan(3).AlignCenter().Text("Evaluación Técnica para Fabricante de Medicamentos".ToUpper()).Bold();
                        });

                        page.Content().PaddingVertical(8).Column(column =>
                        {
                            column.Item().AlignLeft().Text(string.Format("Hora de Inicio: {0}", inspection.FechaInicio.ToString("hh:mm tt")));
                            column.Item().AlignLeft().Text(string.Format("Fecha: {0}", inspection.FechaInicio.ToString("dd/MM/yyyy")));

                            column.Item().AlignLeft().Text(string.Format("TIPO DE INSPECCIÓN: {0}", DataModel.Helper.Helper.GetDescription(inspection.TipoActa)));
                            column.Item().AlignLeft().Text(string.Format("TIPO DE ESTABLECIMIENTO: {0}", DataModel.Helper.Helper.GetDescription(inspection.DatosEstablecimiento?.Establecimiento?.TipoEstablecimiento?? enumAUD_TipoEstablecimiento.None)));

                            column.Item().PaddingVertical(5).AlignTop().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)0.3);
                                    columns.RelativeColumn((float)0.7);
                                });

                                table.Header(header =>
                                {
                                    header.Cell().ColumnSpan(2).Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("DATOS GENERALES").Bold();
                                });

                                //Establecimiento
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("NOMBRE DEL ESTABLECIMIENTO");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento?.Nombre);
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Provincia");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento?.Provincia?.Nombre ?? "");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Distrito");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento?.Distrito?.Nombre ?? "");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Corregimiento");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento?.Corregimiento?.Nombre ?? "");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Ubicación");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento?.Direccion);
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Teléfono / Celular");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(string.Format("{0}", inspection.DatosEstablecimiento?.Telefono));
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Correo Electronico");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(string.Format("{0}", inspection.DatosEstablecimiento?.Correo));

                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("REGENTE FARMACEUTICO");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperFabricante?.DatosRegente?.Nombre);
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Cédula de Identidad Personal");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperFabricante?.DatosRegente?.Cedula);
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Num. Registro");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperFabricante?.DatosRegente?.NumRegistro);

                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("REPRESENTANTE LEGAL");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperFabricante?.DatosRepresentLegal?.Nombre);
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Cédula de Identidad Personal");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperFabricante?.DatosRepresentLegal?.Cedula);

                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("PRODUCTOS QUE FABRICA");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperFabricante?.ProdFabrican?.TipoProductos);

                            });

                            if (inspection.InspAperFabricante?.Instalaciones?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("PERSONAL".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Punto por evaluar".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspAperFabricante.Personal.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }

                            if (inspection.InspAperFabricante?.Instalaciones?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Instalaciones".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Punto por evaluar".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspAperFabricante.Instalaciones.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }

                            if (inspection.InspAperFabricante?.AreaAlmacenamiento?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Área de Almacenamiento".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)3);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Punto por evaluar".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Materia Prima".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Material de Acondicionamiento".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Producto Terminado".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Producto a Granel".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Inflamables".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Rechazados".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Devoluciones".ToUpper());
                                        //header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspAperFabricante.AreaAlmacenamiento.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().ColumnSpan(8).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }

                            if (inspection.InspAperFabricante?.AreaDispMateriaPrima?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Área de Dispensado de Materia Prima".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Punto por evaluar".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspAperFabricante.AreaDispMateriaPrima.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }

                            if (inspection.InspAperFabricante?.AreaProduccion?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Área de Producción".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)3);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Punto por evaluar".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Líquidos".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Semisólidos".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Sólidos".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspAperFabricante.AreaProduccion.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().ColumnSpan(8).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }

                            if (inspection.InspAperFabricante?.AreaAcondSecundario?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREAS DE ACONDICIONAMIENTO SECUNDARIO".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Punto por evaluar".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspAperFabricante.AreaAcondSecundario.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }

                            if (inspection.InspAperFabricante?.ControlCalidad?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("CONTROL DE CALIDAD".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Punto por evaluar".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspAperFabricante.ControlCalidad.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }

                            if (inspection.InspAperFabricante?.AreaAuxiliares?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREAS AUXILIARES".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Punto por evaluar".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspAperFabricante.AreaAuxiliares.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }

                            if (inspection.InspAperFabricante?.Equipos?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("EQUIPOS".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)3);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Punto por evaluar".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Líquidos".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Semisólidos".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Sólidos".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspAperFabricante.Equipos.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().ColumnSpan(5).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            if (dat.LEvaluacion?.Count > 1)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }

                            if (inspection.InspAperFabricante?.MaterialesProductos?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("MATERIALES Y PRODUCTOS".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Punto por evaluar".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspAperFabricante.MaterialesProductos.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }

                            
                            column.Item().PaddingVertical(5).AlignCenter().Text(string.Format("CRITERIO TÉCNICO")).Bold();
                            column.Item().AlignLeft().Text(string.Format("Una vez evaluado el cumplimiento de los requerimientos previstos y con base en el REGLAMENTO TECNICO CENTROAMERICANO RTCA 11.03.42:07 REGLAMENTO TÉCNICO SOBRE BUENAS PRÁCTICAS DE MANUFACTURA PARA LA INDUSTRIA FARMACÉUTICA. PRODUCTOS FARMACÉUTICOS Y MEDICAMENTOS DE USO HUMANO, por el cual se reglamentan las Buenas Prácticas de Manufactura de Productos Farmacéuticos.  Inspectores Farmacéuticos de la Dirección Nacional de Farmacia y Drogas del Ministerio de Salud de Panamá concluyen que el establecimiento denominado {0}, ubicado en {1}, {2} con los requisitos mínimos para operar como Laboratorio Farmacéutico dedicado a {3}. \r\nDado en la ciudad de Panamá a los {4} días del mes de {5} de {6}.", inspection.DatosEstablecimiento?.Nombre, inspection.DatosEstablecimiento?.Direccion, (inspection.DatosConclusiones.CumpleRequisitosMinOperacion ? "SÍ CUMPLE" : "NO CUMPLE"), DataModel.Helper.Helper.GetDescription(inspection.InspAperFabricante.ProdFabrican?.TipoProductos?? enumTipoProductosImportacion.Otros) + (inspection.InspAperFabricante.ProdFabrican?.TipoProductos == enumTipoProductosImportacion.Otros? inspection.InspAperFabricante.ProdFabrican?.ProductosDesc??"":""),  inspection.DatosConclusiones?.FechaFinalizacion?.Day, Helper.Helper.GetMonthNameByMonthNumber(int.Parse(inspection.DatosConclusiones ? .FechaFinalizacion?.ToString("MM") ?? "01")), inspection.DatosConclusiones?.FechaFinalizacion?.Year.ToString() ?? ""));
                                                        
                            column.Item().PaddingVertical(5).AlignTop().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn();
                                });

                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Inconformidades o desviaciones detectadas".ToUpper()).Bold();
                                });

                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosConclusiones?.ObservacionesFinales);

                            });

                            column.Item().PaddingVertical(5).Text(string.Format("Esta Acta se levanta en presencia de los abajo firmantes\r\n"));
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                });

                                table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Establecimiento:").Bold();
                                if (!string.IsNullOrEmpty(inspection.InspAperFabricante.DatosRepresentLegal?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspAperFabricante.DatosRepresentLegal.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitArea);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }


                                if (!string.IsNullOrEmpty(inspection.InspAperFabricante.DatosRegente?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspAperFabricante.DatosRegente.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }


                                table.Cell().AlignLeft().Text("");

                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Cargo:{2}", inspection.InspAperFabricante.DatosRepresentLegal?.Nombre, inspection.InspAperFabricante.DatosRepresentLegal?.Cedula, inspection.InspAperFabricante.DatosRepresentLegal?.Cargo));
                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Cargo:{2} | Reg.:{3}", inspection.InspAperFabricante.DatosRegente?.Nombre, inspection.InspAperFabricante.DatosRegente?.Cedula, inspection.InspAperFabricante.DatosRegente?.Cargo, inspection.InspAperFabricante.DatosRegente?.NumRegistro));

                                table.Cell().AlignLeft().Text("");

                            });

                            column.Item().PaddingVertical(5).Text(" ").Bold();

                            if (inspection.ParticipantesDNFD?.LParticipantes?.Count > 0)
                            {
                                column.Item().Table(table => {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(1);
                                    });

                                    table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Ministerio de Salud (DNFD):").Bold();

                                    foreach (var participant in inspection.ParticipantesDNFD.LParticipantes)
                                    {
                                        table.Cell().Table(tbl =>
                                        {
                                            tbl.ColumnsDefinition(columns =>
                                            {
                                                columns.RelativeColumn(1);
                                            });
                                            if (!string.IsNullOrEmpty(participant.Firma))
                                            {
                                                byte[] data = Convert.FromBase64String(participant.Firma.Split("image/png;base64,")[1]);
                                                MemoryStream memoryStream = new MemoryStream(data);
                                                tbl.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                            }
                                            tbl.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Reg.:{2}", participant.NombreCompleto, participant.CedulaIdentificacion, participant.RegistroNumero));
                                        });
                                    }
                                });
                            }

                            column.Item().PaddingVertical(5).Text(string.Format("Hora de finalización de inspección: {0}", inspection.DatosConclusiones?.FechaFinalizacion?.ToString("dd/MM/yyyy hh:mm tt") ?? ""));

                            column.Item().PaddingVertical(10).Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(4);
                                    columns.RelativeColumn(6);
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                    });
                                    tbl.Header(header =>
                                    {
                                        header.Cell().AlignLeft().Text("Fundamento Legal:").Bold();
                                    });
                                    tbl.Cell().AlignLeft().Text("Ley 66 de 10 de noviembre de 1947");
                                    tbl.Cell().AlignLeft().Text("Ley 1 de 10 de enero de 2001");
                                    tbl.Cell().AlignLeft().Text("Ley 17 de 12 de septiembre de 2014");
                                    tbl.Cell().AlignLeft().Text("Ley 24 de 29 de enero de 1963");
                                    tbl.Cell().AlignLeft().Text("Decreto Ejecutivo 115 de 16 de agosto de 2022");
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                    });

                                    tbl.Header(header =>
                                    {
                                        header.Cell().ColumnSpan(3).AlignLeft().Text("Contáctenos:").Bold();
                                    });

                                    tbl.Cell().AlignLeft().Text("S. Inspecciones");
                                    tbl.Cell().AlignLeft().Text("512-9168/62 (Ext. 1126)");
                                    tbl.Cell().AlignLeft().Text("inspeccionesfyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("S. Auditorías");
                                    tbl.Cell().AlignLeft().Text("512-9168/62");
                                    tbl.Cell().AlignLeft().Text("auditoriafyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Veraguas");
                                    tbl.Cell().AlignLeft().Text("935-0316/18");
                                    tbl.Cell().AlignLeft().Text("orvdnfd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Chiriquí");
                                    tbl.Cell().AlignLeft().Text("774-7410");
                                    tbl.Cell().AlignLeft().Text("fydchiriqui@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Colón");
                                    tbl.Cell().AlignLeft().Text("475-2060 Ext. 5021");
                                    tbl.Cell().AlignLeft().Text("mbramwell@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Panamá Pacífico");
                                    tbl.Cell().AlignLeft().Text("504-2565");
                                    tbl.Cell().AlignLeft().Text("rlquiros@minsa.gob.pa");
                                });

                            });

                        });

                        page.Footer().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                            });


                            table.Cell().AlignRight().AlignBottom().Text(string.Format("Confeccionado: Sección de Inspecciones {0}", DateTime.Now.ToString("dd/MM/yyyy")));
                        });
                    });
                }).GeneratePdf();

                Stream stream = new MemoryStream(byteArray);

                return stream;
            }
            catch { }
            return null;
        }
        //Apertura de Fabricantes - Cosmeticos y Desinfectantes
        private async Task<Stream> GenerateAperturaFabricantesCosmeticoDesinfectantes(AUD_InspeccionTB inspection)
        {
            try
            {                
                // code in your main method
                var byteArray = QuestPDF.Fluent.Document.Create(container =>
                {
                    container.Page(page =>
                    {
                        page.Size(PageSizes.A4);
                        page.Margin(5, Unit.Millimetre);
                        page.PageColor(Colors.White);
                        page.DefaultTextStyle(x => x.FontSize(8));
                        //page.DefaultTextStyle(x => x.Color("Black"));

                        var path = System.IO.Path.Combine(env.WebRootPath, "img", "pdf", "Header.png");

                        page.Header().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                            });

                            table.Header(header =>
                            {
                                header.Cell().Image(path);
                                header.Cell().AlignCenter().Text("");
                                header.Cell().AlignRight().AlignMiddle().Text(string.Format("Acta N°: {0}\r\nEstatus: {1}", inspection.NumActa, DataModel.Helper.Helper.GetDescription(inspection.StatusInspecciones)));
                            });

                            table.Cell().ColumnSpan(3).AlignLeft().Text("DIRECCIÓN NACIONAL DE FARMACIA Y DROGAS").Bold();
                            table.Cell().ColumnSpan(3).AlignLeft().Text("Departamento de Auditorías de Calidad a Establecimientos Farmacéuticos y No Farmacéuticos. Sección de Auditorías de Calidad a Establecimientos Farmacéuticos");
                            table.Cell().ColumnSpan(3).AlignCenter().Text("Evaluación Técnica para Fabricante (Cosméticos, Antisépticos, Desinfectantes y Plaguicidas de uso doméstico)\r\n".ToUpper()).Bold();
                        });

                        page.Content().PaddingVertical(8).Column(column =>
                        {
                            column.Item().AlignLeft().Text(string.Format("Hora de Inicio: {0}", inspection.FechaInicio.ToString("hh:mm tt")));
                            column.Item().AlignLeft().Text(string.Format("Fecha: {0}", inspection.FechaInicio.ToString("dd/MM/yyyy")));

                            column.Item().AlignLeft().Text(string.Format("TIPO DE INSPECCIÓN: {0}", DataModel.Helper.Helper.GetDescription(inspection.TipoActa)));
                            column.Item().AlignLeft().Text(string.Format("TIPO DE ESTABLECIMIENTO: {0}", DataModel.Helper.Helper.GetDescription(inspection.DatosEstablecimiento?.Establecimiento?.TipoEstablecimiento ?? enumAUD_TipoEstablecimiento.None)));

                            column.Item().PaddingVertical(5).AlignTop().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)0.3);
                                    columns.RelativeColumn((float)0.7);
                                });

                                table.Header(header =>
                                {
                                    header.Cell().ColumnSpan(2).Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("DATOS GENERALES").Bold();
                                });

                                //Establecimiento
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("NOMBRE DEL ESTABLECIMIENTO");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento?.Nombre);
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Provincia");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento?.Provincia?.Nombre ?? "");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Distrito");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento?.Distrito?.Nombre ?? "");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Corregimiento");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento?.Corregimiento?.Nombre ?? "");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Ubicación");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosEstablecimiento?.Direccion);
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Teléfono / Celular");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(string.Format("{0}", inspection.DatosEstablecimiento?.Telefono));
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Correo Electronico");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(string.Format("{0}", inspection.DatosEstablecimiento?.Correo));

                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("REGENTE FARMACEUTICO");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperFabricanteCosmetMed?.DatosRegente?.Nombre);
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Cédula de Identidad Personal");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperFabricanteCosmetMed?.DatosRegente?.Cedula);
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Num. Registro");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperFabricanteCosmetMed?.DatosRegente?.NumRegistro);

                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("REPRESENTANTE LEGAL");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperFabricanteCosmetMed?.DatosRepresentLegal?.Nombre);
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("Cédula de Identidad Personal");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperFabricanteCosmetMed?.DatosRepresentLegal?.Cedula);

                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("PRODUCTOS QUE FABRICA");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperFabricanteCosmetMed?.ProdFabrican?.TipoProductos);

                            });

                            if (inspection.InspAperFabricanteCosmetMed?.EstructuraOrganizativa?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Estructura Organizativa".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Punto por evaluar".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspAperFabricanteCosmetMed.EstructuraOrganizativa.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }

                            if (inspection.InspAperFabricanteCosmetMed?.Almacenes?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Almacenes".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Punto por evaluar".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspAperFabricanteCosmetMed.Almacenes.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }

                            if (inspection.InspAperFabricanteCosmetMed?.Documantacion?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Documentación".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Punto por evaluar".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspAperFabricanteCosmetMed.Documantacion.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }

                            if (inspection.InspAperFabricanteCosmetMed?.AreasAuxiliares?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Áreas Auxiliares".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Punto por evaluar".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspAperFabricanteCosmetMed.AreasAuxiliares.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }

                            if (inspection.InspAperFabricanteCosmetMed?.SistemaCriticoApoyo?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Sistema Crítico de Apoyo".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Punto por evaluar".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspAperFabricanteCosmetMed.SistemaCriticoApoyo.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }

                            if (inspection.InspAperFabricanteCosmetMed?.AreaProduccion?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Áreas de Producción".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Punto por evaluar".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspAperFabricanteCosmetMed.AreaProduccion.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }

                            if (inspection.InspAperFabricanteCosmetMed?.Acondicionamiento?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Acondicionamiento".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Punto por evaluar".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspAperFabricanteCosmetMed.Acondicionamiento.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }

                            if (inspection.InspAperFabricanteCosmetMed?.ControlCalidad?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Control de Calidad".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Punto por evaluar".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspAperFabricanteCosmetMed.ControlCalidad.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }

                            if (inspection.InspAperFabricanteCosmetMed?.InspeccionAuditoria?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Inspección y Auditoría".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Punto por evaluar".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIóN".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspAperFabricanteCosmetMed.InspeccionAuditoria.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }


                            column.Item().PaddingVertical(5).AlignCenter().Text(string.Format("CRITERIO TÉCNICO")).Bold();
                            column.Item().AlignLeft().Text(string.Format("Una vez evaluado el cumplimiento de los requerimientos previstos en el Decreto Ejecutivo 115 del 16 de agosto de 2022, por el cual se reglamentan las Buenas Prácticas de Fabricación de Productos Farmacéuticos. Inspectores Farmacéuticos de la Dirección Nacional de Farmacia y Drogas del Ministerio de Salud de Panamá concluyen que el establecimiento denominado {0}, ubicado en {1}, {2} con los requisitos mínimos para operar como Laboratorio Farmacéutico dedicado a {3}. \r\nDado en la ciudad de Panamá a los {4} días del mes de {5} de {6}.", inspection.DatosEstablecimiento?.Nombre, inspection.DatosEstablecimiento?.Direccion, (inspection.DatosConclusiones.CumpleRequisitosMinOperacion ? "SÍ CUMPLE" : "NO CUMPLE"), DataModel.Helper.Helper.GetDescription(inspection.InspAperFabricanteCosmetMed.ProdFabrican?.TipoProductos ?? enumTipoProductosImportacion.Otros) + (inspection.InspAperFabricanteCosmetMed.ProdFabrican?.TipoProductos == enumTipoProductosImportacion.Otros ? inspection.InspAperFabricanteCosmetMed.ProdFabrican?.ProductosDesc ?? "" : ""), inspection.DatosConclusiones?.FechaFinalizacion?.Day, Helper.Helper.GetMonthNameByMonthNumber(int.Parse(inspection.DatosConclusiones?.FechaFinalizacion?.ToString("MM") ?? "01")), inspection.DatosConclusiones?.FechaFinalizacion?.Year.ToString() ?? ""));

                            column.Item().PaddingVertical(5).AlignTop().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn();
                                });

                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Inconformidades o desviaciones detectadas".ToUpper()).Bold();
                                });

                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosConclusiones?.ObservacionesFinales);

                            });

                            column.Item().PaddingVertical(5).Text(string.Format("Esta Acta se levanta en presencia de los abajo firmantes\r\n"));
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                });

                                table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Establecimiento:").Bold();
                                if (!string.IsNullOrEmpty(inspection.InspAperFabricanteCosmetMed.DatosRepresentLegal?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspAperFabricanteCosmetMed.DatosRepresentLegal.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitArea);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }


                                if (!string.IsNullOrEmpty(inspection.InspAperFabricanteCosmetMed.DatosRegente?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspAperFabricanteCosmetMed.DatosRegente.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }


                                table.Cell().AlignLeft().Text("");

                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Cargo:{2}", inspection.InspAperFabricanteCosmetMed.DatosRepresentLegal?.Nombre, inspection.InspAperFabricanteCosmetMed.DatosRepresentLegal?.Cedula, inspection.InspAperFabricanteCosmetMed.DatosRepresentLegal?.Cargo));
                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Cargo:{2} | Reg.:{3}", inspection.InspAperFabricanteCosmetMed.DatosRegente?.Nombre, inspection.InspAperFabricanteCosmetMed.DatosRegente?.Cedula, inspection.InspAperFabricanteCosmetMed.DatosRegente?.Cargo, inspection.InspAperFabricanteCosmetMed.DatosRegente?.NumRegistro));

                                table.Cell().AlignLeft().Text("");

                            });

                            column.Item().PaddingVertical(5).Text(" ").Bold();

                            if (inspection.ParticipantesDNFD?.LParticipantes?.Count > 0)
                            {
                                column.Item().Table(table => {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(1);
                                    });

                                    table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Ministerio de Salud (DNFD):").Bold();

                                    foreach (var participant in inspection.ParticipantesDNFD.LParticipantes)
                                    {
                                        table.Cell().Table(tbl =>
                                        {
                                            tbl.ColumnsDefinition(columns =>
                                            {
                                                columns.RelativeColumn(1);
                                            });
                                            if (!string.IsNullOrEmpty(participant.Firma))
                                            {
                                                byte[] data = Convert.FromBase64String(participant.Firma.Split("image/png;base64,")[1]);
                                                MemoryStream memoryStream = new MemoryStream(data);
                                                tbl.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                            }
                                            tbl.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Reg.:{2}", participant.NombreCompleto, participant.CedulaIdentificacion, participant.RegistroNumero));
                                        });
                                    }
                                });
                            }

                            column.Item().PaddingVertical(5).Text(string.Format("Hora de finalización de inspección: {0}", inspection.DatosConclusiones?.FechaFinalizacion?.ToString("dd/MM/yyyy hh:mm tt") ?? ""));

                            column.Item().PaddingVertical(10).Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(4);
                                    columns.RelativeColumn(6);
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                    });
                                    tbl.Header(header =>
                                    {
                                        header.Cell().AlignLeft().Text("Fundamento Legal:").Bold();
                                    });
                                    tbl.Cell().AlignLeft().Text("Ley 66 de 10 de noviembre de 1947");
                                    tbl.Cell().AlignLeft().Text("Ley 1 de 10 de enero de 2001");
                                    tbl.Cell().AlignLeft().Text("Ley 17 de 12 de septiembre de 2014");
                                    tbl.Cell().AlignLeft().Text("Ley 24 de 29 de enero de 1963");
                                    tbl.Cell().AlignLeft().Text("Decreto Ejecutivo 115 de 16 de agosto de 2022");
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                    });

                                    tbl.Header(header =>
                                    {
                                        header.Cell().ColumnSpan(3).AlignLeft().Text("Contáctenos:").Bold();
                                    });

                                    tbl.Cell().AlignLeft().Text("S. Inspecciones");
                                    tbl.Cell().AlignLeft().Text("512-9168/62 (Ext. 1126)");
                                    tbl.Cell().AlignLeft().Text("inspeccionesfyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("S. Auditorías");
                                    tbl.Cell().AlignLeft().Text("512-9168/62");
                                    tbl.Cell().AlignLeft().Text("auditoriafyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Veraguas");
                                    tbl.Cell().AlignLeft().Text("935-0316/18");
                                    tbl.Cell().AlignLeft().Text("orvdnfd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Chiriquí");
                                    tbl.Cell().AlignLeft().Text("774-7410");
                                    tbl.Cell().AlignLeft().Text("fydchiriqui@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Colón");
                                    tbl.Cell().AlignLeft().Text("475-2060 Ext. 5021");
                                    tbl.Cell().AlignLeft().Text("mbramwell@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Panamá Pacífico");
                                    tbl.Cell().AlignLeft().Text("504-2565");
                                    tbl.Cell().AlignLeft().Text("rlquiros@minsa.gob.pa");
                                });

                            });

                        });

                        page.Footer().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                            });


                            table.Cell().AlignRight().AlignBottom().Text(string.Format("Confeccionado: Sección de Inspecciones {0}", DateTime.Now.ToString("dd/MM/yyyy")));
                        });
                    });
                }).GeneratePdf();

                Stream stream = new MemoryStream(byteArray);

                return stream;
            }
            catch (Exception ex)
            { }
            return null;
        }
        // Guis BPM Fabricante de Medicamentos
        private async Task<Stream> GenerateGuiaFabricantesMedicamentos(AUD_InspeccionTB inspection)
        {
            try
            {
                //var inspection = DalService.Get<AUD_InspeccionTB>(InspectionId);

                // code in your main method
                var byteArray = QuestPDF.Fluent.Document.Create(container =>
                {
                    container.Page(page =>
                    {
                        page.Size(PageSizes.A4);
                        page.Margin(5, Unit.Millimetre);
                        page.PageColor(Colors.White);
                        page.DefaultTextStyle(x => x.FontSize(8));
                        //page.DefaultTextStyle(x => x.Color("Black"));

                        var path = System.IO.Path.Combine(env.WebRootPath, "img", "pdf", "Header.png");

                        page.Header().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                            });

                            table.Header(header =>
                            {
                                header.Cell().Image(path);
                                header.Cell().AlignCenter().Text("");
                                header.Cell().AlignRight().AlignMiddle().Text(string.Format("Acta N°: {0}\r\nEstatus: {1}", inspection.NumActa, DataModel.Helper.Helper.GetDescription(inspection.StatusInspecciones)));
                            });

                            table.Cell().ColumnSpan(3).AlignLeft().Text("DIRECCIÓN NACIONAL DE FARMACIA Y DROGAS").Bold();
                            table.Cell().ColumnSpan(3).AlignLeft().Text("Departamento de Auditorías de Calidad a Establecimientos Farmacéuticos y No Farmacéuticos");
                            table.Cell().ColumnSpan(3).AlignCenter().Text("GUÍA DE VERIFICACIÓN DEL REGLAMENTO TECNICO CENTROAMERICANO RTCA 11.03.42:07 REGLAMENTO TÉCNICO SOBRE BUENAS PRÁCTICAS DE MANUFACTURA PARA LA INDUSTRIA FARMACÉUTICA. PRODUCTOS FARMACÉUTICOS Y MEDICAMENTOS DE USO HUMANO.".ToUpper()).Bold();
                        });

                        page.Content().PaddingVertical(8).Column(column =>
                        {
                            column.Item().AlignLeft().Text(string.Format("Hora de Inicio: {0}", inspection.FechaInicio.ToString("hh:mm tt")));
                            column.Item().AlignLeft().Text(string.Format("Fecha: {0}", inspection.FechaInicio.ToString("dd/MM/yyyy")));

                            column.Item().AlignLeft().Text(string.Format("TIPO DE INSPECCIÓN: {0}", DataModel.Helper.Helper.GetDescription(inspection.TipoActa)));
                            column.Item().AlignLeft().Text(string.Format("TIPO DE ESTABLECIMIENTO: {0}", DataModel.Helper.Helper.GetDescription(inspection.Establecimiento.TipoEstablecimiento)));


                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format(" ".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("I. INTRODUCCIÓN".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("El RTCA 11.03.42:07 Reglamento Técnico sobre Buenas Prácticas de Manufactura para la Industria Farmacéutica. Productos Farmacéuticos y Medicamentos de Uso Humano, establece que la verificación de su cumplimiento le corresponde a la Autoridad Reguladora de cada Estado Parte, lo que implica la revisión de todos los elementos relacionados con las BPM implementados en la industria, destinados a garantizar la producción de lotes uniformes de productos farmacéuticos con el fin de asegurar la calidad, seguridad y eficacia de los mismos."));
                            column.Item().AlignLeft().Text(string.Format("El presente documento consiste en el instrumento oficial para verificar el cumplimiento de las BPM en la industria farmacéutica, por parte de la Autoridad Reguladora de cada Estado Parte, con el cual se pretende homologar y armonizar los criterios de inspección y establecer una lista de puntos a verificar de todas las operaciones y procesos de la industria. Puede sertambién de utilidad para los laboratorios fabricantes en lo que respecta a la autoinspección."));
                            column.Item().AlignLeft().Text(string.Format("Cada ítem tiene asignada una calificación con la finalidad de que las inspecciones a realizar, respondan a criterios uniformes de evaluación, dichos criterios se definen en el glosario del presente documento"));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format(" ".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("II. OBJETIVO".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Establecer los criterios de evaluación a seguir por parte de la Autoridad Reguladora, para verificar el cumplimiento del RTCA 11.03.42:07Reglamento Técnico sobre Buenas Prácticas de Manufactura para la Industria Farmacéutica. Productos Farmacéuticos y Medicamentos de Uso Humano. "));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format(" ".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("III. ALCANCE".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Esta guía es de aplicación a todos los laboratorios farmacéuticos establecidos en el territorio de los Estados Parte."));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format(" ".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("IV. DOCUMENTOS A CONSULTAR".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("El RTCA 11.03.42:07 Reglamento Técnico sobre Buenas Prácticas de Manufactura para la Industria Farmacéutica. Productos Farmacéuticos y Medicamentos de Uso Humano"));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format(" ".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("V. RESPONSABLE".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Autoridad Reguladora de cada Estado Parte."));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format(" ".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("VI. GLOSARIO".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("CRITERIO CRÍTICO: aquel que en atención a las recomendaciones de las Buenas Prácticas de Manufactura, afecta en forma grave e inadmisible la calidad, seguridad de los productos y la seguridad de los trabajadores, en su interacción con los productos y procesos."));
                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format(" ".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("CRITERIO MAYOR: aquel que en atención a las recomendaciones de las Buenas Prácticas de Manufactura, puede afectar en forma grave la calidad, seguridad de los productos y seguridad de los trabajadores, en su interacción con los productos y procesos."));
                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format(" ".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("CRITERIO MENOR: aquel que en atención a las recomendaciones de las Buenas Prácticas de Manufactura, puede afectar en forma leve la calidad, seguridad de los productos y seguridad de los trabajadores, en su interacción con los productos y procesos."));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("I. PARTICIPANTES EN LA INSPECCIÓN:".ToUpper())).Bold();

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Autoridad Sanitaria:"));
                            if(inspection.ParticipantesDNFD?.LParticipantes?.Count > 0)
                            {
                                foreach (var participant in inspection.ParticipantesDNFD.LParticipantes)
                                {
                                    column.Item().AlignLeft().Text(string.Format("Lic. {0}", participant.NombreCompleto));
                                }
                            }

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Por la Empresa:"));
                            if (inspection.InspGuiaBPMFabricanteMed?.DatosRepresentLegal != null)
                            {
                                column.Item().AlignLeft().Text(string.Format("Representante Legal: {0}, Cedula: {1}", inspection.InspGuiaBPMFabricanteMed.DatosRepresentLegal.Nombre, inspection.InspGuiaBPMFabricanteMed.DatosRepresentLegal.Cedula));
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.DatosRegente != null)
                            {
                                column.Item().AlignLeft().Text(string.Format("Regente farmacéutico / Director técnico: {0}, Cedula: {1}", inspection.InspGuiaBPMFabricanteMed.DatosRegente.Nombre, inspection.InspGuiaBPMFabricanteMed.DatosRegente.Cedula));
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.OtrosFuncionarios?.LPersona?.Count>0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Otros funcionarios de la empresa:"));
                                foreach (var persona in inspection.InspGuiaBPMFabricanteMed.OtrosFuncionarios.LPersona)
                                {
                                    column.Item().AlignLeft().Text(string.Format("Lic. {0}", persona.Nombre));
                                }
                            }
                            
                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("II. GENERALIDADES:".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Nombre de la empresa: {0}", inspection.DatosEstablecimiento?.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Provincia: {0}", inspection.DatosEstablecimiento?.Provincia?.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Distrito: {0}", inspection.DatosEstablecimiento?.Distrito?.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Corregimiento: {0}", inspection.DatosEstablecimiento?.Corregimiento?.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Dirección: {0}", inspection.DatosEstablecimiento?.Direccion));
                            column.Item().AlignLeft().Text(string.Format("Teléfono: {0}", inspection.DatosEstablecimiento?.Telefono));
                            column.Item().AlignLeft().Text(string.Format("Correo electrónico: {0}", inspection.DatosEstablecimiento?.Correo));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("RESPONSABLE DE PRODUCCIÓN:".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Nombre: {0}", inspection.InspGuiaBPMFabricanteMed?.OtrosFuncionarios?.RespProduccion?.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Profesión: {0}", inspection.InspGuiaBPMFabricanteMed?.OtrosFuncionarios?.RespProduccion?.Profesion));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("RESPONSABLE DE CONTROL DE CALIDAD:".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Nombre: {0}", inspection.InspGuiaBPMFabricanteMed?.OtrosFuncionarios?.RespControlCalidad?.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Profesión: {0}", inspection.InspGuiaBPMFabricanteMed?.OtrosFuncionarios?.RespControlCalidad?.Profesion));


                            if (inspection.InspGuiaBPMFabricanteMed?.RequisitosLegales?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("REQUISITOS LEGALES:".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        //header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.RequisitosLegales.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(2).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                                                        
                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Observaciones:".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(inspection.InspGuiaBPMFabricanteMed.Observaciones);

                            column.Item().AlignLeft().Text(string.Format("¿Está el establecimiento sometido a un proceso periódico de vigilancia y control sanitario por la autoridad competente?"));
                            column.Item().AlignLeft().Text(string.Format(DataModel.Helper.Helper.GetDescription(inspection.InspGuiaBPMFabricanteMed.ProcesoVigilanciaSanit)));

                            column.Item().AlignLeft().Text(string.Format("Fecha de la última visita: {0}", inspection.InspGuiaBPMFabricanteMed.FechaUltimaVista?.ToString("dd/MM/yyyy") ?? ""));

                            if (inspection.InspGuiaBPMFabricanteMed?.ClasifActComerciales?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("CLASIFICACIÓN DE LA ACTIVIDAD COMERCIAL:".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        //header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.ClasifActComerciales.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(2).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.ClasifEstablecimiento?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Clasificación del Establecimiento:".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        //header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.ClasifEstablecimiento.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(2).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.OrganizacionPersonal?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ORGANIZACIÓN Y PERSONAL:".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.OrganizacionPersonal.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.EdifInstalaciones?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("EDIFICIOS E INSTALACIONES. GENERALIDADES".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.EdifInstalaciones.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.Almacenes?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("EDIFICIOS E INSTALACIONES. ALMACENES".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("MATERIA PRIMA".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("MATERIAL ACONDICIONAMIENTO".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PRODUCTO A GRANEL".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PRODUCTO TERMINADO".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Inflamables".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PROD. y Mat. Rechazados".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Devoluciones".ToUpper());
                                        //header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.Almacenes.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(8).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().ColumnSpan(7).Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.AreaDispMatPrima?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREA DE DISPENSADO DE MATERIA PRIMA".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.AreaDispMatPrima.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.AreaProduccion?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("EDIFICIOS E INSTALACIONES. ALMACENES".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("LÍQUIDOS".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("SEMISÓLIDOS".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("SÓLIDOS".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.AreaProduccion.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(5).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().ColumnSpan(4).Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.AreaAcondicionamiento?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREAS DE ACONDICIONAMIENTO PARA EMPAQUE SECUNDARIO".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.AreaAcondicionamiento.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.EquiposGeneralidades?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("EQUIPO. GENERALIDADES".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("LÍQUIDOS".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("SEMISÓLIDOS".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("SÓLIDOS".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.EquiposGeneralidades.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(5).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().ColumnSpan(4).Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.Equipos?.LContenido?.Count > 0)
                            {
                                //column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                //column.Item().AlignLeft().Text(string.Format("ÁREAS DE ACONDICIONAMIENTO PARA EMPAQUE SECUNDARIO".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.Equipos.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.MatProducts?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("MATERIALES Y PRODUCTOS".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.MatProducts.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.Documentacion?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Documentación".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.Documentacion.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.Produccion?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("PRODUCCIÓN".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("LÍQUIDOS".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("SEMISÓLIDOS".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("SÓLIDOS".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.Produccion.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(5).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().ColumnSpan(4).Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.GarantiaCalidad?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("GARANTÍA DE CALIDAD".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.GarantiaCalidad.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.ControlCalidad?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Control DE CALIDAD".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.ControlCalidad.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.ProdAnalisisContrato?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("PRODUCCIÓN Y ANÁLISIS POR CONTRATO".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.ProdAnalisisContrato.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.ValGenerales?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("CALIFICACIÓN Y VALIDACIÓN".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.ValGenerales.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.QuejasReclamos?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("QUEJAS, RECLAMOS Y RETIRO DE PRODUCTOS".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.QuejasReclamos.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.AutoInspecAuditCal?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("AUTOINSPECCIÓN Y AUDITORIAS DE CALIDAD".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.AutoInspecAuditCal.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.FabProdFarmEsteril_A?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("FABRICACIÓN DE PRODUCTOS FARMACÉUTICOS ESTÉRILES".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Esterilización Terminal".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Filtración esterilizante".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Llenado aséptico".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.FabProdFarmEsteril_A.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(5).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().ColumnSpan(4).Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.FabProdFarmEsteril_Gen?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("FABRICACIÓN DE PRODUCTOS FARMACÉUTICOS ESTÉRILES".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.FabProdFarmEsteril_Gen.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.FabProdFarmEsteril_A2?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("FABRICACIÓN DE PRODUCTOS FARMACÉUTICOS ESTÉRILES".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Esterilización Terminal".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Filtración esterilizante".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Llenado aséptico".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.FabProdFarmEsteril_A2.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(5).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().ColumnSpan(4).Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.FabProdFarmEsteril_A3?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("FABRICACIÓN DE PRODUCTOS FARMACÉUTICOS ESTÉRILES".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.FabProdFarmEsteril_A3.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.Lactamicos?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("FABRICACIÓN DE PRODUCTOS FARMACÉUTICOS B-LACTÁMICOS".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.Lactamicos.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMFabricanteMed?.ProdCitostatico?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("FABRICACIÓN DE PRODUCTOS CON HORMONAS Y PRODUCTOS CITOSTÁTICOS".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMFabricanteMed.ProdCitostatico.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }


                            column.Item().PaddingVertical(5).AlignTop().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn();
                                });

                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper()).Bold();
                                });

                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosConclusiones?.ObservacionesFinales);

                            });

                            column.Item().PaddingVertical(5).Text(string.Format("Esta Acta se levanta en presencia de los abajo firmantes\r\n"));
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                });

                                table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Establecimiento:").Bold();
                                if (!string.IsNullOrEmpty(inspection.InspGuiaBPMFabricanteMed.DatosRepresentLegal?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspGuiaBPMFabricanteMed.DatosRepresentLegal.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitArea);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }


                                if (!string.IsNullOrEmpty(inspection.InspGuiaBPMFabricanteMed.DatosRegente?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspGuiaBPMFabricanteMed.DatosRegente.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }


                                table.Cell().AlignLeft().Text("");

                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Cargo:{2}", inspection.InspGuiaBPMFabricanteMed.DatosRepresentLegal?.Nombre, inspection.InspGuiaBPMFabricanteMed.DatosRepresentLegal?.Cedula, inspection.InspGuiaBPMFabricanteMed.DatosRepresentLegal?.Cargo));
                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Cargo:{2} | Reg.:{3}", inspection.InspGuiaBPMFabricanteMed.DatosRegente?.Nombre, inspection.InspGuiaBPMFabricanteMed.DatosRegente?.Cedula, inspection.InspGuiaBPMFabricanteMed.DatosRegente?.Cargo, inspection.InspGuiaBPMFabricanteMed.DatosRegente?.NumRegistro));

                                table.Cell().AlignLeft().Text("");

                            });

                            column.Item().PaddingVertical(5).Text(" ").Bold();

                            if (inspection.ParticipantesDNFD?.LParticipantes?.Count > 0)
                            {
                                column.Item().Table(table => {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(1);
                                    });

                                    table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Ministerio de Salud (DNFD):").Bold();

                                    foreach (var participant in inspection.ParticipantesDNFD.LParticipantes)
                                    {
                                        table.Cell().Table(tbl =>
                                        {
                                            tbl.ColumnsDefinition(columns =>
                                            {
                                                columns.RelativeColumn(1);
                                            });
                                            if (!string.IsNullOrEmpty(participant.Firma))
                                            {
                                                byte[] data = Convert.FromBase64String(participant.Firma.Split("image/png;base64,")[1]);
                                                MemoryStream memoryStream = new MemoryStream(data);
                                                tbl.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                            }
                                            tbl.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Reg.:{2}", participant.NombreCompleto, participant.CedulaIdentificacion, participant.RegistroNumero));
                                        });
                                    }
                                });
                            }

                            column.Item().PaddingVertical(5).Text(string.Format("Hora de finalización de inspección: {0}", inspection.DatosConclusiones?.FechaFinalizacion?.ToString("dd/MM/yyyy hh:mm tt") ?? ""));

                            column.Item().PaddingVertical(10).Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(4);
                                    columns.RelativeColumn(6);
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                    });
                                    tbl.Header(header =>
                                    {
                                        header.Cell().AlignLeft().Text("Fundamento Legal:").Bold();
                                    });
                                    tbl.Cell().AlignLeft().Text("Ley 66 de 10 de noviembre de 1947");
                                    tbl.Cell().AlignLeft().Text("Ley 1 de 10 de enero de 2001");
                                    tbl.Cell().AlignLeft().Text("Ley 17 de 12 de septiembre de 2014");
                                    tbl.Cell().AlignLeft().Text("Ley 24 de 29 de enero de 1963");
                                    tbl.Cell().AlignLeft().Text("Decreto Ejecutivo 115 de 16 de agosto de 2022");
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                    });

                                    tbl.Header(header =>
                                    {
                                        header.Cell().ColumnSpan(3).AlignLeft().Text("Contáctenos:").Bold();
                                    });

                                    tbl.Cell().AlignLeft().Text("S. Inspecciones");
                                    tbl.Cell().AlignLeft().Text("512-9168/62 (Ext. 1126)");
                                    tbl.Cell().AlignLeft().Text("inspeccionesfyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("S. Auditorías");
                                    tbl.Cell().AlignLeft().Text("512-9168/62");
                                    tbl.Cell().AlignLeft().Text("auditoriafyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Veraguas");
                                    tbl.Cell().AlignLeft().Text("935-0316/18");
                                    tbl.Cell().AlignLeft().Text("orvdnfd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Chiriquí");
                                    tbl.Cell().AlignLeft().Text("774-7410");
                                    tbl.Cell().AlignLeft().Text("fydchiriqui@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Colón");
                                    tbl.Cell().AlignLeft().Text("475-2060 Ext. 5021");
                                    tbl.Cell().AlignLeft().Text("mbramwell@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Panamá Pacífico");
                                    tbl.Cell().AlignLeft().Text("504-2565");
                                    tbl.Cell().AlignLeft().Text("rlquiros@minsa.gob.pa");
                                });

                            });

                        });

                        page.Footer().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                            });


                            table.Cell().AlignRight().AlignBottom().Text(string.Format("Confeccionado: Sección de Inspecciones {0}", DateTime.Now.ToString("dd/MM/yyyy")));
                        });
                    });
                }).GeneratePdf();

                Stream stream = new MemoryStream(byteArray);

                return stream;
            }
            catch { }
            return null;
        }

        // Guis BPM Laboratorios Acondicionadores de Medicamentos
        private async Task<Stream> GenerateGuiaLabAcondicionadores(AUD_InspeccionTB inspection)
        {
            try
            {
                //var inspection = DalService.Get<AUD_InspeccionTB>(InspectionId);

                // code in your main method
                var byteArray = QuestPDF.Fluent.Document.Create(container =>
                {
                    container.Page(page =>
                    {
                        page.Size(PageSizes.A4);
                        page.Margin(5, Unit.Millimetre);
                        page.PageColor(Colors.White);
                        page.DefaultTextStyle(x => x.FontSize(8));
                        //page.DefaultTextStyle(x => x.Color("Black"));

                        var path = System.IO.Path.Combine(env.WebRootPath, "img", "pdf", "Header.png");

                        page.Header().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                            });

                            table.Header(header =>
                            {
                                header.Cell().Image(path);
                                header.Cell().AlignCenter().Text("");
                                header.Cell().AlignRight().AlignMiddle().Text(string.Format("Acta N°: {0}\r\nEstatus: {1}", inspection.NumActa, DataModel.Helper.Helper.GetDescription(inspection.StatusInspecciones)));
                            });

                            table.Cell().ColumnSpan(3).AlignLeft().Text("DIRECCIÓN NACIONAL DE FARMACIA Y DROGAS").Bold();
                            table.Cell().ColumnSpan(3).AlignLeft().Text("Departamento de Auditorías de Calidad a Establecimientos Farmacéuticos y No Farmacéuticos");
                            table.Cell().ColumnSpan(3).AlignCenter().Text("GUÍA de Laboratorio Acondicionador.".ToUpper()).Bold();
                        });

                        page.Content().PaddingVertical(8).Column(column =>
                        {
                            column.Item().AlignLeft().Text(string.Format("Hora de Inicio: {0}", inspection.FechaInicio.ToString("hh:mm tt")));
                            column.Item().AlignLeft().Text(string.Format("Fecha: {0}", inspection.FechaInicio.ToString("dd/MM/yyyy")));

                            column.Item().AlignLeft().Text(string.Format("TIPO DE INSPECCIÓN: {0}", DataModel.Helper.Helper.GetDescription(inspection.TipoActa)));
                            column.Item().AlignLeft().Text(string.Format("TIPO DE ESTABLECIMIENTO: {0}", DataModel.Helper.Helper.GetDescription(inspection.Establecimiento.TipoEstablecimiento)));


                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("I. PARTICIPANTES EN LA INSPECCIÓN:".ToUpper())).Bold();

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Autoridad Sanitaria:"));
                            if (inspection.ParticipantesDNFD?.LParticipantes?.Count > 0)
                            {
                                foreach (var participant in inspection.ParticipantesDNFD.LParticipantes)
                                {
                                    column.Item().AlignLeft().Text(string.Format("Lic. {0}", participant.NombreCompleto));
                                }
                            }

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Por la Empresa:"));
                            if (inspection.InspGuiaBPMLabAcondicionador?.DatosRepresentLegal != null)
                            {
                                column.Item().AlignLeft().Text(string.Format("Representante Legal: {0}, Cedula: {1}", inspection.InspGuiaBPMLabAcondicionador.DatosRepresentLegal.Nombre, inspection.InspGuiaBPMLabAcondicionador.DatosRepresentLegal.Cedula));
                            }
                            if (inspection.InspGuiaBPMLabAcondicionador?.DatosRegente != null)
                            {
                                column.Item().AlignLeft().Text(string.Format("Regente farmacéutico / Director técnico: {0}, Cedula: {1}", inspection.InspGuiaBPMLabAcondicionador.DatosRegente.Nombre, inspection.InspGuiaBPMLabAcondicionador.DatosRegente.Cedula));
                            }
                            if (inspection.InspGuiaBPMLabAcondicionador?.OtrosFuncionarios?.LPersona?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Otros funcionarios de la empresa:"));
                                foreach (var persona in inspection.InspGuiaBPMLabAcondicionador.OtrosFuncionarios.LPersona)
                                {
                                    column.Item().AlignLeft().Text(string.Format("Lic. {0}", persona.Nombre));
                                }
                            }

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("II. GENERALIDADES:".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Nombre de la empresa: {0}", inspection.DatosEstablecimiento?.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Provincia: {0}", inspection.DatosEstablecimiento?.Provincia?.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Distrito: {0}", inspection.DatosEstablecimiento?.Distrito?.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Corregimiento: {0}", inspection.DatosEstablecimiento?.Corregimiento?.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Dirección: {0}", inspection.DatosEstablecimiento?.Direccion));
                            column.Item().AlignLeft().Text(string.Format("Teléfono: {0}", inspection.DatosEstablecimiento?.Telefono));
                            column.Item().AlignLeft().Text(string.Format("Correo electrónico: {0}", inspection.DatosEstablecimiento?.Correo));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("RESPONSABLE DE PRODUCCIÓN:".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Nombre: {0}", inspection.InspGuiaBPMLabAcondicionador?.OtrosFuncionarios?.RespProduccion?.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Profesión: {0}", inspection.InspGuiaBPMLabAcondicionador?.OtrosFuncionarios?.RespProduccion?.Profesion));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("RESPONSABLE DE CONTROL DE CALIDAD:".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Nombre: {0}", inspection.InspGuiaBPMLabAcondicionador?.OtrosFuncionarios?.RespControlCalidad?.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Profesión: {0}", inspection.InspGuiaBPMLabAcondicionador?.OtrosFuncionarios?.RespControlCalidad?.Profesion));


                            if (inspection.InspGuiaBPMLabAcondicionador?.RequisitosLegales?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("REQUISITOS LEGALES:".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        //header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMLabAcondicionador.RequisitosLegales.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(2).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Observaciones:".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(inspection.InspGuiaBPMLabAcondicionador.Observaciones);

                            column.Item().AlignLeft().Text(string.Format("¿Está el establecimiento sometido a un proceso periódico de vigilancia y control sanitario por la autoridad competente?"));
                            column.Item().AlignLeft().Text(string.Format(DataModel.Helper.Helper.GetDescription(inspection.InspGuiaBPMLabAcondicionador.ProcesoVigilanciaSanit)));

                            column.Item().AlignLeft().Text(string.Format("Fecha de la última visita: {0}", inspection.InspGuiaBPMLabAcondicionador.FechaUltimaVista?.ToString("dd/MM/yyyy") ?? ""));

                            if (inspection.InspGuiaBPMLabAcondicionador?.ClasifActComerciales?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("CLASIFICACIÓN DE LA ACTIVIDAD COMERCIAL:".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        //header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMLabAcondicionador.ClasifActComerciales.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(2).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMLabAcondicionador?.ClasifEstablecimiento?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Clasificación del Establecimiento:".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        //header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMLabAcondicionador.ClasifEstablecimiento.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(2).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMLabAcondicionador?.OrganizacionPersonal?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ORGANIZACIÓN Y PERSONAL:".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMLabAcondicionador.OrganizacionPersonal.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMLabAcondicionador?.EdifInstalaciones?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("EDIFICIOS E INSTALACIONES. GENERALIDADES".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMLabAcondicionador.EdifInstalaciones.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMLabAcondicionador?.Almacenes?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("EDIFICIOS E INSTALACIONES. ALMACENES".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("MATERIAL ACONDICIONAMIENTO".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PRODUCTO TERMINADO".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("PROD. y Mat. Rechazados".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Devoluciones".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMLabAcondicionador.Almacenes.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(6).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().ColumnSpan(4).Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMLabAcondicionador?.AreaAcondicionamiento?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("EDIFICIOS E INSTALACIONES. Otras Áreas".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMLabAcondicionador.AreaAcondicionamiento.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMLabAcondicionador?.EquiposGeneralidades?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Equipo".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMLabAcondicionador.EquiposGeneralidades.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMLabAcondicionador?.MatProducts?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Materiales y Productos".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMLabAcondicionador.MatProducts.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMLabAcondicionador?.Documentacion?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Documentación".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMLabAcondicionador.Documentacion.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMLabAcondicionador?.Acondicionamiento?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Acondicionamiento".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMLabAcondicionador.Acondicionamiento.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMLabAcondicionador?.GarantiaCalidad?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Garantía de Calidad".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMLabAcondicionador.GarantiaCalidad.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMLabAcondicionador?.ControlCalidad?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Control de Calidad".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMLabAcondicionador.ControlCalidad.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMLabAcondicionador?.ProdAnalisisContrato?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Producción y Análisis por Contrato".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMLabAcondicionador.ProdAnalisisContrato.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMLabAcondicionador?.ValGenerales?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Validación".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMLabAcondicionador.ValGenerales.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMLabAcondicionador?.QuejasReclamos?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Quejas, Reclamos y Retiros de Productos".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMLabAcondicionador.QuejasReclamos.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiaBPMLabAcondicionador?.AutoInspecAuditCal?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("AutoInspección y Auditorías de Calidad".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiaBPMLabAcondicionador.AutoInspecAuditCal.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }


                            column.Item().PaddingVertical(5).AlignTop().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn();
                                });

                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper()).Bold();
                                });

                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosConclusiones?.ObservacionesFinales);

                            });

                            column.Item().PaddingVertical(5).Text(string.Format("Esta Acta se levanta en presencia de los abajo firmantes\r\n"));
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                });

                                table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Establecimiento:").Bold();
                                if (!string.IsNullOrEmpty(inspection.InspGuiaBPMLabAcondicionador.DatosRepresentLegal?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspGuiaBPMLabAcondicionador.DatosRepresentLegal.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitArea);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }


                                if (!string.IsNullOrEmpty(inspection.InspGuiaBPMLabAcondicionador.DatosRegente?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspGuiaBPMLabAcondicionador.DatosRegente.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }


                                table.Cell().AlignLeft().Text("");

                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Cargo:{2}", inspection.InspGuiaBPMLabAcondicionador.DatosRepresentLegal?.Nombre, inspection.InspGuiaBPMLabAcondicionador.DatosRepresentLegal?.Cedula, inspection.InspGuiaBPMLabAcondicionador.DatosRepresentLegal?.Cargo));
                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Cargo:{2} | Reg.:{3}", inspection.InspGuiaBPMLabAcondicionador.DatosRegente?.Nombre, inspection.InspGuiaBPMLabAcondicionador.DatosRegente?.Cedula, inspection.InspGuiaBPMLabAcondicionador.DatosRegente?.Cargo, inspection.InspGuiaBPMLabAcondicionador.DatosRegente?.NumRegistro));

                                table.Cell().AlignLeft().Text("");

                            });

                            column.Item().PaddingVertical(5).Text(" ").Bold();

                            if (inspection.ParticipantesDNFD?.LParticipantes?.Count > 0)
                            {
                                column.Item().Table(table => {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(1);
                                    });

                                    table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Ministerio de Salud (DNFD):").Bold();

                                    foreach (var participant in inspection.ParticipantesDNFD.LParticipantes)
                                    {
                                        table.Cell().Table(tbl =>
                                        {
                                            tbl.ColumnsDefinition(columns =>
                                            {
                                                columns.RelativeColumn(1);
                                            });
                                            if (!string.IsNullOrEmpty(participant.Firma))
                                            {
                                                byte[] data = Convert.FromBase64String(participant.Firma.Split("image/png;base64,")[1]);
                                                MemoryStream memoryStream = new MemoryStream(data);
                                                tbl.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                            }
                                            tbl.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Reg.:{2}", participant.NombreCompleto, participant.CedulaIdentificacion, participant.RegistroNumero));
                                        });
                                    }
                                });
                            }

                            column.Item().PaddingVertical(5).Text(string.Format("Hora de finalización de inspección: {0}", inspection.DatosConclusiones?.FechaFinalizacion?.ToString("dd/MM/yyyy hh:mm tt") ?? ""));

                            column.Item().PaddingVertical(10).Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(4);
                                    columns.RelativeColumn(6);
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                    });
                                    tbl.Header(header =>
                                    {
                                        header.Cell().AlignLeft().Text("Fundamento Legal:").Bold();
                                    });
                                    tbl.Cell().AlignLeft().Text("Ley 66 de 10 de noviembre de 1947");
                                    tbl.Cell().AlignLeft().Text("Ley 1 de 10 de enero de 2001");
                                    tbl.Cell().AlignLeft().Text("Ley 17 de 12 de septiembre de 2014");
                                    tbl.Cell().AlignLeft().Text("Ley 24 de 29 de enero de 1963");
                                    tbl.Cell().AlignLeft().Text("Decreto Ejecutivo 115 de 16 de agosto de 2022");
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                    });

                                    tbl.Header(header =>
                                    {
                                        header.Cell().ColumnSpan(3).AlignLeft().Text("Contáctenos:").Bold();
                                    });

                                    tbl.Cell().AlignLeft().Text("S. Inspecciones");
                                    tbl.Cell().AlignLeft().Text("512-9168/62 (Ext. 1126)");
                                    tbl.Cell().AlignLeft().Text("inspeccionesfyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("S. Auditorías");
                                    tbl.Cell().AlignLeft().Text("512-9168/62");
                                    tbl.Cell().AlignLeft().Text("auditoriafyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Veraguas");
                                    tbl.Cell().AlignLeft().Text("935-0316/18");
                                    tbl.Cell().AlignLeft().Text("orvdnfd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Chiriquí");
                                    tbl.Cell().AlignLeft().Text("774-7410");
                                    tbl.Cell().AlignLeft().Text("fydchiriqui@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Colón");
                                    tbl.Cell().AlignLeft().Text("475-2060 Ext. 5021");
                                    tbl.Cell().AlignLeft().Text("mbramwell@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Panamá Pacífico");
                                    tbl.Cell().AlignLeft().Text("504-2565");
                                    tbl.Cell().AlignLeft().Text("rlquiros@minsa.gob.pa");
                                });

                            });

                        });

                        page.Footer().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                            });


                            table.Cell().AlignRight().AlignBottom().Text(string.Format("Confeccionado: Sección de Inspecciones {0}", DateTime.Now.ToString("dd/MM/yyyy")));
                        });
                    });
                }).GeneratePdf();

                Stream stream = new MemoryStream(byteArray);

                return stream;
            }
            catch { }
            return null;
        }
        //generamos el pdf de BPM Guia Fabricante de Cosmeticos y Desinfectantes
        private async Task<Stream> GenerateGuiaFabricantesCosmeticosDesinfectantes(AUD_InspeccionTB inspection)
        {
            try
            {
                //var inspection = DalService.Get<AUD_InspeccionTB>(InspectionId);

                // code in your main method
                var byteArray = QuestPDF.Fluent.Document.Create(container =>
                {
                    container.Page(page =>
                    {
                        page.Size(PageSizes.A4);
                        page.Margin(5, Unit.Millimetre);
                        page.PageColor(Colors.White);
                        page.DefaultTextStyle(x => x.FontSize(8));
                        //page.DefaultTextStyle(x => x.Color("Black"));

                        var path = System.IO.Path.Combine(env.WebRootPath, "img", "pdf", "Header.png");

                        page.Header().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                            });

                            table.Header(header =>
                            {
                                header.Cell().Image(path);
                                header.Cell().AlignCenter().Text("");
                                header.Cell().AlignRight().AlignMiddle().Text(string.Format("Acta N°: {0}\r\nEstatus: {1}", inspection.NumActa, DataModel.Helper.Helper.GetDescription(inspection.StatusInspecciones)));
                            });

                            table.Cell().ColumnSpan(3).AlignLeft().Text("DIRECCIÓN NACIONAL DE FARMACIA Y DROGAS").Bold();
                            table.Cell().ColumnSpan(3).AlignLeft().Text("Departamento de Auditorías de Calidad a Establecimientos Farmacéuticos y No Farmacéuticos");
                            table.Cell().ColumnSpan(3).AlignCenter().Text("Guía de Laboratorio Fabricante de Fabricantes Cosmeticos Desinfectantes y Plaguicidas".ToUpper()).Bold();
                        });

                        page.Content().PaddingVertical(8).Column(column =>
                        {
                            column.Item().AlignLeft().Text(string.Format("Hora de Inicio: {0}", inspection.FechaInicio.ToString("hh:mm tt")));
                            column.Item().AlignLeft().Text(string.Format("Fecha: {0}", inspection.FechaInicio.ToString("dd/MM/yyyy")));

                            column.Item().AlignLeft().Text(string.Format("TIPO DE INSPECCIÓN: {0}", DataModel.Helper.Helper.GetDescription(inspection.TipoActa)));
                            column.Item().AlignLeft().Text(string.Format("TIPO DE ESTABLECIMIENTO: {0}", DataModel.Helper.Helper.GetDescription(inspection.Establecimiento.TipoEstablecimiento)));


                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("I. PARTICIPANTES EN LA INSPECCIÓN:".ToUpper())).Bold();

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Autoridad Sanitaria:"));
                            if (inspection.ParticipantesDNFD?.LParticipantes?.Count > 0)
                            {
                                foreach (var participant in inspection.ParticipantesDNFD.LParticipantes)
                                {
                                    column.Item().AlignLeft().Text(string.Format("Lic. {0}", participant.NombreCompleto));
                                }
                            }

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Por la Empresa:"));
                            if (inspection.InspGuiBPMFabCosmeticoMed?.DatosRepresentLegal != null)
                            {
                                column.Item().AlignLeft().Text(string.Format("Representante Legal: {0}, Cedula: {1}", inspection.InspGuiBPMFabCosmeticoMed.DatosRepresentLegal.Nombre, inspection.InspGuiBPMFabCosmeticoMed.DatosRepresentLegal.Cedula));
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.DatosRegente != null)
                            {
                                column.Item().AlignLeft().Text(string.Format("Regente farmacéutico / Director técnico: {0}, Cedula: {1}", inspection.InspGuiBPMFabCosmeticoMed.DatosRegente.Nombre, inspection.InspGuiBPMFabCosmeticoMed.DatosRegente.Cedula));
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.OtrosFuncionarios?.LPersona?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Otros funcionarios de la empresa:"));
                                foreach (var persona in inspection.InspGuiBPMFabCosmeticoMed.OtrosFuncionarios.LPersona)
                                {
                                    column.Item().AlignLeft().Text(string.Format("Lic. {0}", persona.Nombre));
                                }
                            }

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("II. GENERALIDADES:".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Nombre de la empresa: {0}", inspection.DatosEstablecimiento?.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Provincia: {0}", inspection.DatosEstablecimiento?.Provincia?.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Distrito: {0}", inspection.DatosEstablecimiento?.Distrito?.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Corregimiento: {0}", inspection.DatosEstablecimiento?.Corregimiento?.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Dirección: {0}", inspection.DatosEstablecimiento?.Direccion));
                            column.Item().AlignLeft().Text(string.Format("Teléfono: {0}", inspection.DatosEstablecimiento?.Telefono));
                            column.Item().AlignLeft().Text(string.Format("Correo electrónico: {0}", inspection.DatosEstablecimiento?.Correo));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("RESPONSABLE DE PRODUCCIÓN:".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Nombre: {0}", inspection.InspGuiBPMFabCosmeticoMed?.OtrosFuncionarios?.RespProduccion?.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Profesión: {0}", inspection.InspGuiBPMFabCosmeticoMed?.OtrosFuncionarios?.RespProduccion?.Profesion));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("RESPONSABLE DE CONTROL DE CALIDAD:".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Nombre: {0}", inspection.InspGuiBPMFabCosmeticoMed?.OtrosFuncionarios?.RespControlCalidad?.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Profesión: {0}", inspection.InspGuiBPMFabCosmeticoMed?.OtrosFuncionarios?.RespControlCalidad?.Profesion));

                            if (inspection.InspGuiBPMFabCosmeticoMed?.RequisitosLegales?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("REQUISITOS LEGALES:".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        //header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.RequisitosLegales.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(2).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Observaciones:".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(inspection.InspGuiBPMFabCosmeticoMed.Observaciones);

                            column.Item().AlignLeft().Text(string.Format("¿Está el establecimiento sometido a un proceso periódico de vigilancia y control sanitario por la autoridad competente?"));
                            column.Item().AlignLeft().Text(string.Format(DataModel.Helper.Helper.GetDescription(inspection.InspGuiBPMFabCosmeticoMed.ProcesoVigilanciaSanit)));

                            column.Item().AlignLeft().Text(string.Format("Fecha de la última visita: {0}", inspection.InspGuiBPMFabCosmeticoMed.FechaUltimaVista?.ToString("dd/MM/yyyy") ?? ""));

                            if (inspection.InspGuiBPMFabCosmeticoMed?.ClasifActComerciales?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("CLASIFICACIÓN DE LA ACTIVIDAD COMERCIAL:".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        //header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.ClasifActComerciales.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(2).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.ClasifEstablecimiento?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Clasificación del Establecimiento:".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)4);
                                        columns.RelativeColumn((float)1);
                                        columns.RelativeColumn((float)1);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Capítulo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumple".ToUpper());
                                        //header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIoNes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.ClasifEstablecimiento.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().ColumnSpan(2).Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            //table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.AdminInfoGeneral?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Administración e Información General:".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.AdminInfoGeneral.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.CondExtAlmacenas?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ALMACENES - Condiciones Externas".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.CondExtAlmacenas.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.CondIntAlmacenas?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ALMACENES - Condiciones Internas".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.CondIntAlmacenas.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.AreaRecepMateriaPrima?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ALMACENES - Área de Recepción de Materia Prima".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.AreaRecepMateriaPrima.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.AlmacenMateriaPrima?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ALMACENES - Almacén de Materia Prima".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.AlmacenMateriaPrima.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.AlmacenMatAcondicionamineto?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ALMACENES - Área de almacenamiento de Materiales de Acondicionamiento, Empaque y Envase".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.AlmacenMatAcondicionamineto.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.RecepProductoTerminado?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ALMACENES - Recepción de Producto Terminado (de producción al almacén)".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.RecepProductoTerminado.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.AlmacenProductoTerminado?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ALMACENES - Almacén de Producto Terminado".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.AlmacenProductoTerminado.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.ProductoDevueltoRechazado?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ALMACENES - Área de productos Devueltos y/o Rechazados".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.ProductoDevueltoRechazado.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.DistProductoTerminado?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ALMACENES - Distribución de Productos Terminados".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.DistProductoTerminado.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.ManejoQuejaReclamos?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ALMACENES - Manejo de quejas y reclamos de productos comercializados".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.ManejoQuejaReclamos.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.RetiroProcMercado?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ALMACENES - Retiro de Productos del Mercado".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.RetiroProcMercado.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.SistemaInstAgua?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("SISTEMAS CRITICOS DE APOYO - Sistemas e Instalaciones de Agua".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.SistemaInstAgua.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.OsmosisInversa?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("SISTEMAS CRITICOS DE APOYO - Osmosis Inversa".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.OsmosisInversa.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.SistemaDeIonizacion?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("SISTEMAS CRITICOS DE APOYO - Sistema de Deionización".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.SistemaDeIonizacion.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.CalibraVerifEquipo?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("SISTEMAS CRITICOS DE APOYO - Calibraciones y Verificaciones de equipo".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.CalibraVerifEquipo.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.Validaciones?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("SISTEMAS CRITICOS DE APOYO - Validaciones".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.Validaciones.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.MantAreaEquipos?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("SISTEMAS CRITICOS DE APOYO - Mantenimiento de áreas y equipos".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.MantAreaEquipos.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.AreaProdCondExternas?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREAS DE PRODUCCIÓN - Condiciones Externas".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.AreaProdCondExternas.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.AreaProdCondInternas?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREAS DE PRODUCCIÓN - Condiciones Internas".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.AreaProdCondInternas.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.AreaOrganizaDocumentacion?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREAS DE PRODUCCIÓN - Organización y Documentación".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.AreaOrganizaDocumentacion.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.AreaDispensionOrdFab?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREAS DE PRODUCCIÓN - Área de Dispensación de Ordenes de Fabricación".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.AreaDispensionOrdFab.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.FabProdDesinfectante?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREAS DE PRODUCCIÓN - Fabricación de Productos Desinfectantes".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.FabProdDesinfectante.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.FabPlaguicida?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREAS DE PRODUCCIÓN - Fabricación de Plaguicidas".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.FabPlaguicida.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.FabCosmeticos?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ÁREAS DE PRODUCCIÓN - Fabricación de Cosméticos".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.FabCosmeticos.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.AreaEnvasado?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ACONDICIONAMIENTO - Área de Envasado".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.AreaEnvasado.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.AreaEtiquetadoEmpaque?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("ACONDICIONAMIENTO - Área de Etiquetado y Empaque".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.AreaEtiquetadoEmpaque.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.LabControlCalidad?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("CONTROL DE CALIDAD - Laboratorio de Control de Calidad".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.LabControlCalidad.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.AnalisisContrato?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("CONTROL DE CALIDAD - Análisis por Contrato".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.AnalisisContrato.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }
                            if (inspection.InspGuiBPMFabCosmeticoMed?.InspeccionAudito?.LContenido?.Count > 0)
                            {
                                column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                                column.Item().AlignLeft().Text(string.Format("Inspecciones y Auditoría".ToUpper())).Bold();
                                column.Item().Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)3.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)0.5);
                                        columns.RelativeColumn((float)4);
                                    });
                                    table.Header(header =>
                                    {
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Max".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Pto. Obt".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Título".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Eval.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Crit.".ToUpper());
                                        header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONes".ToUpper());
                                    });
                                    foreach (var dat in inspection.InspGuiBPMFabCosmeticoMed.InspeccionAudito.LContenido)
                                    {
                                        if (dat.IsHeader)
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        }
                                        else
                                        {
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosMax);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.PuntosObtenido);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                            if (dat.LEvaluacion?.Count > 0)
                                            {
                                                foreach (var eva in dat.LEvaluacion)
                                                {
                                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(DataModel.Helper.Helper.GetDescription(eva.Evaluacion));
                                                }
                                            }
                                            else
                                            {
                                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                            }
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                            table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                        }
                                    }
                                });
                            }

                            column.Item().PaddingVertical(5).AlignTop().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn();
                                });

                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper()).Bold();
                                });

                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.DatosConclusiones?.ObservacionesFinales);

                            });

                            column.Item().PaddingVertical(5).Text(string.Format("Esta Acta se levanta en presencia de los abajo firmantes\r\n"));
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                });

                                table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Establecimiento:").Bold();
                                if (!string.IsNullOrEmpty(inspection.InspGuiBPMFabCosmeticoMed.DatosRepresentLegal?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspGuiBPMFabCosmeticoMed.DatosRepresentLegal.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitArea);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }


                                if (!string.IsNullOrEmpty(inspection.InspGuiBPMFabCosmeticoMed.DatosRegente?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspGuiBPMFabCosmeticoMed.DatosRegente.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }


                                table.Cell().AlignLeft().Text("");

                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Cargo:{2}", inspection.InspGuiBPMFabCosmeticoMed.DatosRepresentLegal?.Nombre, inspection.InspGuiBPMFabCosmeticoMed.DatosRepresentLegal?.Cedula, inspection.InspGuiBPMFabCosmeticoMed.DatosRepresentLegal?.Cargo));
                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Cargo:{2} | Reg.:{3}", inspection.InspGuiBPMFabCosmeticoMed.DatosRegente?.Nombre, inspection.InspGuiBPMFabCosmeticoMed.DatosRegente?.Cedula, inspection.InspGuiBPMFabCosmeticoMed.DatosRegente?.Cargo, inspection.InspGuiBPMFabCosmeticoMed.DatosRegente?.NumRegistro));

                                table.Cell().AlignLeft().Text("");

                            });

                            column.Item().PaddingVertical(5).Text(" ").Bold();

                            if (inspection.ParticipantesDNFD?.LParticipantes?.Count > 0)
                            {
                                column.Item().Table(table => {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(1);
                                        columns.RelativeColumn(1);
                                    });

                                    table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Ministerio de Salud (DNFD):").Bold();

                                    foreach (var participant in inspection.ParticipantesDNFD.LParticipantes)
                                    {
                                        table.Cell().Table(tbl =>
                                        {
                                            tbl.ColumnsDefinition(columns =>
                                            {
                                                columns.RelativeColumn(1);
                                            });
                                            if (!string.IsNullOrEmpty(participant.Firma))
                                            {
                                                byte[] data = Convert.FromBase64String(participant.Firma.Split("image/png;base64,")[1]);
                                                MemoryStream memoryStream = new MemoryStream(data);
                                                tbl.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                            }
                                            tbl.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Reg.:{2}", participant.NombreCompleto, participant.CedulaIdentificacion, participant.RegistroNumero));
                                        });
                                    }
                                });
                            }

                            column.Item().PaddingVertical(5).Text(string.Format("Hora de finalización de inspección: {0}", inspection.DatosConclusiones?.FechaFinalizacion?.ToString("dd/MM/yyyy hh:mm tt") ?? ""));

                            column.Item().PaddingVertical(10).Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(4);
                                    columns.RelativeColumn(6);
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                    });
                                    tbl.Header(header =>
                                    {
                                        header.Cell().AlignLeft().Text("Fundamento Legal:").Bold();
                                    });
                                    tbl.Cell().AlignLeft().Text("Ley 66 de 10 de noviembre de 1947");
                                    tbl.Cell().AlignLeft().Text("Ley 1 de 10 de enero de 2001");
                                    tbl.Cell().AlignLeft().Text("Ley 17 de 12 de septiembre de 2014");
                                    tbl.Cell().AlignLeft().Text("Ley 24 de 29 de enero de 1963");
                                    tbl.Cell().AlignLeft().Text("Decreto Ejecutivo 115 de 16 de agosto de 2022");
                                });

                                table.Cell().Table(tbl => {
                                    tbl.ColumnsDefinition(cols =>
                                    {
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                        cols.RelativeColumn();
                                    });

                                    tbl.Header(header =>
                                    {
                                        header.Cell().ColumnSpan(3).AlignLeft().Text("Contáctenos:").Bold();
                                    });

                                    tbl.Cell().AlignLeft().Text("S. Inspecciones");
                                    tbl.Cell().AlignLeft().Text("512-9168/62 (Ext. 1126)");
                                    tbl.Cell().AlignLeft().Text("inspeccionesfyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("S. Auditorías");
                                    tbl.Cell().AlignLeft().Text("512-9168/62");
                                    tbl.Cell().AlignLeft().Text("auditoriafyd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Veraguas");
                                    tbl.Cell().AlignLeft().Text("935-0316/18");
                                    tbl.Cell().AlignLeft().Text("orvdnfd@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Chiriquí");
                                    tbl.Cell().AlignLeft().Text("774-7410");
                                    tbl.Cell().AlignLeft().Text("fydchiriqui@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Colón");
                                    tbl.Cell().AlignLeft().Text("475-2060 Ext. 5021");
                                    tbl.Cell().AlignLeft().Text("mbramwell@minsa.gob.pa");

                                    tbl.Cell().AlignLeft().Text("OR Panamá Pacífico");
                                    tbl.Cell().AlignLeft().Text("504-2565");
                                    tbl.Cell().AlignLeft().Text("rlquiros@minsa.gob.pa");
                                });

                            });

                        });

                        page.Footer().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                            });


                            table.Cell().AlignRight().AlignBottom().Text(string.Format("Confeccionado: Sección de Inspecciones {0}", DateTime.Now.ToString("dd/MM/yyyy")));
                        });
                    });
                }).GeneratePdf();

                Stream stream = new MemoryStream(byteArray);

                return stream;
            }
            catch { }
            return null;
        }







        //Apertura – Cosméticos Artesanales
        private async Task<Stream> GenerateAperturaCosmeticosArtesanales(AUD_InspeccionTB inspection)
        {
            try
            {
                //var inspection = DalService.Get<AUD_InspeccionTB>(InspectionId);

                // code in your main method
                var byteArray = QuestPDF.Fluent.Document.Create(container =>
                {
                    container.Page(page =>
                    {
                        page.Size(PageSizes.A4);
                        page.Margin(5, Unit.Millimetre);
                        page.PageColor(Colors.White);
                        page.DefaultTextStyle(x => x.FontSize(8));
                        //page.DefaultTextStyle(x => x.Color("Black"));

                        var path = System.IO.Path.Combine(env.WebRootPath, "img", "pdf", "Header.png");

                        page.Header().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                            });

                            table.Header(header =>
                            {
                                header.Cell().Image(path);
                                header.Cell().AlignCenter().Text("");
                                header.Cell().AlignRight().AlignMiddle().Text(string.Format("Acta N°: {0}\r\nEstatus: {1}", inspection.NumActa, DataModel.Helper.Helper.GetDescription(inspection.StatusInspecciones)));
                            });

                            table.Cell().ColumnSpan(3).AlignLeft().Text("DIRECCIÓN NACIONAL DE FARMACIA Y DROGAS").Bold();
                            table.Cell().ColumnSpan(3).AlignLeft().Text("Departamento de Auditorías de Calidad a Establecimientos Farmacéuticos y No Farmacéuticos");
                            table.Cell().ColumnSpan(3).AlignCenter().Text("Evaluación Técnica por Apertura para la Elaboración de Cosméticos Artesanales".ToUpper()).Bold();
                        });

                        page.Content().PaddingVertical(8).Column(column =>
                        {
                            column.Item().AlignLeft().Text(string.Format("Hora de Inicio: {0}", inspection.FechaInicio.ToString("hh:mm tt")));
                            column.Item().AlignLeft().Text(string.Format("Fecha: {0}", inspection.FechaInicio.ToString("dd/MM/yyyy")));

                            column.Item().AlignLeft().Text(string.Format("TIPO DE INSPECCIÓN: {0}", DataModel.Helper.Helper.GetDescription(inspection.TipoActa)));
                            column.Item().AlignLeft().Text(string.Format("TIPO DE ESTABLECIMIENTO: {0}", DataModel.Helper.Helper.GetDescription(inspection.Establecimiento.TipoEstablecimiento)));


                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Datos Generales:".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Nombre de la empresa: {0}", inspection.InspAperturaCosmetArtesanal.GeneralesEmpresa.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Provincia: {0}", inspection.InspAperturaCosmetArtesanal.GeneralesEmpresa.Provincia));
                            column.Item().AlignLeft().Text(string.Format("Corregimiento: {0}", inspection.InspAperturaCosmetArtesanal.GeneralesEmpresa.Corregimiento));
                            column.Item().AlignLeft().Text(string.Format("Ubicación: {0}", inspection.InspAperturaCosmetArtesanal.GeneralesEmpresa.Direccion));
                            column.Item().AlignLeft().Text(string.Format("Teléfono: {0}", inspection.InspAperturaCosmetArtesanal.GeneralesEmpresa.Telefono));
                            column.Item().AlignLeft().Text(string.Format("Correo electrónico: {0}", inspection.InspAperturaCosmetArtesanal.GeneralesEmpresa.Email));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Propietario Artesano:".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Nombre: {0}", inspection.InspAperturaCosmetArtesanal.Propietario.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Cédula: {0}", inspection.InspAperturaCosmetArtesanal.Propietario.Cedula));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Documentación:".ToUpper())).Bold();
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)5);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Punto para evaluar".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumplimiento".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });

                                foreach (var dat in inspection.InspAperturaCosmetArtesanal.Documentacion.LContenido)
                                {
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                }
                            });

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Locales:".ToUpper())).Bold();
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)5);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Punto para evaluar".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumplimiento".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });

                                foreach (var dat in inspection.InspAperturaCosmetArtesanal.Locales.LContenido)
                                {
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                }
                            });

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Áreas de Almacenamiento:".ToUpper())).Bold();
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Punto para evaluar".ToUpper());
                                    header.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cumplimiento".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });

                                table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                table.Cell().ColumnSpan(3).Border(1).BorderColor(Colors.Black).AlignCenter().Text("Área para evaluar");
                                table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");


                                foreach (var dat in inspection.InspAperturaCosmetArtesanal.AreaAlmacenamiento.LContenido)
                                {
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion2));
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion3));
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                }
                            });

                            column.Item().PaddingVertical(5).AlignCenter().Text(string.Format("CRITERIO TÉCNICO")).Bold();
                            column.Item().AlignLeft().Text(string.Format("Una vez evaluado el cumplimiento de los requerimientos previstos en el Decreto Ejecutivo N° 875 del 18 de noviembre de 2021, que reglamenta la elaboración de productos cosméticos arsenales en la República de Panamá.  Inspectores Farmacéuticos de la Dirección Nacional de Farmacia y Drogas del Ministerio de Salud de Panamá concluyen que el establecimiento denominado {0}, ubicado en {1} {2} con los requisitos mínimos para la elaboración de productos cosméticos arsenales.",inspection.InspAperturaCosmetArtesanal.GeneralesEmpresa.Nombre, inspection.InspAperturaCosmetArtesanal.GeneralesEmpresa.Direccion, (inspection.InspAperturaCosmetArtesanal.DatosConclusiones.CumpleRequisitosMinOperacion ? "SÍ CUMPLE" : "NO CUMPLE")));
                            //0- Nombere, 1- Ubicacion, 2-Cumple 

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Dado en la ciudad de Panamá a los Dado en la ciudad de Panamá a los {0} días del mes de {1} de {2}.", inspection.InspAperturaCosmetArtesanal.DatosConclusiones.FechaFinalizacion?.Day, Helper.Helper.GetMonthNameByMonthNumber(int.Parse(inspection.InspAperturaCosmetArtesanal.DatosConclusiones.FechaFinalizacion?.ToString("MM") ?? "01")), inspection.InspAperturaCosmetArtesanal.DatosConclusiones.FechaFinalizacion?.Year.ToString() ?? ""));

                            column.Item().PaddingVertical(5).AlignTop().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn();
                                });

                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONES GENERALES").Bold();
                                });

                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperturaCosmetArtesanal.DatosConclusiones.ObservacionesFinales);

                            });

                            column.Item().PaddingVertical(5).AlignTop().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn();
                                });

                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Inconformidades o desviaciones detectadas".ToUpper()).Bold();
                                });

                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspAperturaCosmetArtesanal.DatosConclusiones.Inconformidades);

                            });


                            column.Item().PaddingVertical(5).Text(string.Format("Esta Acta se levanta en presencia de los abajo firmantes"));
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                });

                                table.Cell().ColumnSpan(3).AlignMiddle().AlignLeft().Text("Por el Establecimiento:").Bold();
                                if (!string.IsNullOrEmpty(inspection.InspAperturaCosmetArtesanal.Propietario?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspAperturaCosmetArtesanal.Propietario.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignMiddle().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                }
                                else
                                {
                                    table.Cell().AlignMiddle().AlignLeft().Text("");
                                }
                                table.Cell().AlignMiddle().AlignLeft().Text("");
                                table.Cell().AlignMiddle().AlignLeft().Text("");
                                
                                table.Cell().AlignLeft().AlignMiddle().Text(string.Format("{0}\r\nCédula:{1}", inspection.InspAperturaCosmetArtesanal.Propietario?.Nombre, inspection.InspAperturaCosmetArtesanal.Propietario?.Cedula));
                                
                                table.Cell().AlignMiddle().AlignLeft().Text("");
                                table.Cell().AlignMiddle().AlignLeft().Text("");

                                table.Cell().ColumnSpan(3).AlignLeft().PaddingVertical(5).Text(" ").Bold();
                                if (inspection.InspAperturaCosmetArtesanal.DatosConclusiones.LParticipantes != null)
                                {
                                    table.Cell().ColumnSpan(3).AlignLeft().Text("Por la Dirección Nacional de Farmacia y Drogas:").Bold();

                                    foreach (var participant in inspection.InspAperturaCosmetArtesanal.DatosConclusiones.LParticipantes)
                                    {
                                        table.Cell().Table(tbl =>
                                        {
                                            tbl.ColumnsDefinition(columns =>
                                            {
                                                columns.RelativeColumn(1);
                                            });
                                            if (!string.IsNullOrEmpty(participant.Firma))
                                            {
                                                byte[] data = Convert.FromBase64String(participant.Firma.Split("image/png;base64,")[1]);
                                                MemoryStream memoryStream = new MemoryStream(data);
                                                tbl.Cell().AlignMiddle().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                            }
                                            tbl.Cell().AlignMiddle().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Reg.:{2}", participant.NombreCompleto, participant.CedulaIdentificacion, participant.RegistroNumero));

                                        });
                                    }
                                }

                            });

                            column.Item().PaddingVertical(5).Text(string.Format("Fecha y Hora de finalizada la inspección: {0}", inspection.InspAperturaCosmetArtesanal.DatosConclusiones.FechaFinalizacion?.ToString("dd/MM/yyyy hh:mm tt") ?? ""));

                        });

                        page.Footer().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn(6);
                                columns.RelativeColumn(4);
                            });

                            //table.Header(header =>
                            //{
                            //    header.Cell().AlignLeft().AlignBottom().Text("Teléfono de Oficina 512-9168\r\nCorreo Electrónico: inspeccionesfyd@minsa.gob.pa");
                            //    header.Cell().AlignRight().AlignBottom().Text(string.Format("Confeccionado: Sección de Inspecciones {0}", DateTime.Now.ToString("dd/MM/yyyy")));
                            //});

                            table.Cell().Table(tbl => {
                                tbl.ColumnsDefinition(cols =>
                                {
                                    cols.RelativeColumn();
                                    cols.RelativeColumn();
                                    cols.RelativeColumn();
                                });
                                tbl.Cell().AlignLeft().Text("S. Inspecciones");
                                tbl.Cell().AlignLeft().Text("512-9168/62 (Ext. 1126)");
                                tbl.Cell().AlignLeft().Text("inspeccionesfyd@minsa.gob.pa");

                                tbl.Cell().AlignLeft().Text("S. Auditorías");
                                tbl.Cell().AlignLeft().Text("512-9168/62");
                                tbl.Cell().AlignLeft().Text("auditoriafyd@minsa.gob.pa");

                                tbl.Cell().AlignLeft().Text("OR Veraguas");
                                tbl.Cell().AlignLeft().Text("935-0316/18");
                                tbl.Cell().AlignLeft().Text("orvdnfd@minsa.gob.pa");

                                tbl.Cell().AlignLeft().Text("OR Chiriquí");
                                tbl.Cell().AlignLeft().Text("774-7410");
                                tbl.Cell().AlignLeft().Text("fydchiriqui@minsa.gob.pa");

                                tbl.Cell().AlignLeft().Text("OR Colón");
                                tbl.Cell().AlignLeft().Text("475-2060 Ext. 5021");
                                tbl.Cell().AlignLeft().Text("mbramwell@minsa.gob.pa");

                                tbl.Cell().AlignLeft().Text("OR Panamá Pacífico");
                                tbl.Cell().AlignLeft().Text("504-2565");
                                tbl.Cell().AlignLeft().Text("rlquiros@minsa.gob.pa");
                            });

                            table.Cell().AlignRight().AlignBottom().Text(string.Format("Confeccionado: Sección de Inspecciones {0}", DateTime.Now.ToString("dd/MM/yyyy")));
                        });


                    });
                })
                  .GeneratePdf();

                Stream stream = new MemoryStream(byteArray);

                return stream;
            }
            catch { }
            return null;
        }
        //Guia BPM Fabricante Productos Naturales Medicinales
        private async Task<Stream> GenerateGuiaFabricantesProdNaturalesMedicinales(AUD_InspeccionTB inspection)
        {
            try
            {
                //var inspection = DalService.Get<AUD_InspeccionTB>(InspectionId);

                // code in your main method
                var byteArray = QuestPDF.Fluent.Document.Create(container =>
                {
                    container.Page(page =>
                    {
                        page.Size(PageSizes.A4);
                        page.Margin(5, Unit.Millimetre);
                        page.PageColor(Colors.White);
                        page.DefaultTextStyle(x => x.FontSize(8));
                        //page.DefaultTextStyle(x => x.Color("Black"));

                        var path = System.IO.Path.Combine(env.WebRootPath, "img", "pdf", "Header.png");

                        page.Header().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                            });

                            table.Header(header =>
                            {
                                header.Cell().Image(path);
                                header.Cell().AlignCenter().Text("");
                                header.Cell().AlignRight().AlignMiddle().Text(string.Format("Acta N°: {0}\r\nEstatus: {1}", inspection.NumActa, DataModel.Helper.Helper.GetDescription(inspection.StatusInspecciones)));
                            });

                            table.Cell().ColumnSpan(3).AlignLeft().Text("DIRECCIÓN NACIONAL DE FARMACIA Y DROGAS").Bold();
                            table.Cell().ColumnSpan(3).AlignLeft().Text("Departamento de Auditorías de Calidad a Establecimientos Farmacéuticos y No Farmacéuticos");
                            table.Cell().ColumnSpan(3).AlignCenter().Text("GUÍA DE VERIFICACIÓN DEL REGLAMENTO TÉCNICO CENTROAMERICANO (RTCA) 11.03.69:13 PRODUCTOS FARMACÉUTICOS. PRODUCTOS NATURALES MEDICINALES PARA USO HUMANO. BUENAS PRÁCTICAS DE MANUFACTURA".ToUpper()).Bold();
                        });

                        page.Content().PaddingVertical(8).Column(column =>
                        {
                            column.Item().AlignLeft().Text(string.Format("Hora de Inicio: {0}", inspection.FechaInicio.ToString("hh:mm tt")));
                            column.Item().AlignLeft().Text(string.Format("Fecha: {0}", inspection.FechaInicio.ToString("dd/MM/yyyy")));

                            column.Item().AlignLeft().Text(string.Format("TIPO DE INSPECCIÓN: {0}", DataModel.Helper.Helper.GetDescription(inspection.TipoActa)));
                            column.Item().AlignLeft().Text(string.Format("TIPO DE ESTABLECIMIENTO: {0}", DataModel.Helper.Helper.GetDescription(inspection.Establecimiento.TipoEstablecimiento)));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("CRITERIOS DE EVALUACIÓN:".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Los diferentes ítems a evaluar de la Guía de Verificación de Buenas Prácticas de Manufactura (BPM) de Productos Naturales Medicinales para uso Humano, se clasificarán como críticos, calificables e informativos."));
                            
                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("CRÍTICO:".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Es aquel que, en atención a las BPM, afecta en forma grave e inadmisible la calidad y /o seguridad de los productos y la seguridad de los trabajadores, en su interacción con los productos y procesos."));
                            
                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("CALIFICABLE:".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Aquellos ítems que no son considerados como críticos, pero deben ser evaluados y valorados para el cumplimiento del presente reglamento"));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("INFORMATIVO:".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Suministra información de la organización y aspectos relacionados con las BPM, pero no afecta la calidad ni la seguridad de los productos o de los trabajadores en su interacción con los productos y procesos. No se contabiliza para el puntaje total."));
                            
                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Los criterios CRÍTICOS y CALIFICABLES se calificarán como cumple (100%), no cumple (0%) o no aplica, según corresponda"));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("CRITERIOS PARA LA EMISIÓN DEL CERTIFICADO DE BUENAS PRÁCTICAS DE MANUFACTURA".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Para la emisión del certificado de Buenas Prácticas de Manufactura (BPM) el laboratorio debe obtener un porcentaje de cumplimiento del 95% al 100% para los criterios calificados como críticos y un mínimo del 80 % de los ítems clasificados como calificables en la guía de verificación. Para alcanzar el 100% de cumplimiento para todas las no conformidades críticas y calificables, el laboratorio debe presentar un plan de mejora cuyos plazos de cumplimiento serán aprobados por la autoridad reguladora, según el riesgo sanitario y verificado en inspecciones posteriores. De no cumplir los plazos establecidos en el plan de mejora, se cancelará el certificado de BPM."));

                            column.Item().AlignLeft().Text(string.Format("El plan de mejora se deberá presentar en el plazo que defina la autoridad reguladora, posterior a la entrega del Informe de no conformidades detectadas durante la evaluación técnica"));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("NOTAS:".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("1) Para el caso de Guatemala y Panamá, el plazo será de 30 días calendario. El incumplimiento a esta disposición será objeto de la sanción correspondiente."));
                            column.Item().AlignLeft().Text(string.Format("2) Para el caso de Honduras, deberán presentar el plan de mejora en los plazos establecidos, pero este no estará sujeto a la aprobación por parte de la autoridad reguladora."));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("VIGENCIA DEL CERTIFICADO DE BUENAS PRÁCTICAS DE MANUFACTURA (BPM)".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("El certificado de BPM tendrá una vigencia de 2 años, esto no exime que la autoridad reguladora desarrolle auditorías durante el período de vigencia."));



                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("DATOS GENERALES:".ToUpper())).Bold();

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Autoridad Sanitaria:"));
                            foreach (var participant in inspection.InspGuiBPMFabNatMedicina.DatosConclusiones.LParticipantes)
                            {
                                column.Item().AlignLeft().Text(string.Format("Lic. {0}", participant.NombreCompleto));
                            }

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Por la Empresa:"));
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn();
                                    columns.RelativeColumn();
                                    columns.RelativeColumn();
                                });

                                table.Cell().AlignMiddle().AlignLeft().Text(string.Format("Representante Legal: {0}", inspection.InspGuiBPMFabNatMedicina.RepresentLegal.Nombre));
                                table.Cell().AlignMiddle().AlignLeft().Text(string.Format("C.I.P : {0}", inspection.InspGuiBPMFabNatMedicina.RepresentLegal.Cedula));
                                if (!string.IsNullOrEmpty(inspection.InspGuiBPMFabNatMedicina.RepresentLegal.Firma))
                                {
                                    byte[] data = Convert.FromBase64String(inspection.InspGuiBPMFabNatMedicina.RepresentLegal.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignMiddle().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                }
                                else
                                {
                                    table.Cell().AlignMiddle().AlignLeft().Text("");
                                }
                            });
                            column.Item().AlignLeft().Text(string.Format("Regente farmacéutico /Director Técnico y número de Registro:"));
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn();
                                    columns.RelativeColumn();
                                    columns.RelativeColumn();
                                });

                                table.Cell().AlignMiddle().AlignLeft().Text(string.Format("Lic: {0}", inspection.InspGuiBPMFabNatMedicina.RegenteFarmaceutico.Nombre));
                                table.Cell().AlignMiddle().AlignLeft().Text(string.Format("Registro : {0}", inspection.InspGuiBPMFabNatMedicina.RegenteFarmaceutico.NumRegistro));
                                if (!string.IsNullOrEmpty(inspection.InspGuiBPMFabNatMedicina.RegenteFarmaceutico.Firma))
                                {
                                    byte[] data = Convert.FromBase64String(inspection.InspGuiBPMFabNatMedicina.RegenteFarmaceutico.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignMiddle().AlignLeft().Image(memoryStream);
                                }
                                else
                                {
                                    table.Cell().AlignMiddle().AlignLeft().Text("");
                                }
                            });

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Otros funcionarios de la empresa:"));
                            foreach (var persona in inspection.InspGuiBPMFabNatMedicina.OtrosFuncionarios.LPersona)
                            {
                                column.Item().AlignLeft().Text(string.Format("Lic. {0}", persona.Nombre));
                            }

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("DATOS DEL ESTABLECIMIENTO:".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Nombre de la empresa: {0}", inspection.InspGuiBPMFabNatMedicina.GeneralesEmpresa.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Dirección: {0}", inspection.InspGuiBPMFabNatMedicina.GeneralesEmpresa.Direccion));
                            column.Item().AlignLeft().Text(string.Format("Ciudad: {0}", inspection.InspGuiBPMFabNatMedicina.GeneralesEmpresa.Ciudad));
                            column.Item().AlignLeft().Text(string.Format("Teléfono: {0}", inspection.InspGuiBPMFabNatMedicina.GeneralesEmpresa.Telefono));
                            column.Item().AlignLeft().Text(string.Format("Correo electrónico: {0}", inspection.InspGuiBPMFabNatMedicina.GeneralesEmpresa.Email));
                            column.Item().AlignLeft().Text(string.Format("Razon Social: {0}", inspection.InspGuiBPMFabNatMedicina.GeneralesEmpresa.RazonSocial));
                            column.Item().AlignLeft().Text(string.Format("Motivo de la Inspección: {0}", inspection.InspGuiBPMFabNatMedicina.MotivoInspeccion));


                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Datos Recolectados:".ToUpper())).Bold();
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("5. AUTORIZACIÓN DE FUNCIONAMIENTO ".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.AuthFuncionamiento.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("6.1 Organización".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.Organizacion.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("6.2 Personal".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.Personal.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("6.3 Responsabilidades del personal ".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.ResponPersonal.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("6.4 De la capacitación".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.Capacitacion.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("6.5 Higiene y salud del personal".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.HigieneSalud.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("7.1 Ubicación, diseño y características de la construcción".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.UbicacionDisenoConstruc.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("7.2 Almacenes".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.Almacenes.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("7.3 Áreas de recepción, limpieza, segregación y acondicionamiento de materia prima natural".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.AreaRecepLimpieza.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("7.4 Área de secado, molienda y extracción".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.AreaSecadoMolienda.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("7.5 Área de dispensado de materias primas".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.AreaDispensadoMatPrima.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("7.6 Áreas de producción".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.AreaProduccion.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("7.7 Área de envasado / empaque".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.AreaEnvasadoEmpaque.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("7.8 Áreas auxiliares".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.AreaAuxiliares.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("7.9 Área de control de calidad".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.AreaControlCalidad.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("8.1 Generalidades".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.Generalidades8.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("8.2 Calibración ".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.Calibracion.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("8.4 Sistema de agua ".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.SistemaAgua.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("8.5 Sistema de aire".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.SistemaAire.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("9.1 Generalidades".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.Generalidades9.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("9.2 Del dispensado de materia prima".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.DispensadoMatPrima.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("9.3 Materiales de acondicionamiento".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.MatAcondicionamiento.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("9.4 Productos a granel".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.ProdAGranel.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("9.5 Productos terminados ".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.ProdTerminados.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("9.6 Materiales y productos rechazados ".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.ProdRechazados.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("9.7 Productos devueltos ".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.ProdDevueltos.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("10.1 Generalidades".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.Generalidades10.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("10.2 De los documentos exigidos".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.DocumentosExigido.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("10.3 Procedimientos y registros".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.ProcedimientoReg.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("11. Producción y control de procesos".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.ProdControlProceso.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("12.1 De las generalidades".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.Generalidades12.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("12.2 Garantía de calidad".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.GarantiaCalidad.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("13.1 Generalidades".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.Generalidades13.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("13.2 Muestreo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.Muestreo.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("13.3 Metodología analítica ".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.MetodologiaAnalitica.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("13.4 Materiales de referencia".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.MaterialesReferencia.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("13.5 De la estabilidad ".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.Estabilidad.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("14.1 Generalidades ".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.Generalidades14.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("14.2 Retiros ".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.Retiros.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("15.1 Generalidades".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.Generalidades15.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("15.2 Del contratante ".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.Contratante.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("15.3 Del contratista ".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.Contratista.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)1);
                                    columns.RelativeColumn((float)3);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Artículo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("16. Auto-inspección y auditorías de calidad".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Criterio".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evalución".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Observaciones".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiBPMFabNatMedicina.AuditoriaCalidad.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Observaciones);
                                    }
                                }
                            });


                            column.Item().PaddingVertical(5).AlignTop().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn();
                                });

                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONES GENERALES").Bold();
                                });

                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspGuiBPMFabNatMedicina.DatosConclusiones.ObservacionesFinales);

                            });


                            column.Item().PaddingVertical(5).Text(string.Format("Esta Acta se levanta en presencia de los abajo firmantes"));
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                });

                                table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Establecimiento:").Bold();
                                if (!string.IsNullOrEmpty(inspection.InspGuiBPMFabNatMedicina.RegenteFarmaceutico?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspGuiBPMFabNatMedicina.RegenteFarmaceutico.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream,ImageScaling.FitWidth);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }
                                if (!string.IsNullOrEmpty(inspection.InspGuiBPMFabNatMedicina.RepresentLegal?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspGuiBPMFabNatMedicina.RepresentLegal.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }

                                table.Cell().AlignLeft().Text("");

                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1}", inspection.InspGuiBPMFabNatMedicina.RegenteFarmaceutico?.Nombre, inspection.InspGuiBPMFabNatMedicina.RegenteFarmaceutico?.Cedula));
                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1}", inspection.InspGuiBPMFabNatMedicina.RepresentLegal?.Nombre, inspection.InspGuiBPMFabNatMedicina.RepresentLegal?.Cedula));

                                table.Cell().AlignLeft().Text("");

                                table.Cell().ColumnSpan(3).AlignLeft().PaddingVertical(5).Text(" ").Bold();
                                if (inspection.InspGuiBPMFabNatMedicina.DatosConclusiones.LParticipantes != null)
                                {
                                    table.Cell().ColumnSpan(3).AlignLeft().Text("Por la Dirección Nacional de Farmacia y Drogas:").Bold();

                                    foreach (var participant in inspection.InspGuiBPMFabNatMedicina.DatosConclusiones.LParticipantes)
                                    {
                                        table.Cell().Table(tbl =>
                                        {
                                            tbl.ColumnsDefinition(columns =>
                                            {
                                                columns.RelativeColumn(1);
                                            });
                                            if (!string.IsNullOrEmpty(participant.Firma))
                                            {
                                                byte[] data = Convert.FromBase64String(participant.Firma.Split("image/png;base64,")[1]);
                                                MemoryStream memoryStream = new MemoryStream(data);
                                                tbl.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                            }
                                            tbl.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Reg.:{2}", participant.NombreCompleto, participant.CedulaIdentificacion, participant.RegistroNumero));

                                        });
                                    }
                                }

                            });

                            column.Item().PaddingVertical(5).Text(string.Format("Fecha y Hora de finalizada la inspección: {0}", inspection.InspGuiBPMFabNatMedicina.DatosConclusiones.FechaFinalizacion?.ToString("dd/MM/yyyy hh:mm tt") ?? ""));

                        });

                        page.Footer().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn(6);
                                columns.RelativeColumn(4);
                            });

                            //table.Header(header =>
                            //{
                            //    header.Cell().AlignLeft().AlignBottom().Text("Teléfono de Oficina 512-9168\r\nCorreo Electrónico: inspeccionesfyd@minsa.gob.pa");
                            //    header.Cell().AlignRight().AlignBottom().Text(string.Format("Confeccionado: Sección de Inspecciones {0}", DateTime.Now.ToString("dd/MM/yyyy")));
                            //});

                            table.Cell().Table(tbl => {
                                tbl.ColumnsDefinition(cols =>
                                {
                                    cols.RelativeColumn();
                                    cols.RelativeColumn();
                                    cols.RelativeColumn();
                                });
                                tbl.Cell().AlignLeft().Text("S. Inspecciones");
                                tbl.Cell().AlignLeft().Text("512-9168/62 (Ext. 1126)");
                                tbl.Cell().AlignLeft().Text("inspeccionesfyd@minsa.gob.pa");

                                tbl.Cell().AlignLeft().Text("S. Auditorías");
                                tbl.Cell().AlignLeft().Text("512-9168/62");
                                tbl.Cell().AlignLeft().Text("auditoriafyd@minsa.gob.pa");

                                tbl.Cell().AlignLeft().Text("OR Veraguas");
                                tbl.Cell().AlignLeft().Text("935-0316/18");
                                tbl.Cell().AlignLeft().Text("orvdnfd@minsa.gob.pa");

                                tbl.Cell().AlignLeft().Text("OR Chiriquí");
                                tbl.Cell().AlignLeft().Text("774-7410");
                                tbl.Cell().AlignLeft().Text("fydchiriqui@minsa.gob.pa");

                                tbl.Cell().AlignLeft().Text("OR Colón");
                                tbl.Cell().AlignLeft().Text("475-2060 Ext. 5021");
                                tbl.Cell().AlignLeft().Text("mbramwell@minsa.gob.pa");

                                tbl.Cell().AlignLeft().Text("OR Panamá Pacífico");
                                tbl.Cell().AlignLeft().Text("504-2565");
                                tbl.Cell().AlignLeft().Text("rlquiros@minsa.gob.pa");
                            });

                            table.Cell().AlignRight().AlignBottom().Text(string.Format("Confeccionado: Sección de Inspecciones {0}", DateTime.Now.ToString("dd/MM/yyyy")));
                        });


                    });
                })
                  .GeneratePdf();

                Stream stream = new MemoryStream(byteArray);

                return stream;
            }
            catch { }
            return null;
        }
        //generamos el pdf de BPM Guia BPA
        private async Task<Stream> GenerateGuiaBPM_BPA(AUD_InspeccionTB inspection)
        {
            try
            {
                //var inspection = DalService.Get<AUD_InspeccionTB>(InspectionId);

                // code in your main method
                var byteArray = QuestPDF.Fluent.Document.Create(container =>
                {
                    container.Page(page =>
                    {
                        page.Size(PageSizes.A4);
                        page.Margin(5, Unit.Millimetre);
                        page.PageColor(Colors.White);
                        page.DefaultTextStyle(x => x.FontSize(8));
                        //page.DefaultTextStyle(x => x.Color("Black"));

                        var path = System.IO.Path.Combine(env.WebRootPath, "img", "pdf", "Header.png");

                        page.Header().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                            });

                            table.Header(header =>
                            {
                                header.Cell().Image(path);
                                header.Cell().AlignCenter().Text("");
                                header.Cell().AlignRight().AlignMiddle().Text(string.Format("Acta N°: {0}\r\nEstatus: {1}", inspection.NumActa, DataModel.Helper.Helper.GetDescription(inspection.StatusInspecciones)));
                            });

                            table.Cell().ColumnSpan(3).AlignLeft().Text("DIRECCIÓN NACIONAL DE FARMACIA Y DROGAS").Bold();
                            table.Cell().ColumnSpan(3).AlignLeft().Text("Departamento de Auditorías de Calidad a Establecimientos Farmacéuticos y No Farmacéuticos");
                            table.Cell().ColumnSpan(3).AlignCenter().Text("Guía para las Buenas Prácticas de Almacenamiento, Distribución y Transporte de Medicamentos y Otros Productos para la Salud Humana".ToUpper()).Bold();
                        });

                        page.Content().PaddingVertical(8).Column(column =>
                        {
                            column.Item().AlignLeft().Text(string.Format("Hora de Inicio: {0}", inspection.FechaInicio.ToString("hh:mm tt")));
                            column.Item().AlignLeft().Text(string.Format("Fecha: {0}", inspection.FechaInicio.ToString("dd/MM/yyyy")));

                            column.Item().AlignLeft().Text(string.Format("TIPO DE INSPECCIÓN: {0}", DataModel.Helper.Helper.GetDescription(inspection.TipoActa)));
                            column.Item().AlignLeft().Text(string.Format("TIPO DE ESTABLECIMIENTO: {0}", DataModel.Helper.Helper.GetDescription(inspection.Establecimiento.TipoEstablecimiento)));


                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format(" ".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("I. INTRODUCCIÓN".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Con el propósito de establecer un documento oficial utilizado como apoyo en la realización de las inspecciones por parte de la Autoridad Reguladora y en el proceso de autoinspección en cada establecimiento farmacéutico que se dedica al Almacenamiento, Distribución y Transporte de Medicamentos y otros Productos para la Salud Humana, la Dirección Nacional de Farmacia y Drogas presenta el documento denominado Guía de Buenas Prácticas de Almacenamiento, Distribución y Transporte de Medicamentos y Otros Productos para la Salud Humana."));
                            column.Item().AlignLeft().Text(string.Format("Los ítems contemplados en la presente Guía se sustentan en la Ley No. 1 de 10 de enero de 2001 sobre Medicamentos y Otros Productos para la Salud Humana, en el Título III de la Comercialización, Capítulo I, artículo 67 y su Reglamentación contempladas en el Decreto Ejecutivo N° 115 de 16 de agosto de 2022 que reglamenta la Ley N° 1 sobre Medicamentos y Otros Productos para la Salud Humana."));
                            column.Item().AlignLeft().Text(string.Format("La Autoridad de Salud, realizará inspecciones para la evaluación de las Buenas Prácticas de Almacenamiento, Distribución y Transporte de Medicamentos y otros Productos para la Salud Humana, y al final levanta un acta de lo actuado.  Según los resultados se procederá a emitir la certificación correspondiente o en su defecto podrá amonestar, sancionar, retener o decomisar mediante resolución motivada lo que corresponda.  Por tanto, todo establecimiento farmacéutico que se dedica al Almacenamiento, Distribución y Transporte de Medicamentos y otros productos competencia de la Dirección Nacional de Farmacia y Drogas queda sujeto a inspecciones periódicas por parte de la Autoridad Reguladora."));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format(" ".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("II. CLASIFICACIÓN DE LOS CRITERIOS DE EVALUACIÓN".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("CRITERIO CRÍTICO: aquel que en atención a la normativa vigente sobre las Buenas Prácticas de Almacenamiento y Distribución (BPA y BPD) establecidas en la República de Panamá, su no cumplimiento afecta en forma grave e inadmisible la calidad, seguridad de los productos."));
                            column.Item().AlignLeft().Text(string.Format("CRITERIO MAYOR: aquel que en atención a la normativa vigente sobre las Buenas Prácticas de Almacenamiento y Distribución (BPA y BPD) establecidas en la República de Panamá, su no cumplimiento puede afectar en forma grave la calidad, seguridad de los productos."));
                            column.Item().AlignLeft().Text(string.Format("CRITERIO MENOR: aquel que en atención a la normativa vigente sobre las Buenas Prácticas de Almacenamiento y Distribución (BPA y BPD) establecidas en la República de Panamá, su no cumplimiento puede afectar en forma leve la calidad de los productos o puede ser sólo un tema de forma."));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format(" ".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("III. CRITERIO DE APROBACIÓN".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Para aprobar el cumplimiento de las Buenas Prácticas de Almacenamiento y distribución establecidas en el Decreto Ejecutivo Nº 115 del 16 de agosto de 2022, la Agencia Distribuidora debe cumplir con los porcentajes mínimos establecidos en la normativa vigente"));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format(" ".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("IV. SOLICITUD PARA OBTENCIÓN DEL CERTIFICADO DE BUENAS PRÁCTICAS DE ALMACENAMIENTO Y DISTRIBUCIÓN".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("el interesado debe realizar la solicitud con el formulario destinado para tal fin"));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format(" ".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("V. DATOS GENERALES DEL ESTABLECIMIENTO".ToUpper())).Bold();

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Establecimiento Farmacéutico:")).Bold();
                            column.Item().AlignLeft().Text(string.Format("Nombre de la empresa: {0}, {1}, {2}, {3}", inspection.InspGuiaBPM_Bpa.GeneralesEmpresa.Provincia, inspection.InspGuiaBPM_Bpa.GeneralesEmpresa.Distrito, inspection.InspGuiaBPM_Bpa.GeneralesEmpresa.Corregimiento, inspection.InspGuiaBPM_Bpa.GeneralesEmpresa.Direccion));
                            column.Item().AlignLeft().Text(string.Format("Provincia: {0}", inspection.InspGuiaBPM_Bpa.GeneralesEmpresa.Provincia));
                            column.Item().AlignLeft().Text(string.Format("Distrito: {0}", inspection.InspGuiaBPM_Bpa.GeneralesEmpresa.Distrito));
                            column.Item().AlignLeft().Text(string.Format("Corregimiento: {0}", inspection.InspGuiaBPM_Bpa.GeneralesEmpresa.Corregimiento));
                            column.Item().AlignLeft().Text(string.Format("Teléfono: {0}", inspection.InspGuiaBPM_Bpa.GeneralesEmpresa.Telefono));
                            column.Item().AlignLeft().Text(string.Format("Correo electrónico: {0}", inspection.InspGuiaBPM_Bpa.GeneralesEmpresa.Email));
                            column.Item().AlignLeft().Text(string.Format("Licencia de Operación Nº:  {0}", inspection.InspGuiaBPM_Bpa.GeneralesEmpresa.NumLicOperacion));
                            column.Item().AlignLeft().Text(string.Format("Fecha de Expiración:  {0}", inspection.InspGuiaBPM_Bpa.GeneralesEmpresa.FechaVencLicOperacion?.ToString("dd/MM/yyyy")));
                            column.Item().AlignLeft().Text(string.Format("Licencia Especial de Sustancias Controladas Nº:  {0}", inspection.InspGuiaBPM_Bpa.GeneralesEmpresa.NumLicEspecial));
                            column.Item().AlignLeft().Text(string.Format("Fecha de Expiración:  {0}", inspection.InspGuiaBPM_Bpa.GeneralesEmpresa.FechaVencLicEspecial?.ToString("dd/MM/yyyy")));
                            
                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Actividad Comercial aprobada (Ley 1 Art. 172):")).Bold();
                            column.Item().AlignLeft().Text(string.Format("{0}", inspection.InspGuiaBPM_Bpa.GeneralesEmpresa.ActComercialAprobada));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Regente Farmacéutico")).Bold();
                            column.Item().AlignLeft().Text(string.Format("Lic: {0}", inspection.InspGuiaBPM_Bpa.RegenteFarmaceutico.Nombre));
                            column.Item().AlignLeft().Text(string.Format("N° Idoneidad: {0}", inspection.InspGuiaBPM_Bpa.RegenteFarmaceutico.NumRegistro));
                            column.Item().AlignLeft().Text(string.Format("Teléfono: {0}", inspection.InspGuiaBPM_Bpa.RegenteFarmaceutico.TelefonoMovil));
                            column.Item().AlignLeft().Text(string.Format("Correo electrónico: {0}", inspection.InspGuiaBPM_Bpa.RegenteFarmaceutico.Email));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Representante Legal")).Bold();
                            column.Item().AlignLeft().Text(string.Format("Lic: {0}", inspection.InspGuiaBPM_Bpa.RepresentLegal.Nombre));
                            column.Item().AlignLeft().Text(string.Format("Cédula: {0}", inspection.InspGuiaBPM_Bpa.RepresentLegal.Cedula));
                            column.Item().AlignLeft().Text(string.Format("Teléfono: {0}", inspection.InspGuiaBPM_Bpa.RepresentLegal.TelefonoMovil));
                            column.Item().AlignLeft().Text(string.Format("Correo electrónico: {0}", inspection.InspGuiaBPM_Bpa.RepresentLegal.Email));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format(" ".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Fecha de la última Inspección por BPAD Oficial realizada: {0}", inspection.InspGuiaBPM_Bpa.FechaUltimaInspeccion?.ToString("dd/MM/yyyy") ?? ""));

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("DATOS GENERALES DE LA INSPECCIÓN".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Propósito de la Inspección de Buenas Prácticas de Almacenamiento y Distribución")).Bold();
                            foreach (var propos in inspection.InspGuiaBPM_Bpa.PropositoInsp.LPropositos)
                            {
                                column.Item().AlignLeft().Text(string.Format("{0}", propos.Nombre));
                            }

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Participantes de la inspección:".ToUpper())).Bold();

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Dirección Nacional de Farmacia y Drogas:"));
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)5);
                                    columns.RelativeColumn((float)2.5);
                                    columns.RelativeColumn((float)2.5);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Nombre".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cargo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Area Evaluada".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiaBPM_Bpa.DatosConclusiones.LParticipantes)
                                {
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.NombreCompleto);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Cargo);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.AreaEvaluada);
                                }
                            });

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Establecimiento:"));
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)5);
                                    columns.RelativeColumn((float)2.5);
                                    columns.RelativeColumn((float)2.5);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Nombre".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cargo".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Area Evaluada".ToUpper());
                                });
                                foreach (var dat in inspection.InspGuiaBPM_Bpa.OtrosFuncionarios.LPersona)
                                {
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Nombre);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Cargo);
                                    table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.AreaEvaluada);
                                }
                            });

                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format("Horarios verificados durante la inspección:")).Bold();
                            column.Item().AlignLeft().Text(string.Format("Establecimiento Farmacéutico: {0}", inspection.InspGuiaBPM_Bpa.HorarioEstFarmaceutico));
                            column.Item().PaddingVertical(5).AlignLeft().Text(string.Format(" ".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Regencia Farmacéutica: {0}", inspection.InspGuiaBPM_Bpa.HorarioRegFarmaceutica));


                            column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                            column.Item().AlignLeft().Text(string.Format("1. DISPOSICIONES GENERALES DEL ESTABLECIMIENTO FARMACÉUTICO".ToUpper())).Bold();
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)0.5);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)0.5);
                                    columns.RelativeColumn((float)0.5);
                                    columns.RelativeColumn((float)0.5);
                                    columns.RelativeColumn((float)0.5);
                                    columns.RelativeColumn((float)3.5);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("No.".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("REQUISITOS".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("CRITERIO".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cap".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evaluación".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evidencias / Observaciones".ToUpper());
                                });

                                foreach (var dat in inspection.InspGuiaBPM_Bpa.DispGenerlestablecimiento.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Numero);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                    }
                                }
                            });

                            column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                            column.Item().AlignLeft().Text(string.Format("2. AREAS DEL ESTABLECIMIENTO".ToUpper())).Bold();
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)0.5);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)0.5);
                                    columns.RelativeColumn((float)0.5);
                                    columns.RelativeColumn((float)0.5);
                                    columns.RelativeColumn((float)0.5);
                                    columns.RelativeColumn((float)3.5);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("No.".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("REQUISITOS".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("CRITERIO".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cap".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evaluación".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evidencias / Observaciones".ToUpper());
                                });

                                foreach (var dat in inspection.InspGuiaBPM_Bpa.AreasEstablecimiento.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Numero);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                    }
                                }
                            });

                            column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                            column.Item().AlignLeft().Text(string.Format("3. DISTRIBUCIÓN".ToUpper())).Bold();
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)0.5);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)0.5);
                                    columns.RelativeColumn((float)0.5);
                                    columns.RelativeColumn((float)0.5);
                                    columns.RelativeColumn((float)0.5);
                                    columns.RelativeColumn((float)3.5);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("No.".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("REQUISITOS".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("CRITERIO".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cap".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evaluación".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evidencias / Observaciones".ToUpper());
                                });

                                foreach (var dat in inspection.InspGuiaBPM_Bpa.Distribucion.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(""); 
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Numero);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                    }
                                }
                            });

                            column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                            column.Item().AlignLeft().Text(string.Format("4. TRANSPORTE PARA LOS PRODUCTOS FARMACÉUTICOS".ToUpper())).Bold();
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)0.5);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)0.5);
                                    columns.RelativeColumn((float)0.5);
                                    columns.RelativeColumn((float)0.5);
                                    columns.RelativeColumn((float)0.5);
                                    columns.RelativeColumn((float)3.5);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("No.".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("REQUISITOS".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("CRITERIO".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cap".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evaluación".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evidencias / Observaciones".ToUpper());
                                });

                                foreach (var dat in inspection.InspGuiaBPM_Bpa.TransProdFarmaceuticos.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Numero);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                    }
                                }
                            });

                            column.Item().PaddingVertical(5).AlignLeft().Text(" ");
                            column.Item().AlignLeft().Text(string.Format("5. AUTO-INSPECCIÓN".ToUpper())).Bold();
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn((float)0.5);
                                    columns.RelativeColumn((float)4);
                                    columns.RelativeColumn((float)0.5);
                                    columns.RelativeColumn((float)0.5);
                                    columns.RelativeColumn((float)0.5);
                                    columns.RelativeColumn((float)0.5);
                                    columns.RelativeColumn((float)3.5);
                                });
                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("No.".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("REQUISITOS".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("CRITERIO".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Cap".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Art".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evaluación".ToUpper());
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("Evidencias / Observaciones".ToUpper());
                                });

                                foreach (var dat in inspection.InspGuiaBPM_Bpa.AutoInspec.LContenido)
                                {
                                    if (dat.IsHeader)
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text("");
                                    }
                                    else
                                    {
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Numero);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Titulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(dat.Criterio);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Capitulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Articulo);
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignCenter().Text(DataModel.Helper.Helper.GetDescription(dat.Evaluacion));
                                        table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(dat.Observaciones);
                                    }
                                }
                            });


                            column.Item().PaddingVertical(5).AlignTop().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn();
                                });

                                table.Header(header =>
                                {
                                    header.Cell().Border(1).BorderColor(Colors.Black).Background(Colors.Grey.Lighten1).AlignCenter().Text("OBSERVACIONES GENERALES").Bold();
                                });

                                table.Cell().Border(1).BorderColor(Colors.Black).AlignLeft().Text(inspection.InspGuiaBPM_Bpa.DatosConclusiones.ObservacionesFinales);

                            });


                            column.Item().PaddingVertical(5).Text(string.Format("Esta Acta se levanta en presencia de los abajo firmantes"));
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                    columns.RelativeColumn(1);
                                });

                                table.Cell().ColumnSpan(3).AlignLeft().Text("Por el Establecimiento:").Bold();
                                if (!string.IsNullOrEmpty(inspection.InspGuiaBPM_Bpa.RegenteFarmaceutico?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspGuiaBPM_Bpa.RegenteFarmaceutico.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream,ImageScaling.FitWidth);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }
                                if (!string.IsNullOrEmpty(inspection.InspGuiaBPM_Bpa.RepresentLegal?.Firma))
                                {
                                    //var bytes = Convert.FromBase64String(base64encodedstring);
                                    //var contents = new StreamContent(new MemoryStream(bytes));
                                    byte[] data = Convert.FromBase64String(inspection.InspGuiaBPM_Bpa.RepresentLegal.Firma.Split("image/png;base64,")[1]);
                                    MemoryStream memoryStream = new MemoryStream(data);
                                    table.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                }
                                else
                                {
                                    table.Cell().AlignLeft().Text("");
                                }

                                table.Cell().AlignLeft().Text("");

                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1}", inspection.InspGuiaBPM_Bpa.RegenteFarmaceutico?.Nombre, inspection.InspGuiaBPM_Bpa.RegenteFarmaceutico?.Cedula));
                                table.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1}", inspection.InspGuiaBPM_Bpa.RepresentLegal?.Nombre, inspection.InspGuiaBPM_Bpa.RepresentLegal?.Cedula));

                                table.Cell().AlignLeft().Text("");

                                table.Cell().ColumnSpan(3).AlignLeft().PaddingVertical(5).Text(" ").Bold();
                                if (inspection.InspGuiaBPM_Bpa.DatosConclusiones.LParticipantes != null)
                                {
                                    table.Cell().ColumnSpan(3).AlignLeft().Text("Por la Dirección Nacional de Farmacia y Drogas:").Bold();

                                    foreach (var participant in inspection.InspGuiaBPM_Bpa.DatosConclusiones.LParticipantes)
                                    {
                                        table.Cell().Table(tbl =>
                                        {
                                            tbl.ColumnsDefinition(columns =>
                                            {
                                                columns.RelativeColumn(1);
                                            });
                                            if (!string.IsNullOrEmpty(participant.Firma))
                                            {
                                                byte[] data = Convert.FromBase64String(participant.Firma.Split("image/png;base64,")[1]);
                                                MemoryStream memoryStream = new MemoryStream(data);
                                                tbl.Cell().AlignLeft().Image(memoryStream, ImageScaling.FitWidth);
                                            }
                                            tbl.Cell().AlignLeft().Text(string.Format("{0}\r\nCédula:{1} | Reg.:{2}", participant.NombreCompleto, participant.CedulaIdentificacion, participant.RegistroNumero));

                                        });
                                    }
                                }

                            });

                            column.Item().PaddingVertical(5).Text(string.Format("Fecha y Hora de finalizada la inspección: {0}", inspection.InspGuiaBPM_Bpa.DatosConclusiones.FechaFinalizacion?.ToString("dd/MM/yyyy hh:mm tt") ?? ""));

                        });

                        page.Footer().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn(6);
                                columns.RelativeColumn(4);
                            });

                            //table.Header(header =>
                            //{
                            //    header.Cell().AlignLeft().AlignBottom().Text("Teléfono de Oficina 512-9168\r\nCorreo Electrónico: inspeccionesfyd@minsa.gob.pa");
                            //    header.Cell().AlignRight().AlignBottom().Text(string.Format("Confeccionado: Sección de Inspecciones {0}", DateTime.Now.ToString("dd/MM/yyyy")));
                            //});

                            table.Cell().Table(tbl => {
                                tbl.ColumnsDefinition(cols =>
                                {
                                    cols.RelativeColumn();
                                    cols.RelativeColumn();
                                    cols.RelativeColumn();
                                });
                                tbl.Cell().AlignLeft().Text("S. Inspecciones");
                                tbl.Cell().AlignLeft().Text("512-9168/62 (Ext. 1126)");
                                tbl.Cell().AlignLeft().Text("inspeccionesfyd@minsa.gob.pa");

                                tbl.Cell().AlignLeft().Text("S. Auditorías");
                                tbl.Cell().AlignLeft().Text("512-9168/62");
                                tbl.Cell().AlignLeft().Text("auditoriafyd@minsa.gob.pa");

                                tbl.Cell().AlignLeft().Text("OR Veraguas");
                                tbl.Cell().AlignLeft().Text("935-0316/18");
                                tbl.Cell().AlignLeft().Text("orvdnfd@minsa.gob.pa");

                                tbl.Cell().AlignLeft().Text("OR Chiriquí");
                                tbl.Cell().AlignLeft().Text("774-7410");
                                tbl.Cell().AlignLeft().Text("fydchiriqui@minsa.gob.pa");

                                tbl.Cell().AlignLeft().Text("OR Colón");
                                tbl.Cell().AlignLeft().Text("475-2060 Ext. 5021");
                                tbl.Cell().AlignLeft().Text("mbramwell@minsa.gob.pa");

                                tbl.Cell().AlignLeft().Text("OR Panamá Pacífico");
                                tbl.Cell().AlignLeft().Text("504-2565");
                                tbl.Cell().AlignLeft().Text("rlquiros@minsa.gob.pa");
                            });

                            table.Cell().AlignRight().AlignBottom().Text(string.Format("Confeccionado: Sección de Inspecciones {0}", DateTime.Now.ToString("dd/MM/yyyy")));
                        });


                    });
                })
                  .GeneratePdf();

                Stream stream = new MemoryStream(byteArray);

                return stream;
            }
            catch(Exception ex) 
            { }
            return null;
        }

        
        ///////////////////////////
        ///

        public async Task<Stream> GenerateCorrespondencia(long Id)
        {
            try
            {
                var correspondencia = DalService.Get<AUD_CorrespondenciaTB>(Id);

                // code in your main method
                var byteArray = QuestPDF.Fluent.Document.Create(container =>
                {
                    container.Page(page =>
                    {
                        page.Size(PageSizes.A4);
                        page.Margin(5, Unit.Millimetre);
                        page.PageColor(Colors.White);
                        page.DefaultTextStyle(x => x.FontSize(8));
                        //page.DefaultTextStyle(x => x.Color("Black"));

                        var path = System.IO.Path.Combine(env.WebRootPath, "img", "pdf", "Header.png");

                        page.Header().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                            });

                            table.Header(header =>
                            {
                                header.Cell().Image(path);
                                header.Cell().AlignCenter().Text("");
                                header.Cell().AlignCenter().Text("");
                                //header.Cell().AlignRight().AlignMiddle().Text(string.Format("Acta N°: {0}\r\nEstatus: {1}", inspection.NumActa, DataModel.Helper.Helper.GetDescription(inspection.StatusInspecciones)));
                            });

                            table.Cell().ColumnSpan(3).AlignLeft().Text("DIRECCIÓN NACIONAL DE FARMACIA Y DROGAS").Bold();
                            table.Cell().ColumnSpan(3).AlignCenter().Text("Departamento de Auditorías de Calidad a Establecimientos Farmacéuticos y No Farmacéuticos");
                            //table.Cell().ColumnSpan(3).AlignCenter().Text("Guía para las Buenas Prácticas de Almacenamiento, Distribución y Transporte de Medicamentos y Otros Productos para la Salud Humana".ToUpper()).Bold();
                        });

                        page.Content().PaddingVertical(20).Column(column =>
                        {
                            column.Item().AlignLeft().Text(string.Format("Para: {0} \r\n{1}", correspondencia.NombreDirigido, correspondencia.DptoSeccion));
                            column.Item().AlignLeft().Text(string.Format("Fecha: {0}", DateTime.Now.ToString("dd/MM/yyyy")));

                            
                            column.Item().PaddingVertical(10).AlignLeft().Text(string.Format(" ".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(string.Format("Asunto:".ToUpper())).Bold();
                            column.Item().AlignLeft().Text(correspondencia.Asunto);
                            
                        });

                        page.Footer().Column(column =>
                        {
                            column.Item().AlignLeft().Text("De: ______________________________________");
                            column.Item().AlignLeft().Text("Ana Belén Gonzáles");
                            column.Item().AlignLeft().Text("Jefa del Dpto. Auditorías de Calidad a \r\nEstablecimientos Farmacéuticos y NF");

                        });

                    });
                })
                  .GeneratePdf();

                Stream stream = new MemoryStream(byteArray);

                return stream;
            }
            catch (Exception ex)
            { }
            return null;
        }

    }

}
